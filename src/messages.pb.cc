// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "message/messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventRecord_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewEvent_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResolvedEvent_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResolvedIndexedEvent_messages_2eproto;
namespace es {
namespace message {
class NewEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewEvent> _instance;
} _NewEvent_default_instance_;
class EventRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventRecord> _instance;
} _EventRecord_default_instance_;
class ResolvedIndexedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolvedIndexedEvent> _instance;
} _ResolvedIndexedEvent_default_instance_;
class ResolvedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolvedEvent> _instance;
} _ResolvedEvent_default_instance_;
class WriteEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteEvents> _instance;
} _WriteEvents_default_instance_;
class WriteEventsCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteEventsCompleted> _instance;
} _WriteEventsCompleted_default_instance_;
class DeleteStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStream> _instance;
} _DeleteStream_default_instance_;
class DeleteStreamCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStreamCompleted> _instance;
} _DeleteStreamCompleted_default_instance_;
class TransactionStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionStart> _instance;
} _TransactionStart_default_instance_;
class TransactionStartCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionStartCompleted> _instance;
} _TransactionStartCompleted_default_instance_;
class TransactionWriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionWrite> _instance;
} _TransactionWrite_default_instance_;
class TransactionWriteCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionWriteCompleted> _instance;
} _TransactionWriteCompleted_default_instance_;
class TransactionCommitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionCommit> _instance;
} _TransactionCommit_default_instance_;
class TransactionCommitCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionCommitCompleted> _instance;
} _TransactionCommitCompleted_default_instance_;
class ReadEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadEvent> _instance;
} _ReadEvent_default_instance_;
class ReadEventCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadEventCompleted> _instance;
} _ReadEventCompleted_default_instance_;
class ReadStreamEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadStreamEvents> _instance;
} _ReadStreamEvents_default_instance_;
class ReadStreamEventsCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadStreamEventsCompleted> _instance;
} _ReadStreamEventsCompleted_default_instance_;
class ReadAllEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadAllEvents> _instance;
} _ReadAllEvents_default_instance_;
class ReadAllEventsCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadAllEventsCompleted> _instance;
} _ReadAllEventsCompleted_default_instance_;
class CreatePersistentSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePersistentSubscription> _instance;
} _CreatePersistentSubscription_default_instance_;
class DeletePersistentSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePersistentSubscription> _instance;
} _DeletePersistentSubscription_default_instance_;
class UpdatePersistentSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePersistentSubscription> _instance;
} _UpdatePersistentSubscription_default_instance_;
class UpdatePersistentSubscriptionCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePersistentSubscriptionCompleted> _instance;
} _UpdatePersistentSubscriptionCompleted_default_instance_;
class CreatePersistentSubscriptionCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePersistentSubscriptionCompleted> _instance;
} _CreatePersistentSubscriptionCompleted_default_instance_;
class DeletePersistentSubscriptionCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePersistentSubscriptionCompleted> _instance;
} _DeletePersistentSubscriptionCompleted_default_instance_;
class ConnectToPersistentSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectToPersistentSubscription> _instance;
} _ConnectToPersistentSubscription_default_instance_;
class PersistentSubscriptionAckEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistentSubscriptionAckEvents> _instance;
} _PersistentSubscriptionAckEvents_default_instance_;
class PersistentSubscriptionNakEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistentSubscriptionNakEvents> _instance;
} _PersistentSubscriptionNakEvents_default_instance_;
class PersistentSubscriptionConfirmationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistentSubscriptionConfirmation> _instance;
} _PersistentSubscriptionConfirmation_default_instance_;
class PersistentSubscriptionStreamEventAppearedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistentSubscriptionStreamEventAppeared> _instance;
} _PersistentSubscriptionStreamEventAppeared_default_instance_;
class SubscribeToStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeToStream> _instance;
} _SubscribeToStream_default_instance_;
class SubscriptionConfirmationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionConfirmation> _instance;
} _SubscriptionConfirmation_default_instance_;
class StreamEventAppearedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamEventAppeared> _instance;
} _StreamEventAppeared_default_instance_;
class UnsubscribeFromStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeFromStream> _instance;
} _UnsubscribeFromStream_default_instance_;
class SubscriptionDroppedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionDropped> _instance;
} _SubscriptionDropped_default_instance_;
class NotHandled_MasterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotHandled_MasterInfo> _instance;
} _NotHandled_MasterInfo_default_instance_;
class NotHandledDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotHandled> _instance;
} _NotHandled_default_instance_;
class ScavengeDatabaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScavengeDatabase> _instance;
} _ScavengeDatabase_default_instance_;
class ScavengeDatabaseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScavengeDatabaseResponse> _instance;
} _ScavengeDatabaseResponse_default_instance_;
class IdentifyClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IdentifyClient> _instance;
} _IdentifyClient_default_instance_;
class ClientIdentifiedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientIdentified> _instance;
} _ClientIdentified_default_instance_;
}  // namespace message
}  // namespace es
static void InitDefaultsscc_info_ClientIdentified_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ClientIdentified_default_instance_;
    new (ptr) ::es::message::ClientIdentified();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ClientIdentified::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientIdentified_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientIdentified_messages_2eproto}, {}};

static void InitDefaultsscc_info_ConnectToPersistentSubscription_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ConnectToPersistentSubscription_default_instance_;
    new (ptr) ::es::message::ConnectToPersistentSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ConnectToPersistentSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectToPersistentSubscription_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConnectToPersistentSubscription_messages_2eproto}, {}};

static void InitDefaultsscc_info_CreatePersistentSubscription_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_CreatePersistentSubscription_default_instance_;
    new (ptr) ::es::message::CreatePersistentSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::CreatePersistentSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePersistentSubscription_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CreatePersistentSubscription_messages_2eproto}, {}};

static void InitDefaultsscc_info_CreatePersistentSubscriptionCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_CreatePersistentSubscriptionCompleted_default_instance_;
    new (ptr) ::es::message::CreatePersistentSubscriptionCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::CreatePersistentSubscriptionCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePersistentSubscriptionCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CreatePersistentSubscriptionCompleted_messages_2eproto}, {}};

static void InitDefaultsscc_info_DeletePersistentSubscription_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_DeletePersistentSubscription_default_instance_;
    new (ptr) ::es::message::DeletePersistentSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::DeletePersistentSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePersistentSubscription_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeletePersistentSubscription_messages_2eproto}, {}};

static void InitDefaultsscc_info_DeletePersistentSubscriptionCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_DeletePersistentSubscriptionCompleted_default_instance_;
    new (ptr) ::es::message::DeletePersistentSubscriptionCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::DeletePersistentSubscriptionCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePersistentSubscriptionCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeletePersistentSubscriptionCompleted_messages_2eproto}, {}};

static void InitDefaultsscc_info_DeleteStream_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_DeleteStream_default_instance_;
    new (ptr) ::es::message::DeleteStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::DeleteStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteStream_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteStream_messages_2eproto}, {}};

static void InitDefaultsscc_info_DeleteStreamCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_DeleteStreamCompleted_default_instance_;
    new (ptr) ::es::message::DeleteStreamCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::DeleteStreamCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteStreamCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteStreamCompleted_messages_2eproto}, {}};

static void InitDefaultsscc_info_EventRecord_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_EventRecord_default_instance_;
    new (ptr) ::es::message::EventRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::EventRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventRecord_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventRecord_messages_2eproto}, {}};

static void InitDefaultsscc_info_IdentifyClient_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_IdentifyClient_default_instance_;
    new (ptr) ::es::message::IdentifyClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::IdentifyClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IdentifyClient_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IdentifyClient_messages_2eproto}, {}};

static void InitDefaultsscc_info_NewEvent_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_NewEvent_default_instance_;
    new (ptr) ::es::message::NewEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::NewEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewEvent_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NewEvent_messages_2eproto}, {}};

static void InitDefaultsscc_info_NotHandled_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_NotHandled_default_instance_;
    new (ptr) ::es::message::NotHandled();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::NotHandled::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NotHandled_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NotHandled_messages_2eproto}, {}};

static void InitDefaultsscc_info_NotHandled_MasterInfo_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_NotHandled_MasterInfo_default_instance_;
    new (ptr) ::es::message::NotHandled_MasterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::NotHandled_MasterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NotHandled_MasterInfo_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NotHandled_MasterInfo_messages_2eproto}, {}};

static void InitDefaultsscc_info_PersistentSubscriptionAckEvents_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_PersistentSubscriptionAckEvents_default_instance_;
    new (ptr) ::es::message::PersistentSubscriptionAckEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::PersistentSubscriptionAckEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistentSubscriptionAckEvents_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PersistentSubscriptionAckEvents_messages_2eproto}, {}};

static void InitDefaultsscc_info_PersistentSubscriptionConfirmation_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_PersistentSubscriptionConfirmation_default_instance_;
    new (ptr) ::es::message::PersistentSubscriptionConfirmation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::PersistentSubscriptionConfirmation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistentSubscriptionConfirmation_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PersistentSubscriptionConfirmation_messages_2eproto}, {}};

static void InitDefaultsscc_info_PersistentSubscriptionNakEvents_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_PersistentSubscriptionNakEvents_default_instance_;
    new (ptr) ::es::message::PersistentSubscriptionNakEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::PersistentSubscriptionNakEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistentSubscriptionNakEvents_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PersistentSubscriptionNakEvents_messages_2eproto}, {}};

static void InitDefaultsscc_info_PersistentSubscriptionStreamEventAppeared_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_PersistentSubscriptionStreamEventAppeared_default_instance_;
    new (ptr) ::es::message::PersistentSubscriptionStreamEventAppeared();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::PersistentSubscriptionStreamEventAppeared::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PersistentSubscriptionStreamEventAppeared_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PersistentSubscriptionStreamEventAppeared_messages_2eproto}, {
      &scc_info_ResolvedIndexedEvent_messages_2eproto.base,}};

static void InitDefaultsscc_info_ReadAllEvents_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ReadAllEvents_default_instance_;
    new (ptr) ::es::message::ReadAllEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ReadAllEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadAllEvents_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReadAllEvents_messages_2eproto}, {}};

static void InitDefaultsscc_info_ReadAllEventsCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ReadAllEventsCompleted_default_instance_;
    new (ptr) ::es::message::ReadAllEventsCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ReadAllEventsCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadAllEventsCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReadAllEventsCompleted_messages_2eproto}, {
      &scc_info_ResolvedEvent_messages_2eproto.base,}};

static void InitDefaultsscc_info_ReadEvent_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ReadEvent_default_instance_;
    new (ptr) ::es::message::ReadEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ReadEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadEvent_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReadEvent_messages_2eproto}, {}};

static void InitDefaultsscc_info_ReadEventCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ReadEventCompleted_default_instance_;
    new (ptr) ::es::message::ReadEventCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ReadEventCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadEventCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReadEventCompleted_messages_2eproto}, {
      &scc_info_ResolvedIndexedEvent_messages_2eproto.base,}};

static void InitDefaultsscc_info_ReadStreamEvents_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ReadStreamEvents_default_instance_;
    new (ptr) ::es::message::ReadStreamEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ReadStreamEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadStreamEvents_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReadStreamEvents_messages_2eproto}, {}};

static void InitDefaultsscc_info_ReadStreamEventsCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ReadStreamEventsCompleted_default_instance_;
    new (ptr) ::es::message::ReadStreamEventsCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ReadStreamEventsCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadStreamEventsCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReadStreamEventsCompleted_messages_2eproto}, {
      &scc_info_ResolvedIndexedEvent_messages_2eproto.base,}};

static void InitDefaultsscc_info_ResolvedEvent_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ResolvedEvent_default_instance_;
    new (ptr) ::es::message::ResolvedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ResolvedEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResolvedEvent_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResolvedEvent_messages_2eproto}, {
      &scc_info_EventRecord_messages_2eproto.base,}};

static void InitDefaultsscc_info_ResolvedIndexedEvent_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ResolvedIndexedEvent_default_instance_;
    new (ptr) ::es::message::ResolvedIndexedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ResolvedIndexedEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResolvedIndexedEvent_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResolvedIndexedEvent_messages_2eproto}, {
      &scc_info_EventRecord_messages_2eproto.base,}};

static void InitDefaultsscc_info_ScavengeDatabase_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ScavengeDatabase_default_instance_;
    new (ptr) ::es::message::ScavengeDatabase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ScavengeDatabase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScavengeDatabase_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ScavengeDatabase_messages_2eproto}, {}};

static void InitDefaultsscc_info_ScavengeDatabaseResponse_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_ScavengeDatabaseResponse_default_instance_;
    new (ptr) ::es::message::ScavengeDatabaseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::ScavengeDatabaseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScavengeDatabaseResponse_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ScavengeDatabaseResponse_messages_2eproto}, {}};

static void InitDefaultsscc_info_StreamEventAppeared_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_StreamEventAppeared_default_instance_;
    new (ptr) ::es::message::StreamEventAppeared();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::StreamEventAppeared::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamEventAppeared_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StreamEventAppeared_messages_2eproto}, {
      &scc_info_ResolvedEvent_messages_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeToStream_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_SubscribeToStream_default_instance_;
    new (ptr) ::es::message::SubscribeToStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::SubscribeToStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeToStream_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubscribeToStream_messages_2eproto}, {}};

static void InitDefaultsscc_info_SubscriptionConfirmation_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_SubscriptionConfirmation_default_instance_;
    new (ptr) ::es::message::SubscriptionConfirmation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::SubscriptionConfirmation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionConfirmation_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubscriptionConfirmation_messages_2eproto}, {}};

static void InitDefaultsscc_info_SubscriptionDropped_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_SubscriptionDropped_default_instance_;
    new (ptr) ::es::message::SubscriptionDropped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::SubscriptionDropped::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionDropped_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubscriptionDropped_messages_2eproto}, {}};

static void InitDefaultsscc_info_TransactionCommit_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_TransactionCommit_default_instance_;
    new (ptr) ::es::message::TransactionCommit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::TransactionCommit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionCommit_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransactionCommit_messages_2eproto}, {}};

static void InitDefaultsscc_info_TransactionCommitCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_TransactionCommitCompleted_default_instance_;
    new (ptr) ::es::message::TransactionCommitCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::TransactionCommitCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionCommitCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransactionCommitCompleted_messages_2eproto}, {}};

static void InitDefaultsscc_info_TransactionStart_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_TransactionStart_default_instance_;
    new (ptr) ::es::message::TransactionStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::TransactionStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionStart_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransactionStart_messages_2eproto}, {}};

static void InitDefaultsscc_info_TransactionStartCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_TransactionStartCompleted_default_instance_;
    new (ptr) ::es::message::TransactionStartCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::TransactionStartCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionStartCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransactionStartCompleted_messages_2eproto}, {}};

static void InitDefaultsscc_info_TransactionWrite_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_TransactionWrite_default_instance_;
    new (ptr) ::es::message::TransactionWrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::TransactionWrite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionWrite_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransactionWrite_messages_2eproto}, {
      &scc_info_NewEvent_messages_2eproto.base,}};

static void InitDefaultsscc_info_TransactionWriteCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_TransactionWriteCompleted_default_instance_;
    new (ptr) ::es::message::TransactionWriteCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::TransactionWriteCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionWriteCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransactionWriteCompleted_messages_2eproto}, {}};

static void InitDefaultsscc_info_UnsubscribeFromStream_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_UnsubscribeFromStream_default_instance_;
    new (ptr) ::es::message::UnsubscribeFromStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::UnsubscribeFromStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsubscribeFromStream_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UnsubscribeFromStream_messages_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePersistentSubscription_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_UpdatePersistentSubscription_default_instance_;
    new (ptr) ::es::message::UpdatePersistentSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::UpdatePersistentSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePersistentSubscription_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdatePersistentSubscription_messages_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePersistentSubscriptionCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_UpdatePersistentSubscriptionCompleted_default_instance_;
    new (ptr) ::es::message::UpdatePersistentSubscriptionCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::UpdatePersistentSubscriptionCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePersistentSubscriptionCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdatePersistentSubscriptionCompleted_messages_2eproto}, {}};

static void InitDefaultsscc_info_WriteEvents_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_WriteEvents_default_instance_;
    new (ptr) ::es::message::WriteEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::WriteEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteEvents_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WriteEvents_messages_2eproto}, {
      &scc_info_NewEvent_messages_2eproto.base,}};

static void InitDefaultsscc_info_WriteEventsCompleted_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::es::message::_WriteEventsCompleted_default_instance_;
    new (ptr) ::es::message::WriteEventsCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::es::message::WriteEventsCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteEventsCompleted_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WriteEventsCompleted_messages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[42];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::es::message::NewEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::NewEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::NewEvent, event_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::NewEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::es::message::NewEvent, data_content_type_),
  PROTOBUF_FIELD_OFFSET(::es::message::NewEvent, metadata_content_type_),
  PROTOBUF_FIELD_OFFSET(::es::message::NewEvent, data_),
  PROTOBUF_FIELD_OFFSET(::es::message::NewEvent, metadata_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, event_number_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, event_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, event_type_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, data_content_type_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, metadata_content_type_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, data_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, metadata_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, created_),
  PROTOBUF_FIELD_OFFSET(::es::message::EventRecord, created_epoch_),
  0,
  5,
  1,
  2,
  6,
  7,
  3,
  4,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedIndexedEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedIndexedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedIndexedEvent, event_),
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedIndexedEvent, link_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedEvent, event_),
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedEvent, link_),
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedEvent, commit_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::ResolvedEvent, prepare_position_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEvents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEvents, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEvents, expected_version_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEvents, events_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEvents, require_master_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEventsCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEventsCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEventsCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEventsCompleted, message_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEventsCompleted, first_event_number_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEventsCompleted, last_event_number_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEventsCompleted, prepare_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEventsCompleted, commit_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::WriteEventsCompleted, current_version_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStream, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStream, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStream, expected_version_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStream, require_master_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStream, hard_delete_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStreamCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStreamCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStreamCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStreamCompleted, message_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStreamCompleted, prepare_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeleteStreamCompleted, commit_position_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStart, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStart, expected_version_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStart, require_master_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStartCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStartCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStartCompleted, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStartCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionStartCompleted, message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWrite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWrite, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWrite, events_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWrite, require_master_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWriteCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWriteCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWriteCompleted, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWriteCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionWriteCompleted, message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommit, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommit, require_master_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommitCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommitCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommitCompleted, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommitCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommitCompleted, message_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommitCompleted, first_event_number_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommitCompleted, last_event_number_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommitCompleted, prepare_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::TransactionCommitCompleted, commit_position_),
  1,
  6,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEvent, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEvent, event_number_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEvent, resolve_link_tos_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEvent, require_master_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEventCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEventCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEventCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEventCompleted, event_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadEventCompleted, error_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEvents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEvents, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEvents, from_event_number_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEvents, max_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEvents, resolve_link_tos_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEvents, require_master_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEventsCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEventsCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEventsCompleted, events_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEventsCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEventsCompleted, next_event_number_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEventsCompleted, last_event_number_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEventsCompleted, is_end_of_stream_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEventsCompleted, last_commit_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadStreamEventsCompleted, error_),
  ~0u,
  2,
  1,
  4,
  3,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEvents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEvents, commit_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEvents, prepare_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEvents, max_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEvents, resolve_link_tos_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEvents, require_master_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEventsCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEventsCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEventsCompleted, commit_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEventsCompleted, prepare_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEventsCompleted, events_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEventsCompleted, next_commit_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEventsCompleted, next_prepare_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEventsCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::ReadAllEventsCompleted, error_),
  1,
  2,
  ~0u,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, subscription_group_name_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, resolve_link_tos_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, start_from_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, message_timeout_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, record_statistics_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, live_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, read_batch_size_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, buffer_size_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, max_retry_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, prefer_round_robin_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, checkpoint_after_time_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, checkpoint_max_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, checkpoint_min_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, subscriber_max_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscription, named_consumer_strategy_),
  0,
  1,
  5,
  3,
  4,
  6,
  8,
  9,
  10,
  11,
  7,
  12,
  13,
  14,
  15,
  2,
  PROTOBUF_FIELD_OFFSET(::es::message::DeletePersistentSubscription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeletePersistentSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::DeletePersistentSubscription, subscription_group_name_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeletePersistentSubscription, event_stream_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, subscription_group_name_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, resolve_link_tos_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, start_from_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, message_timeout_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, record_statistics_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, live_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, read_batch_size_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, buffer_size_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, max_retry_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, prefer_round_robin_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, checkpoint_after_time_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, checkpoint_max_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, checkpoint_min_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, subscriber_max_count_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscription, named_consumer_strategy_),
  0,
  1,
  5,
  3,
  4,
  6,
  8,
  9,
  10,
  11,
  7,
  12,
  13,
  14,
  15,
  2,
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscriptionCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscriptionCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscriptionCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::UpdatePersistentSubscriptionCompleted, reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscriptionCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscriptionCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscriptionCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::CreatePersistentSubscriptionCompleted, reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::DeletePersistentSubscriptionCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeletePersistentSubscriptionCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::DeletePersistentSubscriptionCompleted, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::DeletePersistentSubscriptionCompleted, reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::ConnectToPersistentSubscription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ConnectToPersistentSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ConnectToPersistentSubscription, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::ConnectToPersistentSubscription, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::ConnectToPersistentSubscription, allowed_in_flight_messages_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionAckEvents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionAckEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionAckEvents, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionAckEvents, processed_event_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionNakEvents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionNakEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionNakEvents, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionNakEvents, processed_event_ids_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionNakEvents, message_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionNakEvents, action_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionConfirmation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionConfirmation, last_commit_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionConfirmation, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionConfirmation, last_event_number_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionStreamEventAppeared, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionStreamEventAppeared, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionStreamEventAppeared, event_),
  PROTOBUF_FIELD_OFFSET(::es::message::PersistentSubscriptionStreamEventAppeared, retrycount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::es::message::SubscribeToStream, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::SubscribeToStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::SubscribeToStream, event_stream_id_),
  PROTOBUF_FIELD_OFFSET(::es::message::SubscribeToStream, resolve_link_tos_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::es::message::SubscriptionConfirmation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::SubscriptionConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::SubscriptionConfirmation, last_commit_position_),
  PROTOBUF_FIELD_OFFSET(::es::message::SubscriptionConfirmation, last_event_number_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::es::message::StreamEventAppeared, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::StreamEventAppeared, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::StreamEventAppeared, event_),
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::UnsubscribeFromStream, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::UnsubscribeFromStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::SubscriptionDropped, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::SubscriptionDropped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::SubscriptionDropped, reason_),
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled_MasterInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled_MasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled_MasterInfo, external_tcp_address_),
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled_MasterInfo, external_tcp_port_),
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled_MasterInfo, external_http_address_),
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled_MasterInfo, external_http_port_),
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled_MasterInfo, external_secure_tcp_address_),
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled_MasterInfo, external_secure_tcp_port_),
  0,
  3,
  1,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled, reason_),
  PROTOBUF_FIELD_OFFSET(::es::message::NotHandled, additional_info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::ScavengeDatabase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ScavengeDatabase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ScavengeDatabaseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ScavengeDatabaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::ScavengeDatabaseResponse, result_),
  PROTOBUF_FIELD_OFFSET(::es::message::ScavengeDatabaseResponse, scavengeid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::IdentifyClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::IdentifyClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::es::message::IdentifyClient, version_),
  PROTOBUF_FIELD_OFFSET(::es::message::IdentifyClient, connection_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::es::message::ClientIdentified, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::es::message::ClientIdentified, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::es::message::NewEvent)},
  { 17, 32, sizeof(::es::message::EventRecord)},
  { 42, 49, sizeof(::es::message::ResolvedIndexedEvent)},
  { 51, 60, sizeof(::es::message::ResolvedEvent)},
  { 64, 73, sizeof(::es::message::WriteEvents)},
  { 77, 89, sizeof(::es::message::WriteEventsCompleted)},
  { 96, 105, sizeof(::es::message::DeleteStream)},
  { 109, 118, sizeof(::es::message::DeleteStreamCompleted)},
  { 122, 130, sizeof(::es::message::TransactionStart)},
  { 133, 141, sizeof(::es::message::TransactionStartCompleted)},
  { 144, 152, sizeof(::es::message::TransactionWrite)},
  { 155, 163, sizeof(::es::message::TransactionWriteCompleted)},
  { 166, 173, sizeof(::es::message::TransactionCommit)},
  { 175, 187, sizeof(::es::message::TransactionCommitCompleted)},
  { 194, 203, sizeof(::es::message::ReadEvent)},
  { 207, 215, sizeof(::es::message::ReadEventCompleted)},
  { 218, 228, sizeof(::es::message::ReadStreamEvents)},
  { 233, 245, sizeof(::es::message::ReadStreamEventsCompleted)},
  { 252, 262, sizeof(::es::message::ReadAllEvents)},
  { 267, 279, sizeof(::es::message::ReadAllEventsCompleted)},
  { 286, 307, sizeof(::es::message::CreatePersistentSubscription)},
  { 323, 330, sizeof(::es::message::DeletePersistentSubscription)},
  { 332, 353, sizeof(::es::message::UpdatePersistentSubscription)},
  { 369, 376, sizeof(::es::message::UpdatePersistentSubscriptionCompleted)},
  { 378, 385, sizeof(::es::message::CreatePersistentSubscriptionCompleted)},
  { 387, 394, sizeof(::es::message::DeletePersistentSubscriptionCompleted)},
  { 396, 404, sizeof(::es::message::ConnectToPersistentSubscription)},
  { 407, 414, sizeof(::es::message::PersistentSubscriptionAckEvents)},
  { 416, 425, sizeof(::es::message::PersistentSubscriptionNakEvents)},
  { 429, 437, sizeof(::es::message::PersistentSubscriptionConfirmation)},
  { 440, 447, sizeof(::es::message::PersistentSubscriptionStreamEventAppeared)},
  { 449, 456, sizeof(::es::message::SubscribeToStream)},
  { 458, 465, sizeof(::es::message::SubscriptionConfirmation)},
  { 467, 473, sizeof(::es::message::StreamEventAppeared)},
  { 474, 479, sizeof(::es::message::UnsubscribeFromStream)},
  { 479, 485, sizeof(::es::message::SubscriptionDropped)},
  { 486, 497, sizeof(::es::message::NotHandled_MasterInfo)},
  { 503, 510, sizeof(::es::message::NotHandled)},
  { 512, 517, sizeof(::es::message::ScavengeDatabase)},
  { 517, 524, sizeof(::es::message::ScavengeDatabaseResponse)},
  { 526, 533, sizeof(::es::message::IdentifyClient)},
  { 535, 540, sizeof(::es::message::ClientIdentified)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_NewEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_EventRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ResolvedIndexedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ResolvedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_WriteEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_WriteEventsCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_DeleteStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_DeleteStreamCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_TransactionStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_TransactionStartCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_TransactionWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_TransactionWriteCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_TransactionCommit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_TransactionCommitCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ReadEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ReadEventCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ReadStreamEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ReadStreamEventsCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ReadAllEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ReadAllEventsCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_CreatePersistentSubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_DeletePersistentSubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_UpdatePersistentSubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_UpdatePersistentSubscriptionCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_CreatePersistentSubscriptionCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_DeletePersistentSubscriptionCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ConnectToPersistentSubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_PersistentSubscriptionAckEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_PersistentSubscriptionNakEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_PersistentSubscriptionConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_PersistentSubscriptionStreamEventAppeared_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_SubscribeToStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_SubscriptionConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_StreamEventAppeared_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_UnsubscribeFromStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_SubscriptionDropped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_NotHandled_MasterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_NotHandled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ScavengeDatabase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ScavengeDatabaseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_IdentifyClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::es::message::_ClientIdentified_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\nes.message\"\212\001\n\010NewEven"
  "t\022\020\n\010event_id\030\001 \002(\014\022\022\n\nevent_type\030\002 \002(\t\022"
  "\031\n\021data_content_type\030\003 \002(\005\022\035\n\025metadata_c"
  "ontent_type\030\004 \002(\005\022\014\n\004data\030\005 \002(\014\022\020\n\010metad"
  "ata\030\006 \001(\014\"\344\001\n\013EventRecord\022\027\n\017event_strea"
  "m_id\030\001 \002(\t\022\024\n\014event_number\030\002 \002(\003\022\020\n\010even"
  "t_id\030\003 \002(\014\022\022\n\nevent_type\030\004 \002(\t\022\031\n\021data_c"
  "ontent_type\030\005 \002(\005\022\035\n\025metadata_content_ty"
  "pe\030\006 \002(\005\022\014\n\004data\030\007 \002(\014\022\020\n\010metadata\030\010 \001(\014"
  "\022\017\n\007created\030\t \001(\003\022\025\n\rcreated_epoch\030\n \001(\003"
  "\"e\n\024ResolvedIndexedEvent\022&\n\005event\030\001 \002(\0132"
  "\027.es.message.EventRecord\022%\n\004link\030\002 \001(\0132\027"
  ".es.message.EventRecord\"\221\001\n\rResolvedEven"
  "t\022&\n\005event\030\001 \002(\0132\027.es.message.EventRecor"
  "d\022%\n\004link\030\002 \001(\0132\027.es.message.EventRecord"
  "\022\027\n\017commit_position\030\003 \002(\003\022\030\n\020prepare_pos"
  "ition\030\004 \002(\003\"~\n\013WriteEvents\022\027\n\017event_stre"
  "am_id\030\001 \002(\t\022\030\n\020expected_version\030\002 \002(\003\022$\n"
  "\006events\030\003 \003(\0132\024.es.message.NewEvent\022\026\n\016r"
  "equire_master\030\004 \002(\010\"\327\001\n\024WriteEventsCompl"
  "eted\022+\n\006result\030\001 \002(\0162\033.es.message.Operat"
  "ionResult\022\017\n\007message\030\002 \001(\t\022\032\n\022first_even"
  "t_number\030\003 \002(\003\022\031\n\021last_event_number\030\004 \002("
  "\003\022\030\n\020prepare_position\030\005 \001(\003\022\027\n\017commit_po"
  "sition\030\006 \001(\003\022\027\n\017current_version\030\007 \001(\003\"n\n"
  "\014DeleteStream\022\027\n\017event_stream_id\030\001 \002(\t\022\030"
  "\n\020expected_version\030\002 \002(\003\022\026\n\016require_mast"
  "er\030\003 \002(\010\022\023\n\013hard_delete\030\004 \001(\010\"\210\001\n\025Delete"
  "StreamCompleted\022+\n\006result\030\001 \002(\0162\033.es.mes"
  "sage.OperationResult\022\017\n\007message\030\002 \001(\t\022\030\n"
  "\020prepare_position\030\003 \001(\003\022\027\n\017commit_positi"
  "on\030\004 \001(\003\"]\n\020TransactionStart\022\027\n\017event_st"
  "ream_id\030\001 \002(\t\022\030\n\020expected_version\030\002 \002(\003\022"
  "\026\n\016require_master\030\003 \002(\010\"q\n\031TransactionSt"
  "artCompleted\022\026\n\016transaction_id\030\001 \002(\003\022+\n\006"
  "result\030\002 \002(\0162\033.es.message.OperationResul"
  "t\022\017\n\007message\030\003 \001(\t\"h\n\020TransactionWrite\022\026"
  "\n\016transaction_id\030\001 \002(\003\022$\n\006events\030\002 \003(\0132\024"
  ".es.message.NewEvent\022\026\n\016require_master\030\003"
  " \002(\010\"q\n\031TransactionWriteCompleted\022\026\n\016tra"
  "nsaction_id\030\001 \002(\003\022+\n\006result\030\002 \002(\0162\033.es.m"
  "essage.OperationResult\022\017\n\007message\030\003 \001(\t\""
  "C\n\021TransactionCommit\022\026\n\016transaction_id\030\001"
  " \002(\003\022\026\n\016require_master\030\002 \002(\010\"\334\001\n\032Transac"
  "tionCommitCompleted\022\026\n\016transaction_id\030\001 "
  "\002(\003\022+\n\006result\030\002 \002(\0162\033.es.message.Operati"
  "onResult\022\017\n\007message\030\003 \001(\t\022\032\n\022first_event"
  "_number\030\004 \002(\003\022\031\n\021last_event_number\030\005 \002(\003"
  "\022\030\n\020prepare_position\030\006 \001(\003\022\027\n\017commit_pos"
  "ition\030\007 \001(\003\"l\n\tReadEvent\022\027\n\017event_stream"
  "_id\030\001 \002(\t\022\024\n\014event_number\030\002 \002(\003\022\030\n\020resol"
  "ve_link_tos\030\003 \002(\010\022\026\n\016require_master\030\004 \002("
  "\010\"\200\002\n\022ReadEventCompleted\022>\n\006result\030\001 \002(\016"
  "2..es.message.ReadEventCompleted.ReadEve"
  "ntResult\022/\n\005event\030\002 \002(\0132 .es.message.Res"
  "olvedIndexedEvent\022\r\n\005error\030\003 \001(\t\"j\n\017Read"
  "EventResult\022\013\n\007Success\020\000\022\014\n\010NotFound\020\001\022\014"
  "\n\010NoStream\020\002\022\021\n\rStreamDeleted\020\003\022\t\n\005Error"
  "\020\004\022\020\n\014AccessDenied\020\005\"\213\001\n\020ReadStreamEvent"
  "s\022\027\n\017event_stream_id\030\001 \002(\t\022\031\n\021from_event"
  "_number\030\002 \002(\003\022\021\n\tmax_count\030\003 \002(\005\022\030\n\020reso"
  "lve_link_tos\030\004 \002(\010\022\026\n\016require_master\030\005 \002"
  "(\010\"\202\003\n\031ReadStreamEventsCompleted\0220\n\006even"
  "ts\030\001 \003(\0132 .es.message.ResolvedIndexedEve"
  "nt\022F\n\006result\030\002 \002(\01626.es.message.ReadStre"
  "amEventsCompleted.ReadStreamResult\022\031\n\021ne"
  "xt_event_number\030\003 \002(\003\022\031\n\021last_event_numb"
  "er\030\004 \002(\003\022\030\n\020is_end_of_stream\030\005 \002(\010\022\034\n\024la"
  "st_commit_position\030\006 \002(\003\022\r\n\005error\030\007 \001(\t\""
  "n\n\020ReadStreamResult\022\013\n\007Success\020\000\022\014\n\010NoSt"
  "ream\020\001\022\021\n\rStreamDeleted\020\002\022\017\n\013NotModified"
  "\020\003\022\t\n\005Error\020\004\022\020\n\014AccessDenied\020\005\"\207\001\n\rRead"
  "AllEvents\022\027\n\017commit_position\030\001 \002(\003\022\030\n\020pr"
  "epare_position\030\002 \002(\003\022\021\n\tmax_count\030\003 \002(\005\022"
  "\030\n\020resolve_link_tos\030\004 \002(\010\022\026\n\016require_mas"
  "ter\030\005 \002(\010\"\320\002\n\026ReadAllEventsCompleted\022\027\n\017"
  "commit_position\030\001 \002(\003\022\030\n\020prepare_positio"
  "n\030\002 \002(\003\022)\n\006events\030\003 \003(\0132\031.es.message.Res"
  "olvedEvent\022\034\n\024next_commit_position\030\004 \002(\003"
  "\022\035\n\025next_prepare_position\030\005 \002(\003\022@\n\006resul"
  "t\030\006 \001(\01620.es.message.ReadAllEventsComple"
  "ted.ReadAllResult\022\r\n\005error\030\007 \001(\t\"J\n\rRead"
  "AllResult\022\013\n\007Success\020\000\022\017\n\013NotModified\020\001\022"
  "\t\n\005Error\020\002\022\020\n\014AccessDenied\020\003\"\336\003\n\034CreateP"
  "ersistentSubscription\022\037\n\027subscription_gr"
  "oup_name\030\001 \002(\t\022\027\n\017event_stream_id\030\002 \002(\t\022"
  "\030\n\020resolve_link_tos\030\003 \002(\010\022\022\n\nstart_from\030"
  "\004 \002(\003\022$\n\034message_timeout_milliseconds\030\005 "
  "\002(\005\022\031\n\021record_statistics\030\006 \002(\010\022\030\n\020live_b"
  "uffer_size\030\007 \002(\005\022\027\n\017read_batch_size\030\010 \002("
  "\005\022\023\n\013buffer_size\030\t \002(\005\022\027\n\017max_retry_coun"
  "t\030\n \002(\005\022\032\n\022prefer_round_robin\030\013 \002(\010\022\035\n\025c"
  "heckpoint_after_time\030\014 \002(\005\022\034\n\024checkpoint"
  "_max_count\030\r \002(\005\022\034\n\024checkpoint_min_count"
  "\030\016 \002(\005\022\034\n\024subscriber_max_count\030\017 \002(\005\022\037\n\027"
  "named_consumer_strategy\030\020 \001(\t\"X\n\034DeleteP"
  "ersistentSubscription\022\037\n\027subscription_gr"
  "oup_name\030\001 \002(\t\022\027\n\017event_stream_id\030\002 \002(\t\""
  "\336\003\n\034UpdatePersistentSubscription\022\037\n\027subs"
  "cription_group_name\030\001 \002(\t\022\027\n\017event_strea"
  "m_id\030\002 \002(\t\022\030\n\020resolve_link_tos\030\003 \002(\010\022\022\n\n"
  "start_from\030\004 \002(\003\022$\n\034message_timeout_mill"
  "iseconds\030\005 \002(\005\022\031\n\021record_statistics\030\006 \002("
  "\010\022\030\n\020live_buffer_size\030\007 \002(\005\022\027\n\017read_batc"
  "h_size\030\010 \002(\005\022\023\n\013buffer_size\030\t \002(\005\022\027\n\017max"
  "_retry_count\030\n \002(\005\022\032\n\022prefer_round_robin"
  "\030\013 \002(\010\022\035\n\025checkpoint_after_time\030\014 \002(\005\022\034\n"
  "\024checkpoint_max_count\030\r \002(\005\022\034\n\024checkpoin"
  "t_min_count\030\016 \002(\005\022\034\n\024subscriber_max_coun"
  "t\030\017 \002(\005\022\037\n\027named_consumer_strategy\030\020 \001(\t"
  "\"\376\001\n%UpdatePersistentSubscriptionComplet"
  "ed\022d\n\006result\030\001 \002(\0162T.es.message.UpdatePe"
  "rsistentSubscriptionCompleted.UpdatePers"
  "istentSubscriptionResult\022\016\n\006reason\030\002 \001(\t"
  "\"_\n\"UpdatePersistentSubscriptionResult\022\013"
  "\n\007Success\020\000\022\020\n\014DoesNotExist\020\001\022\010\n\004Fail\020\002\022"
  "\020\n\014AccessDenied\020\003\"\377\001\n%CreatePersistentSu"
  "bscriptionCompleted\022d\n\006result\030\001 \002(\0162T.es"
  ".message.CreatePersistentSubscriptionCom"
  "pleted.CreatePersistentSubscriptionResul"
  "t\022\016\n\006reason\030\002 \001(\t\"`\n\"CreatePersistentSub"
  "scriptionResult\022\013\n\007Success\020\000\022\021\n\rAlreadyE"
  "xists\020\001\022\010\n\004Fail\020\002\022\020\n\014AccessDenied\020\003\"\376\001\n%"
  "DeletePersistentSubscriptionCompleted\022d\n"
  "\006result\030\001 \002(\0162T.es.message.DeletePersist"
  "entSubscriptionCompleted.DeletePersisten"
  "tSubscriptionResult\022\016\n\006reason\030\002 \001(\t\"_\n\"D"
  "eletePersistentSubscriptionResult\022\013\n\007Suc"
  "cess\020\000\022\020\n\014DoesNotExist\020\001\022\010\n\004Fail\020\002\022\020\n\014Ac"
  "cessDenied\020\003\"w\n\037ConnectToPersistentSubsc"
  "ription\022\027\n\017subscription_id\030\001 \002(\t\022\027\n\017even"
  "t_stream_id\030\002 \002(\t\022\"\n\032allowed_in_flight_m"
  "essages\030\003 \002(\005\"W\n\037PersistentSubscriptionA"
  "ckEvents\022\027\n\017subscription_id\030\001 \002(\t\022\033\n\023pro"
  "cessed_event_ids\030\002 \003(\014\"\362\001\n\037PersistentSub"
  "scriptionNakEvents\022\027\n\017subscription_id\030\001 "
  "\002(\t\022\033\n\023processed_event_ids\030\002 \003(\014\022\017\n\007mess"
  "age\030\003 \001(\t\022E\n\006action\030\004 \002(\01625.es.message.P"
  "ersistentSubscriptionNakEvents.NakAction"
  "\"A\n\tNakAction\022\013\n\007Unknown\020\000\022\010\n\004Park\020\001\022\t\n\005"
  "Retry\020\002\022\010\n\004Skip\020\003\022\010\n\004Stop\020\004\"v\n\"Persisten"
  "tSubscriptionConfirmation\022\034\n\024last_commit"
  "_position\030\001 \002(\003\022\027\n\017subscription_id\030\002 \002(\t"
  "\022\031\n\021last_event_number\030\003 \001(\003\"p\n)Persisten"
  "tSubscriptionStreamEventAppeared\022/\n\005even"
  "t\030\001 \002(\0132 .es.message.ResolvedIndexedEven"
  "t\022\022\n\nretryCount\030\002 \001(\005\"F\n\021SubscribeToStre"
  "am\022\027\n\017event_stream_id\030\001 \002(\t\022\030\n\020resolve_l"
  "ink_tos\030\002 \002(\010\"S\n\030SubscriptionConfirmatio"
  "n\022\034\n\024last_commit_position\030\001 \002(\003\022\031\n\021last_"
  "event_number\030\002 \001(\003\"\?\n\023StreamEventAppeare"
  "d\022(\n\005event\030\001 \002(\0132\031.es.message.ResolvedEv"
  "ent\"\027\n\025UnsubscribeFromStream\"\354\001\n\023Subscri"
  "ptionDropped\022F\n\006reason\030\001 \001(\01626.es.messag"
  "e.SubscriptionDropped.SubscriptionDropRe"
  "ason\"\214\001\n\026SubscriptionDropReason\022\020\n\014Unsub"
  "scribed\020\000\022\020\n\014AccessDenied\020\001\022\014\n\010NotFound\020"
  "\002\022!\n\035PersistentSubscriptionDeleted\020\003\022\035\n\031"
  "SubscriberMaxCountReached\020\004\"\346\002\n\nNotHandl"
  "ed\0227\n\006reason\030\001 \002(\0162\'.es.message.NotHandl"
  "ed.NotHandledReason\022\027\n\017additional_info\030\002"
  " \001(\014\032\307\001\n\nMasterInfo\022\034\n\024external_tcp_addr"
  "ess\030\001 \002(\t\022\031\n\021external_tcp_port\030\002 \002(\005\022\035\n\025"
  "external_http_address\030\003 \002(\t\022\032\n\022external_"
  "http_port\030\004 \002(\005\022#\n\033external_secure_tcp_a"
  "ddress\030\005 \001(\t\022 \n\030external_secure_tcp_port"
  "\030\006 \001(\005\"<\n\020NotHandledReason\022\014\n\010NotReady\020\000"
  "\022\013\n\007TooBusy\020\001\022\r\n\tNotMaster\020\002\"\022\n\020Scavenge"
  "Database\"\264\001\n\030ScavengeDatabaseResponse\022C\n"
  "\006result\030\001 \002(\01623.es.message.ScavengeDatab"
  "aseResponse.ScavengeResult\022\022\n\nscavengeId"
  "\030\002 \001(\t\"\?\n\016ScavengeResult\022\013\n\007Started\020\000\022\016\n"
  "\nInProgress\020\001\022\020\n\014Unauthorized\020\002\":\n\016Ident"
  "ifyClient\022\017\n\007version\030\001 \002(\005\022\027\n\017connection"
  "_name\030\002 \001(\t\"\022\n\020ClientIdentified*\260\001\n\017Oper"
  "ationResult\022\013\n\007Success\020\000\022\022\n\016PrepareTimeo"
  "ut\020\001\022\021\n\rCommitTimeout\020\002\022\022\n\016ForwardTimeou"
  "t\020\003\022\030\n\024WrongExpectedVersion\020\004\022\021\n\rStreamD"
  "eleted\020\005\022\026\n\022InvalidTransaction\020\006\022\020\n\014Acce"
  "ssDenied\020\007"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2eproto_sccs[42] = {
  &scc_info_ClientIdentified_messages_2eproto.base,
  &scc_info_ConnectToPersistentSubscription_messages_2eproto.base,
  &scc_info_CreatePersistentSubscription_messages_2eproto.base,
  &scc_info_CreatePersistentSubscriptionCompleted_messages_2eproto.base,
  &scc_info_DeletePersistentSubscription_messages_2eproto.base,
  &scc_info_DeletePersistentSubscriptionCompleted_messages_2eproto.base,
  &scc_info_DeleteStream_messages_2eproto.base,
  &scc_info_DeleteStreamCompleted_messages_2eproto.base,
  &scc_info_EventRecord_messages_2eproto.base,
  &scc_info_IdentifyClient_messages_2eproto.base,
  &scc_info_NewEvent_messages_2eproto.base,
  &scc_info_NotHandled_messages_2eproto.base,
  &scc_info_NotHandled_MasterInfo_messages_2eproto.base,
  &scc_info_PersistentSubscriptionAckEvents_messages_2eproto.base,
  &scc_info_PersistentSubscriptionConfirmation_messages_2eproto.base,
  &scc_info_PersistentSubscriptionNakEvents_messages_2eproto.base,
  &scc_info_PersistentSubscriptionStreamEventAppeared_messages_2eproto.base,
  &scc_info_ReadAllEvents_messages_2eproto.base,
  &scc_info_ReadAllEventsCompleted_messages_2eproto.base,
  &scc_info_ReadEvent_messages_2eproto.base,
  &scc_info_ReadEventCompleted_messages_2eproto.base,
  &scc_info_ReadStreamEvents_messages_2eproto.base,
  &scc_info_ReadStreamEventsCompleted_messages_2eproto.base,
  &scc_info_ResolvedEvent_messages_2eproto.base,
  &scc_info_ResolvedIndexedEvent_messages_2eproto.base,
  &scc_info_ScavengeDatabase_messages_2eproto.base,
  &scc_info_ScavengeDatabaseResponse_messages_2eproto.base,
  &scc_info_StreamEventAppeared_messages_2eproto.base,
  &scc_info_SubscribeToStream_messages_2eproto.base,
  &scc_info_SubscriptionConfirmation_messages_2eproto.base,
  &scc_info_SubscriptionDropped_messages_2eproto.base,
  &scc_info_TransactionCommit_messages_2eproto.base,
  &scc_info_TransactionCommitCompleted_messages_2eproto.base,
  &scc_info_TransactionStart_messages_2eproto.base,
  &scc_info_TransactionStartCompleted_messages_2eproto.base,
  &scc_info_TransactionWrite_messages_2eproto.base,
  &scc_info_TransactionWriteCompleted_messages_2eproto.base,
  &scc_info_UnsubscribeFromStream_messages_2eproto.base,
  &scc_info_UpdatePersistentSubscription_messages_2eproto.base,
  &scc_info_UpdatePersistentSubscriptionCompleted_messages_2eproto.base,
  &scc_info_WriteEvents_messages_2eproto.base,
  &scc_info_WriteEventsCompleted_messages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
static bool descriptor_table_messages_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  &descriptor_table_messages_2eproto_initialized, descriptor_table_protodef_messages_2eproto, "messages.proto", 7170,
  &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_sccs, descriptor_table_messages_2eproto_deps, 42, 0,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, 42, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2eproto), true);
namespace es {
namespace message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadEventCompleted_ReadEventResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool ReadEventCompleted_ReadEventResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted::Success;
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted::NotFound;
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted::NoStream;
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted::StreamDeleted;
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted::Error;
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted::AccessDenied;
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted::ReadEventResult_MIN;
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted::ReadEventResult_MAX;
constexpr int ReadEventCompleted::ReadEventResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadStreamEventsCompleted_ReadStreamResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool ReadStreamEventsCompleted_ReadStreamResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted::Success;
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted::NoStream;
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted::StreamDeleted;
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted::NotModified;
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted::Error;
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted::AccessDenied;
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted::ReadStreamResult_MIN;
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted::ReadStreamResult_MAX;
constexpr int ReadStreamEventsCompleted::ReadStreamResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadAllEventsCompleted_ReadAllResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[2];
}
bool ReadAllEventsCompleted_ReadAllResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadAllEventsCompleted_ReadAllResult ReadAllEventsCompleted::Success;
constexpr ReadAllEventsCompleted_ReadAllResult ReadAllEventsCompleted::NotModified;
constexpr ReadAllEventsCompleted_ReadAllResult ReadAllEventsCompleted::Error;
constexpr ReadAllEventsCompleted_ReadAllResult ReadAllEventsCompleted::AccessDenied;
constexpr ReadAllEventsCompleted_ReadAllResult ReadAllEventsCompleted::ReadAllResult_MIN;
constexpr ReadAllEventsCompleted_ReadAllResult ReadAllEventsCompleted::ReadAllResult_MAX;
constexpr int ReadAllEventsCompleted::ReadAllResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[3];
}
bool UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionCompleted::Success;
constexpr UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionCompleted::DoesNotExist;
constexpr UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionCompleted::Fail;
constexpr UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionCompleted::AccessDenied;
constexpr UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionCompleted::UpdatePersistentSubscriptionResult_MIN;
constexpr UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionCompleted::UpdatePersistentSubscriptionResult_MAX;
constexpr int UpdatePersistentSubscriptionCompleted::UpdatePersistentSubscriptionResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[4];
}
bool CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionCompleted::Success;
constexpr CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionCompleted::AlreadyExists;
constexpr CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionCompleted::Fail;
constexpr CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionCompleted::AccessDenied;
constexpr CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionCompleted::CreatePersistentSubscriptionResult_MIN;
constexpr CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionCompleted::CreatePersistentSubscriptionResult_MAX;
constexpr int CreatePersistentSubscriptionCompleted::CreatePersistentSubscriptionResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[5];
}
bool DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionCompleted::Success;
constexpr DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionCompleted::DoesNotExist;
constexpr DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionCompleted::Fail;
constexpr DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionCompleted::AccessDenied;
constexpr DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionCompleted::DeletePersistentSubscriptionResult_MIN;
constexpr DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionCompleted::DeletePersistentSubscriptionResult_MAX;
constexpr int DeletePersistentSubscriptionCompleted::DeletePersistentSubscriptionResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PersistentSubscriptionNakEvents_NakAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[6];
}
bool PersistentSubscriptionNakEvents_NakAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents::Unknown;
constexpr PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents::Park;
constexpr PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents::Retry;
constexpr PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents::Skip;
constexpr PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents::Stop;
constexpr PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents::NakAction_MIN;
constexpr PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents::NakAction_MAX;
constexpr int PersistentSubscriptionNakEvents::NakAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionDropped_SubscriptionDropReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[7];
}
bool SubscriptionDropped_SubscriptionDropReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubscriptionDropped_SubscriptionDropReason SubscriptionDropped::Unsubscribed;
constexpr SubscriptionDropped_SubscriptionDropReason SubscriptionDropped::AccessDenied;
constexpr SubscriptionDropped_SubscriptionDropReason SubscriptionDropped::NotFound;
constexpr SubscriptionDropped_SubscriptionDropReason SubscriptionDropped::PersistentSubscriptionDeleted;
constexpr SubscriptionDropped_SubscriptionDropReason SubscriptionDropped::SubscriberMaxCountReached;
constexpr SubscriptionDropped_SubscriptionDropReason SubscriptionDropped::SubscriptionDropReason_MIN;
constexpr SubscriptionDropped_SubscriptionDropReason SubscriptionDropped::SubscriptionDropReason_MAX;
constexpr int SubscriptionDropped::SubscriptionDropReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotHandled_NotHandledReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[8];
}
bool NotHandled_NotHandledReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NotHandled_NotHandledReason NotHandled::NotReady;
constexpr NotHandled_NotHandledReason NotHandled::TooBusy;
constexpr NotHandled_NotHandledReason NotHandled::NotMaster;
constexpr NotHandled_NotHandledReason NotHandled::NotHandledReason_MIN;
constexpr NotHandled_NotHandledReason NotHandled::NotHandledReason_MAX;
constexpr int NotHandled::NotHandledReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScavengeDatabaseResponse_ScavengeResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[9];
}
bool ScavengeDatabaseResponse_ScavengeResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScavengeDatabaseResponse_ScavengeResult ScavengeDatabaseResponse::Started;
constexpr ScavengeDatabaseResponse_ScavengeResult ScavengeDatabaseResponse::InProgress;
constexpr ScavengeDatabaseResponse_ScavengeResult ScavengeDatabaseResponse::Unauthorized;
constexpr ScavengeDatabaseResponse_ScavengeResult ScavengeDatabaseResponse::ScavengeResult_MIN;
constexpr ScavengeDatabaseResponse_ScavengeResult ScavengeDatabaseResponse::ScavengeResult_MAX;
constexpr int ScavengeDatabaseResponse::ScavengeResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[10];
}
bool OperationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NewEvent::InitAsDefaultInstance() {
}
class NewEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<NewEvent>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_metadata_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NewEvent::NewEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.NewEvent)
}
NewEvent::NewEvent(const NewEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_id()) {
    event_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  event_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_type()) {
    event_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_type_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&data_content_type_, &from.data_content_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&metadata_content_type_) -
    reinterpret_cast<char*>(&data_content_type_)) + sizeof(metadata_content_type_));
  // @@protoc_insertion_point(copy_constructor:es.message.NewEvent)
}

void NewEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewEvent_messages_2eproto.base);
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_content_type_) -
      reinterpret_cast<char*>(&data_content_type_)) + sizeof(metadata_content_type_));
}

NewEvent::~NewEvent() {
  // @@protoc_insertion_point(destructor:es.message.NewEvent)
  SharedDtor();
}

void NewEvent::SharedDtor() {
  event_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewEvent& NewEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewEvent_messages_2eproto.base);
  return *internal_default_instance();
}


void NewEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.NewEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&data_content_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&metadata_content_type_) -
        reinterpret_cast<char*>(&data_content_type_)) + sizeof(metadata_content_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_event_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_type(), ptr, ctx, "es.message.NewEvent.event_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 data_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_data_content_type(&has_bits);
          data_content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 metadata_content_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_metadata_content_type(&has_bits);
          metadata_content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_metadata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.NewEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes event_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string event_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_type().data(), static_cast<int>(this->event_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.NewEvent.event_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 data_content_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_data_content_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_content_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 metadata_content_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_metadata_content_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &metadata_content_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.NewEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.NewEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.NewEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->event_id(), output);
  }

  // required string event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.NewEvent.event_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event_type(), output);
  }

  // required int32 data_content_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->data_content_type(), output);
  }

  // required int32 metadata_content_type = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->metadata_content_type(), output);
  }

  // required bytes data = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional bytes metadata = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.NewEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.NewEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->event_id(), target);
  }

  // required string event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.NewEvent.event_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->event_type(), target);
  }

  // required int32 data_content_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->data_content_type(), target);
  }

  // required int32 metadata_content_type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->metadata_content_type(), target);
  }

  // required bytes data = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional bytes metadata = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.NewEvent)
  return target;
}

size_t NewEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.NewEvent)
  size_t total_size = 0;

  if (has_event_id()) {
    // required bytes event_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->event_id());
  }

  if (has_event_type()) {
    // required string event_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_type());
  }

  if (has_data()) {
    // required bytes data = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_data_content_type()) {
    // required int32 data_content_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->data_content_type());
  }

  if (has_metadata_content_type()) {
    // required int32 metadata_content_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->metadata_content_type());
  }

  return total_size;
}
size_t NewEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.NewEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required bytes event_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->event_id());

    // required string event_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_type());

    // required bytes data = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());

    // required int32 data_content_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->data_content_type());

    // required int32 metadata_content_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->metadata_content_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes metadata = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.NewEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const NewEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.NewEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.NewEvent)
    MergeFrom(*source);
  }
}

void NewEvent::MergeFrom(const NewEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.NewEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      event_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000010u) {
      data_content_type_ = from.data_content_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      metadata_content_type_ = from.metadata_content_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.NewEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewEvent::CopyFrom(const NewEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.NewEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  return true;
}

void NewEvent::InternalSwap(NewEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_id_.Swap(&other->event_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_type_.Swap(&other->event_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_content_type_, other->data_content_type_);
  swap(metadata_content_type_, other->metadata_content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventRecord::InitAsDefaultInstance() {
}
class EventRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<EventRecord>()._has_bits_);
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_metadata_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_created(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_created_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

EventRecord::EventRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.EventRecord)
}
EventRecord::EventRecord(const EventRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_id()) {
    event_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  event_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_type()) {
    event_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_type_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&event_number_, &from.event_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&created_epoch_) -
    reinterpret_cast<char*>(&event_number_)) + sizeof(created_epoch_));
  // @@protoc_insertion_point(copy_constructor:es.message.EventRecord)
}

void EventRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventRecord_messages_2eproto.base);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_epoch_) -
      reinterpret_cast<char*>(&event_number_)) + sizeof(created_epoch_));
}

EventRecord::~EventRecord() {
  // @@protoc_insertion_point(destructor:es.message.EventRecord)
  SharedDtor();
}

void EventRecord::SharedDtor() {
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventRecord& EventRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventRecord_messages_2eproto.base);
  return *internal_default_instance();
}


void EventRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.EventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      event_stream_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      event_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&event_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&metadata_content_type_) -
        reinterpret_cast<char*>(&event_number_)) + sizeof(metadata_content_type_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&created_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&created_epoch_) -
        reinterpret_cast<char*>(&created_)) + sizeof(created_epoch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string event_stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.EventRecord.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 event_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_number(&has_bits);
          event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes event_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_event_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_type(), ptr, ctx, "es.message.EventRecord.event_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 data_content_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_data_content_type(&has_bits);
          data_content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 metadata_content_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_metadata_content_type(&has_bits);
          metadata_content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_metadata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 created = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_created(&has_bits);
          created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 created_epoch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_created_epoch(&has_bits);
          created_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.EventRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string event_stream_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.EventRecord.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 event_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes event_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string event_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_type().data(), static_cast<int>(this->event_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.EventRecord.event_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 data_content_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_data_content_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_content_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 metadata_content_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_metadata_content_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &metadata_content_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 created = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_created(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 created_epoch = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_created_epoch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.EventRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.EventRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.EventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.EventRecord.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_stream_id(), output);
  }

  // required int64 event_number = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->event_number(), output);
  }

  // required bytes event_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->event_id(), output);
  }

  // required string event_type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.EventRecord.event_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->event_type(), output);
  }

  // required int32 data_content_type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->data_content_type(), output);
  }

  // required int32 metadata_content_type = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->metadata_content_type(), output);
  }

  // required bytes data = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->metadata(), output);
  }

  // optional int64 created = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->created(), output);
  }

  // optional int64 created_epoch = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->created_epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.EventRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* EventRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.EventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.EventRecord.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->event_stream_id(), target);
  }

  // required int64 event_number = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->event_number(), target);
  }

  // required bytes event_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->event_id(), target);
  }

  // required string event_type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.EventRecord.event_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->event_type(), target);
  }

  // required int32 data_content_type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->data_content_type(), target);
  }

  // required int32 metadata_content_type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->metadata_content_type(), target);
  }

  // required bytes data = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->metadata(), target);
  }

  // optional int64 created = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->created(), target);
  }

  // optional int64 created_epoch = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->created_epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.EventRecord)
  return target;
}

size_t EventRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.EventRecord)
  size_t total_size = 0;

  if (has_event_stream_id()) {
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_event_id()) {
    // required bytes event_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->event_id());
  }

  if (has_event_type()) {
    // required string event_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_type());
  }

  if (has_data()) {
    // required bytes data = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_event_number()) {
    // required int64 event_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->event_number());
  }

  if (has_data_content_type()) {
    // required int32 data_content_type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->data_content_type());
  }

  if (has_metadata_content_type()) {
    // required int32 metadata_content_type = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->metadata_content_type());
  }

  return total_size;
}
size_t EventRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.EventRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ef) ^ 0x000000ef) == 0) {  // All required fields are present.
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required bytes event_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->event_id());

    // required string event_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_type());

    // required bytes data = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());

    // required int64 event_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->event_number());

    // required int32 data_content_type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->data_content_type());

    // required int32 metadata_content_type = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->metadata_content_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes metadata = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  if (cached_has_bits & 0x00000300u) {
    // optional int64 created = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->created());
    }

    // optional int64 created_epoch = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->created_epoch());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.EventRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const EventRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.EventRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.EventRecord)
    MergeFrom(*source);
  }
}

void EventRecord::MergeFrom(const EventRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.EventRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      event_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      event_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000020u) {
      event_number_ = from.event_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_content_type_ = from.data_content_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      metadata_content_type_ = from.metadata_content_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      created_ = from.created_;
    }
    if (cached_has_bits & 0x00000200u) {
      created_epoch_ = from.created_epoch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.EventRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventRecord::CopyFrom(const EventRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.EventRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ef) != 0x000000ef) return false;
  return true;
}

void EventRecord::InternalSwap(EventRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_id_.Swap(&other->event_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_type_.Swap(&other->event_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_number_, other->event_number_);
  swap(data_content_type_, other->data_content_type_);
  swap(metadata_content_type_, other->metadata_content_type_);
  swap(created_, other->created_);
  swap(created_epoch_, other->created_epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResolvedIndexedEvent::InitAsDefaultInstance() {
  ::es::message::_ResolvedIndexedEvent_default_instance_._instance.get_mutable()->event_ = const_cast< ::es::message::EventRecord*>(
      ::es::message::EventRecord::internal_default_instance());
  ::es::message::_ResolvedIndexedEvent_default_instance_._instance.get_mutable()->link_ = const_cast< ::es::message::EventRecord*>(
      ::es::message::EventRecord::internal_default_instance());
}
class ResolvedIndexedEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedIndexedEvent>()._has_bits_);
  static const ::es::message::EventRecord& event(const ResolvedIndexedEvent* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::es::message::EventRecord& link(const ResolvedIndexedEvent* msg);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::es::message::EventRecord&
ResolvedIndexedEvent::_Internal::event(const ResolvedIndexedEvent* msg) {
  return *msg->event_;
}
const ::es::message::EventRecord&
ResolvedIndexedEvent::_Internal::link(const ResolvedIndexedEvent* msg) {
  return *msg->link_;
}
ResolvedIndexedEvent::ResolvedIndexedEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ResolvedIndexedEvent)
}
ResolvedIndexedEvent::ResolvedIndexedEvent(const ResolvedIndexedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event()) {
    event_ = new ::es::message::EventRecord(*from.event_);
  } else {
    event_ = nullptr;
  }
  if (from.has_link()) {
    link_ = new ::es::message::EventRecord(*from.link_);
  } else {
    link_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:es.message.ResolvedIndexedEvent)
}

void ResolvedIndexedEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolvedIndexedEvent_messages_2eproto.base);
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_) -
      reinterpret_cast<char*>(&event_)) + sizeof(link_));
}

ResolvedIndexedEvent::~ResolvedIndexedEvent() {
  // @@protoc_insertion_point(destructor:es.message.ResolvedIndexedEvent)
  SharedDtor();
}

void ResolvedIndexedEvent::SharedDtor() {
  if (this != internal_default_instance()) delete event_;
  if (this != internal_default_instance()) delete link_;
}

void ResolvedIndexedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolvedIndexedEvent& ResolvedIndexedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolvedIndexedEvent_messages_2eproto.base);
  return *internal_default_instance();
}


void ResolvedIndexedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ResolvedIndexedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(event_ != nullptr);
      event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(link_ != nullptr);
      link_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResolvedIndexedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.EventRecord event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .es.message.EventRecord link = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResolvedIndexedEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ResolvedIndexedEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.EventRecord event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .es.message.EventRecord link = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ResolvedIndexedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ResolvedIndexedEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResolvedIndexedEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ResolvedIndexedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.EventRecord event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::event(this), output);
  }

  // optional .es.message.EventRecord link = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::link(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ResolvedIndexedEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolvedIndexedEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ResolvedIndexedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.EventRecord event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::event(this), target);
  }

  // optional .es.message.EventRecord link = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::link(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ResolvedIndexedEvent)
  return target;
}

size_t ResolvedIndexedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ResolvedIndexedEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .es.message.EventRecord event = 1;
  if (has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .es.message.EventRecord link = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolvedIndexedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ResolvedIndexedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolvedIndexedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolvedIndexedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ResolvedIndexedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ResolvedIndexedEvent)
    MergeFrom(*source);
  }
}

void ResolvedIndexedEvent::MergeFrom(const ResolvedIndexedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ResolvedIndexedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_event()->::es::message::EventRecord::MergeFrom(from.event());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_link()->::es::message::EventRecord::MergeFrom(from.link());
    }
  }
}

void ResolvedIndexedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ResolvedIndexedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolvedIndexedEvent::CopyFrom(const ResolvedIndexedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ResolvedIndexedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedIndexedEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_event()) {
    if (!this->event_->IsInitialized()) return false;
  }
  if (has_link()) {
    if (!this->link_->IsInitialized()) return false;
  }
  return true;
}

void ResolvedIndexedEvent::InternalSwap(ResolvedIndexedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
  swap(link_, other->link_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedIndexedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResolvedEvent::InitAsDefaultInstance() {
  ::es::message::_ResolvedEvent_default_instance_._instance.get_mutable()->event_ = const_cast< ::es::message::EventRecord*>(
      ::es::message::EventRecord::internal_default_instance());
  ::es::message::_ResolvedEvent_default_instance_._instance.get_mutable()->link_ = const_cast< ::es::message::EventRecord*>(
      ::es::message::EventRecord::internal_default_instance());
}
class ResolvedEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedEvent>()._has_bits_);
  static const ::es::message::EventRecord& event(const ResolvedEvent* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::es::message::EventRecord& link(const ResolvedEvent* msg);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prepare_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::es::message::EventRecord&
ResolvedEvent::_Internal::event(const ResolvedEvent* msg) {
  return *msg->event_;
}
const ::es::message::EventRecord&
ResolvedEvent::_Internal::link(const ResolvedEvent* msg) {
  return *msg->link_;
}
ResolvedEvent::ResolvedEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ResolvedEvent)
}
ResolvedEvent::ResolvedEvent(const ResolvedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event()) {
    event_ = new ::es::message::EventRecord(*from.event_);
  } else {
    event_ = nullptr;
  }
  if (from.has_link()) {
    link_ = new ::es::message::EventRecord(*from.link_);
  } else {
    link_ = nullptr;
  }
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_position_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  // @@protoc_insertion_point(copy_constructor:es.message.ResolvedEvent)
}

void ResolvedEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolvedEvent_messages_2eproto.base);
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&event_)) + sizeof(prepare_position_));
}

ResolvedEvent::~ResolvedEvent() {
  // @@protoc_insertion_point(destructor:es.message.ResolvedEvent)
  SharedDtor();
}

void ResolvedEvent::SharedDtor() {
  if (this != internal_default_instance()) delete event_;
  if (this != internal_default_instance()) delete link_;
}

void ResolvedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolvedEvent& ResolvedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolvedEvent_messages_2eproto.base);
  return *internal_default_instance();
}


void ResolvedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ResolvedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(event_ != nullptr);
      event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(link_ != nullptr);
      link_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&commit_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prepare_position_) -
        reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResolvedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.EventRecord event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .es.message.EventRecord link = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 commit_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_commit_position(&has_bits);
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 prepare_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prepare_position(&has_bits);
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResolvedEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ResolvedEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.EventRecord event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .es.message.EventRecord link = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 commit_position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 prepare_position = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_prepare_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prepare_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ResolvedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ResolvedEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResolvedEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ResolvedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.EventRecord event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::event(this), output);
  }

  // optional .es.message.EventRecord link = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::link(this), output);
  }

  // required int64 commit_position = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->commit_position(), output);
  }

  // required int64 prepare_position = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->prepare_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ResolvedEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolvedEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ResolvedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.EventRecord event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::event(this), target);
  }

  // optional .es.message.EventRecord link = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::link(this), target);
  }

  // required int64 commit_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->commit_position(), target);
  }

  // required int64 prepare_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->prepare_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ResolvedEvent)
  return target;
}

size_t ResolvedEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.ResolvedEvent)
  size_t total_size = 0;

  if (has_event()) {
    // required .es.message.EventRecord event = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }

  if (has_commit_position()) {
    // required int64 commit_position = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->commit_position());
  }

  if (has_prepare_position()) {
    // required int64 prepare_position = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->prepare_position());
  }

  return total_size;
}
size_t ResolvedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ResolvedEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .es.message.EventRecord event = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);

    // required int64 commit_position = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->commit_position());

    // required int64 prepare_position = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->prepare_position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .es.message.EventRecord link = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolvedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ResolvedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolvedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolvedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ResolvedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ResolvedEvent)
    MergeFrom(*source);
  }
}

void ResolvedEvent::MergeFrom(const ResolvedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ResolvedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_event()->::es::message::EventRecord::MergeFrom(from.event());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_link()->::es::message::EventRecord::MergeFrom(from.link());
    }
    if (cached_has_bits & 0x00000004u) {
      commit_position_ = from.commit_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      prepare_position_ = from.prepare_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResolvedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ResolvedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolvedEvent::CopyFrom(const ResolvedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ResolvedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  if (has_event()) {
    if (!this->event_->IsInitialized()) return false;
  }
  if (has_link()) {
    if (!this->link_->IsInitialized()) return false;
  }
  return true;
}

void ResolvedEvent::InternalSwap(ResolvedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
  swap(link_, other->link_);
  swap(commit_position_, other->commit_position_);
  swap(prepare_position_, other->prepare_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteEvents::InitAsDefaultInstance() {
}
class WriteEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<WriteEvents>()._has_bits_);
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expected_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_require_master(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WriteEvents::WriteEvents()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.WriteEvents)
}
WriteEvents::WriteEvents(const WriteEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  ::memcpy(&expected_version_, &from.expected_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_master_) -
    reinterpret_cast<char*>(&expected_version_)) + sizeof(require_master_));
  // @@protoc_insertion_point(copy_constructor:es.message.WriteEvents)
}

void WriteEvents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteEvents_messages_2eproto.base);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_master_) -
      reinterpret_cast<char*>(&expected_version_)) + sizeof(require_master_));
}

WriteEvents::~WriteEvents() {
  // @@protoc_insertion_point(destructor:es.message.WriteEvents)
  SharedDtor();
}

void WriteEvents::SharedDtor() {
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteEvents& WriteEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteEvents_messages_2eproto.base);
  return *internal_default_instance();
}


void WriteEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.WriteEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_stream_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&expected_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_master_) -
        reinterpret_cast<char*>(&expected_version_)) + sizeof(require_master_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WriteEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string event_stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.WriteEvents.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 expected_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_expected_version(&has_bits);
          expected_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .es.message.NewEvent events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // required bool require_master = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_require_master(&has_bits);
          require_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WriteEvents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.WriteEvents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string event_stream_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.WriteEvents.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 expected_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_expected_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expected_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .es.message.NewEvent events = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool require_master = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_require_master(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.WriteEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.WriteEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WriteEvents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.WriteEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.WriteEvents.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_stream_id(), output);
  }

  // required int64 expected_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->expected_version(), output);
  }

  // repeated .es.message.NewEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->events(static_cast<int>(i)),
      output);
  }

  // required bool require_master = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->require_master(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.WriteEvents)
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteEvents::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.WriteEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.WriteEvents.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->event_stream_id(), target);
  }

  // required int64 expected_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->expected_version(), target);
  }

  // repeated .es.message.NewEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->events(static_cast<int>(i)), target);
  }

  // required bool require_master = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->require_master(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.WriteEvents)
  return target;
}

size_t WriteEvents::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.WriteEvents)
  size_t total_size = 0;

  if (has_event_stream_id()) {
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_expected_version()) {
    // required int64 expected_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expected_version());
  }

  if (has_require_master()) {
    // required bool require_master = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t WriteEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.WriteEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required int64 expected_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expected_version());

    // required bool require_master = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .es.message.NewEvent events = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.WriteEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.WriteEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.WriteEvents)
    MergeFrom(*source);
  }
}

void WriteEvents::MergeFrom(const WriteEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.WriteEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      expected_version_ = from.expected_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      require_master_ = from.require_master_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WriteEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.WriteEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteEvents::CopyFrom(const WriteEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.WriteEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteEvents::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void WriteEvents::InternalSwap(WriteEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expected_version_, other->expected_version_);
  swap(require_master_, other->require_master_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteEventsCompleted::InitAsDefaultInstance() {
}
class WriteEventsCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<WriteEventsCompleted>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prepare_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_current_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

WriteEventsCompleted::WriteEventsCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.WriteEventsCompleted)
}
WriteEventsCompleted::WriteEventsCompleted(const WriteEventsCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&first_event_number_, &from.first_event_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&first_event_number_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:es.message.WriteEventsCompleted)
}

void WriteEventsCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteEventsCompleted_messages_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_event_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&first_event_number_)) + sizeof(result_));
}

WriteEventsCompleted::~WriteEventsCompleted() {
  // @@protoc_insertion_point(destructor:es.message.WriteEventsCompleted)
  SharedDtor();
}

void WriteEventsCompleted::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteEventsCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteEventsCompleted& WriteEventsCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteEventsCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void WriteEventsCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.WriteEventsCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&first_event_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&first_event_number_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WriteEventsCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.OperationResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::OperationResult_IsValid(val))) {
            set_result(static_cast<::es::message::OperationResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message(), ptr, ctx, "es.message.WriteEventsCompleted.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 first_event_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_first_event_number(&has_bits);
          first_event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 last_event_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_event_number(&has_bits);
          last_event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 prepare_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_prepare_position(&has_bits);
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 commit_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_commit_position(&has_bits);
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 current_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_current_version(&has_bits);
          current_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WriteEventsCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.WriteEventsCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.OperationResult result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::OperationResult_IsValid(value)) {
            set_result(static_cast< ::es::message::OperationResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.WriteEventsCompleted.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 first_event_number = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_first_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_event_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 prepare_position = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_prepare_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prepare_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 commit_position = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 current_version = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_current_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.WriteEventsCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.WriteEventsCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WriteEventsCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.WriteEventsCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.OperationResult result = 1;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.WriteEventsCompleted.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // required int64 first_event_number = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->first_event_number(), output);
  }

  // required int64 last_event_number = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->last_event_number(), output);
  }

  // optional int64 prepare_position = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->prepare_position(), output);
  }

  // optional int64 commit_position = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->commit_position(), output);
  }

  // optional int64 current_version = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->current_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.WriteEventsCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteEventsCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.WriteEventsCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.OperationResult result = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.WriteEventsCompleted.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // required int64 first_event_number = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->first_event_number(), target);
  }

  // required int64 last_event_number = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->last_event_number(), target);
  }

  // optional int64 prepare_position = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->prepare_position(), target);
  }

  // optional int64 commit_position = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->commit_position(), target);
  }

  // optional int64 current_version = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->current_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.WriteEventsCompleted)
  return target;
}

size_t WriteEventsCompleted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.WriteEventsCompleted)
  size_t total_size = 0;

  if (has_first_event_number()) {
    // required int64 first_event_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->first_event_number());
  }

  if (has_last_event_number()) {
    // required int64 last_event_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_event_number());
  }

  if (has_result()) {
    // required .es.message.OperationResult result = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t WriteEventsCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.WriteEventsCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000046) ^ 0x00000046) == 0) {  // All required fields are present.
    // required int64 first_event_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->first_event_number());

    // required int64 last_event_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_event_number());

    // required .es.message.OperationResult result = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (cached_has_bits & 0x00000038u) {
    // optional int64 prepare_position = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->prepare_position());
    }

    // optional int64 commit_position = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->commit_position());
    }

    // optional int64 current_version = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->current_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteEventsCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.WriteEventsCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteEventsCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteEventsCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.WriteEventsCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.WriteEventsCompleted)
    MergeFrom(*source);
  }
}

void WriteEventsCompleted::MergeFrom(const WriteEventsCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.WriteEventsCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      first_event_number_ = from.first_event_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_event_number_ = from.last_event_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      prepare_position_ = from.prepare_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      commit_position_ = from.commit_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      current_version_ = from.current_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WriteEventsCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.WriteEventsCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteEventsCompleted::CopyFrom(const WriteEventsCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.WriteEventsCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteEventsCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000046) != 0x00000046) return false;
  return true;
}

void WriteEventsCompleted::InternalSwap(WriteEventsCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(first_event_number_, other->first_event_number_);
  swap(last_event_number_, other->last_event_number_);
  swap(prepare_position_, other->prepare_position_);
  swap(commit_position_, other->commit_position_);
  swap(current_version_, other->current_version_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteEventsCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteStream::InitAsDefaultInstance() {
}
class DeleteStream::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteStream>()._has_bits_);
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expected_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_require_master(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hard_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DeleteStream::DeleteStream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.DeleteStream)
}
DeleteStream::DeleteStream(const DeleteStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  ::memcpy(&expected_version_, &from.expected_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&hard_delete_) -
    reinterpret_cast<char*>(&expected_version_)) + sizeof(hard_delete_));
  // @@protoc_insertion_point(copy_constructor:es.message.DeleteStream)
}

void DeleteStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteStream_messages_2eproto.base);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hard_delete_) -
      reinterpret_cast<char*>(&expected_version_)) + sizeof(hard_delete_));
}

DeleteStream::~DeleteStream() {
  // @@protoc_insertion_point(destructor:es.message.DeleteStream)
  SharedDtor();
}

void DeleteStream::SharedDtor() {
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStream& DeleteStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStream_messages_2eproto.base);
  return *internal_default_instance();
}


void DeleteStream::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.DeleteStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_stream_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&expected_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hard_delete_) -
        reinterpret_cast<char*>(&expected_version_)) + sizeof(hard_delete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string event_stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.DeleteStream.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 expected_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_expected_version(&has_bits);
          expected_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool require_master = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_require_master(&has_bits);
          require_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hard_delete = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hard_delete(&has_bits);
          hard_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteStream::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.DeleteStream)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string event_stream_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.DeleteStream.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 expected_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_expected_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expected_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool require_master = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_require_master(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hard_delete = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_hard_delete(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hard_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.DeleteStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.DeleteStream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteStream::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.DeleteStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeleteStream.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_stream_id(), output);
  }

  // required int64 expected_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->expected_version(), output);
  }

  // required bool require_master = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->require_master(), output);
  }

  // optional bool hard_delete = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->hard_delete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.DeleteStream)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteStream::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.DeleteStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeleteStream.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->event_stream_id(), target);
  }

  // required int64 expected_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->expected_version(), target);
  }

  // required bool require_master = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->require_master(), target);
  }

  // optional bool hard_delete = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->hard_delete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.DeleteStream)
  return target;
}

size_t DeleteStream::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.DeleteStream)
  size_t total_size = 0;

  if (has_event_stream_id()) {
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_expected_version()) {
    // required int64 expected_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expected_version());
  }

  if (has_require_master()) {
    // required bool require_master = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DeleteStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.DeleteStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required int64 expected_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expected_version());

    // required bool require_master = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool hard_delete = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.DeleteStream)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.DeleteStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.DeleteStream)
    MergeFrom(*source);
  }
}

void DeleteStream::MergeFrom(const DeleteStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.DeleteStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      expected_version_ = from.expected_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      require_master_ = from.require_master_;
    }
    if (cached_has_bits & 0x00000008u) {
      hard_delete_ = from.hard_delete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeleteStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.DeleteStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStream::CopyFrom(const DeleteStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.DeleteStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStream::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DeleteStream::InternalSwap(DeleteStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expected_version_, other->expected_version_);
  swap(require_master_, other->require_master_);
  swap(hard_delete_, other->hard_delete_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteStreamCompleted::InitAsDefaultInstance() {
}
class DeleteStreamCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteStreamCompleted>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prepare_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DeleteStreamCompleted::DeleteStreamCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.DeleteStreamCompleted)
}
DeleteStreamCompleted::DeleteStreamCompleted(const DeleteStreamCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&prepare_position_, &from.prepare_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&prepare_position_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:es.message.DeleteStreamCompleted)
}

void DeleteStreamCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteStreamCompleted_messages_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&prepare_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&prepare_position_)) + sizeof(result_));
}

DeleteStreamCompleted::~DeleteStreamCompleted() {
  // @@protoc_insertion_point(destructor:es.message.DeleteStreamCompleted)
  SharedDtor();
}

void DeleteStreamCompleted::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteStreamCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStreamCompleted& DeleteStreamCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStreamCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void DeleteStreamCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.DeleteStreamCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&prepare_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&prepare_position_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteStreamCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.OperationResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::OperationResult_IsValid(val))) {
            set_result(static_cast<::es::message::OperationResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message(), ptr, ctx, "es.message.DeleteStreamCompleted.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 prepare_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prepare_position(&has_bits);
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 commit_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_commit_position(&has_bits);
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteStreamCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.DeleteStreamCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.OperationResult result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::OperationResult_IsValid(value)) {
            set_result(static_cast< ::es::message::OperationResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.DeleteStreamCompleted.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 prepare_position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_prepare_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prepare_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 commit_position = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.DeleteStreamCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.DeleteStreamCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteStreamCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.DeleteStreamCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.OperationResult result = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeleteStreamCompleted.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional int64 prepare_position = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->prepare_position(), output);
  }

  // optional int64 commit_position = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->commit_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.DeleteStreamCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteStreamCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.DeleteStreamCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.OperationResult result = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeleteStreamCompleted.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional int64 prepare_position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->prepare_position(), target);
  }

  // optional int64 commit_position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->commit_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.DeleteStreamCompleted)
  return target;
}

size_t DeleteStreamCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.DeleteStreamCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .es.message.OperationResult result = 1;
  if (has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int64 prepare_position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->prepare_position());
    }

    // optional int64 commit_position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->commit_position());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStreamCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.DeleteStreamCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStreamCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteStreamCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.DeleteStreamCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.DeleteStreamCompleted)
    MergeFrom(*source);
  }
}

void DeleteStreamCompleted::MergeFrom(const DeleteStreamCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.DeleteStreamCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      prepare_position_ = from.prepare_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      commit_position_ = from.commit_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeleteStreamCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.DeleteStreamCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStreamCompleted::CopyFrom(const DeleteStreamCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.DeleteStreamCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStreamCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void DeleteStreamCompleted::InternalSwap(DeleteStreamCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prepare_position_, other->prepare_position_);
  swap(commit_position_, other->commit_position_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStreamCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionStart::InitAsDefaultInstance() {
}
class TransactionStart::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionStart>()._has_bits_);
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expected_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_require_master(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TransactionStart::TransactionStart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.TransactionStart)
}
TransactionStart::TransactionStart(const TransactionStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  ::memcpy(&expected_version_, &from.expected_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_master_) -
    reinterpret_cast<char*>(&expected_version_)) + sizeof(require_master_));
  // @@protoc_insertion_point(copy_constructor:es.message.TransactionStart)
}

void TransactionStart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionStart_messages_2eproto.base);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_master_) -
      reinterpret_cast<char*>(&expected_version_)) + sizeof(require_master_));
}

TransactionStart::~TransactionStart() {
  // @@protoc_insertion_point(destructor:es.message.TransactionStart)
  SharedDtor();
}

void TransactionStart::SharedDtor() {
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionStart& TransactionStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionStart_messages_2eproto.base);
  return *internal_default_instance();
}


void TransactionStart::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.TransactionStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_stream_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&expected_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_master_) -
        reinterpret_cast<char*>(&expected_version_)) + sizeof(require_master_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string event_stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.TransactionStart.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 expected_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_expected_version(&has_bits);
          expected_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool require_master = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_require_master(&has_bits);
          require_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionStart::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.TransactionStart)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string event_stream_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.TransactionStart.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 expected_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_expected_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expected_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool require_master = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_require_master(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.TransactionStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.TransactionStart)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionStart::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.TransactionStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.TransactionStart.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_stream_id(), output);
  }

  // required int64 expected_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->expected_version(), output);
  }

  // required bool require_master = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->require_master(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.TransactionStart)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionStart::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.TransactionStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.TransactionStart.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->event_stream_id(), target);
  }

  // required int64 expected_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->expected_version(), target);
  }

  // required bool require_master = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->require_master(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.TransactionStart)
  return target;
}

size_t TransactionStart::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.TransactionStart)
  size_t total_size = 0;

  if (has_event_stream_id()) {
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_expected_version()) {
    // required int64 expected_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expected_version());
  }

  if (has_require_master()) {
    // required bool require_master = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TransactionStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.TransactionStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required int64 expected_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expected_version());

    // required bool require_master = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.TransactionStart)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.TransactionStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.TransactionStart)
    MergeFrom(*source);
  }
}

void TransactionStart::MergeFrom(const TransactionStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.TransactionStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      expected_version_ = from.expected_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      require_master_ = from.require_master_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.TransactionStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStart::CopyFrom(const TransactionStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.TransactionStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TransactionStart::InternalSwap(TransactionStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expected_version_, other->expected_version_);
  swap(require_master_, other->require_master_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionStartCompleted::InitAsDefaultInstance() {
}
class TransactionStartCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionStartCompleted>()._has_bits_);
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransactionStartCompleted::TransactionStartCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.TransactionStartCompleted)
}
TransactionStartCompleted::TransactionStartCompleted(const TransactionStartCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:es.message.TransactionStartCompleted)
}

void TransactionStartCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionStartCompleted_messages_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(result_));
}

TransactionStartCompleted::~TransactionStartCompleted() {
  // @@protoc_insertion_point(destructor:es.message.TransactionStartCompleted)
  SharedDtor();
}

void TransactionStartCompleted::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionStartCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionStartCompleted& TransactionStartCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionStartCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void TransactionStartCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.TransactionStartCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionStartCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_transaction_id(&has_bits);
          transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .es.message.OperationResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::OperationResult_IsValid(val))) {
            set_result(static_cast<::es::message::OperationResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message(), ptr, ctx, "es.message.TransactionStartCompleted.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionStartCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.TransactionStartCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_transaction_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .es.message.OperationResult result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::OperationResult_IsValid(value)) {
            set_result(static_cast< ::es::message::OperationResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.TransactionStartCompleted.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.TransactionStartCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.TransactionStartCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionStartCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.TransactionStartCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required .es.message.OperationResult result = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.TransactionStartCompleted.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.TransactionStartCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionStartCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.TransactionStartCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required .es.message.OperationResult result = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.TransactionStartCompleted.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.TransactionStartCompleted)
  return target;
}

size_t TransactionStartCompleted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.TransactionStartCompleted)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_result()) {
    // required .es.message.OperationResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t TransactionStartCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.TransactionStartCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .es.message.OperationResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionStartCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.TransactionStartCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionStartCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionStartCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.TransactionStartCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.TransactionStartCompleted)
    MergeFrom(*source);
  }
}

void TransactionStartCompleted::MergeFrom(const TransactionStartCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.TransactionStartCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionStartCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.TransactionStartCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStartCompleted::CopyFrom(const TransactionStartCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.TransactionStartCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStartCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void TransactionStartCompleted::InternalSwap(TransactionStartCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transaction_id_, other->transaction_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStartCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionWrite::InitAsDefaultInstance() {
}
class TransactionWrite::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionWrite>()._has_bits_);
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_require_master(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TransactionWrite::TransactionWrite()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.TransactionWrite)
}
TransactionWrite::TransactionWrite(const TransactionWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_master_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(require_master_));
  // @@protoc_insertion_point(copy_constructor:es.message.TransactionWrite)
}

void TransactionWrite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionWrite_messages_2eproto.base);
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_master_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(require_master_));
}

TransactionWrite::~TransactionWrite() {
  // @@protoc_insertion_point(destructor:es.message.TransactionWrite)
  SharedDtor();
}

void TransactionWrite::SharedDtor() {
}

void TransactionWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionWrite& TransactionWrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionWrite_messages_2eproto.base);
  return *internal_default_instance();
}


void TransactionWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.TransactionWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_master_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(require_master_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_transaction_id(&has_bits);
          transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .es.message.NewEvent events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // required bool require_master = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_require_master(&has_bits);
          require_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionWrite::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.TransactionWrite)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_transaction_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .es.message.NewEvent events = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool require_master = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_require_master(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.TransactionWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.TransactionWrite)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionWrite::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.TransactionWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated .es.message.NewEvent events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->events(static_cast<int>(i)),
      output);
  }

  // required bool require_master = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->require_master(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.TransactionWrite)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionWrite::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.TransactionWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated .es.message.NewEvent events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->events(static_cast<int>(i)), target);
  }

  // required bool require_master = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->require_master(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.TransactionWrite)
  return target;
}

size_t TransactionWrite::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.TransactionWrite)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_require_master()) {
    // required bool require_master = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TransactionWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.TransactionWrite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required bool require_master = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .es.message.NewEvent events = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.TransactionWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.TransactionWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.TransactionWrite)
    MergeFrom(*source);
  }
}

void TransactionWrite::MergeFrom(const TransactionWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.TransactionWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      require_master_ = from.require_master_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.TransactionWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionWrite::CopyFrom(const TransactionWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.TransactionWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionWrite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void TransactionWrite::InternalSwap(TransactionWrite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  swap(transaction_id_, other->transaction_id_);
  swap(require_master_, other->require_master_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionWriteCompleted::InitAsDefaultInstance() {
}
class TransactionWriteCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionWriteCompleted>()._has_bits_);
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransactionWriteCompleted::TransactionWriteCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.TransactionWriteCompleted)
}
TransactionWriteCompleted::TransactionWriteCompleted(const TransactionWriteCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:es.message.TransactionWriteCompleted)
}

void TransactionWriteCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionWriteCompleted_messages_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(result_));
}

TransactionWriteCompleted::~TransactionWriteCompleted() {
  // @@protoc_insertion_point(destructor:es.message.TransactionWriteCompleted)
  SharedDtor();
}

void TransactionWriteCompleted::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionWriteCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionWriteCompleted& TransactionWriteCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionWriteCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void TransactionWriteCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.TransactionWriteCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionWriteCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_transaction_id(&has_bits);
          transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .es.message.OperationResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::OperationResult_IsValid(val))) {
            set_result(static_cast<::es::message::OperationResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message(), ptr, ctx, "es.message.TransactionWriteCompleted.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionWriteCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.TransactionWriteCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_transaction_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .es.message.OperationResult result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::OperationResult_IsValid(value)) {
            set_result(static_cast< ::es::message::OperationResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.TransactionWriteCompleted.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.TransactionWriteCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.TransactionWriteCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionWriteCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.TransactionWriteCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required .es.message.OperationResult result = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.TransactionWriteCompleted.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.TransactionWriteCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionWriteCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.TransactionWriteCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required .es.message.OperationResult result = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.TransactionWriteCompleted.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.TransactionWriteCompleted)
  return target;
}

size_t TransactionWriteCompleted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.TransactionWriteCompleted)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_result()) {
    // required .es.message.OperationResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t TransactionWriteCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.TransactionWriteCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .es.message.OperationResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionWriteCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.TransactionWriteCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionWriteCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionWriteCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.TransactionWriteCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.TransactionWriteCompleted)
    MergeFrom(*source);
  }
}

void TransactionWriteCompleted::MergeFrom(const TransactionWriteCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.TransactionWriteCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionWriteCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.TransactionWriteCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionWriteCompleted::CopyFrom(const TransactionWriteCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.TransactionWriteCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionWriteCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void TransactionWriteCompleted::InternalSwap(TransactionWriteCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transaction_id_, other->transaction_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionWriteCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionCommit::InitAsDefaultInstance() {
}
class TransactionCommit::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionCommit>()._has_bits_);
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_require_master(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TransactionCommit::TransactionCommit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.TransactionCommit)
}
TransactionCommit::TransactionCommit(const TransactionCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_master_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(require_master_));
  // @@protoc_insertion_point(copy_constructor:es.message.TransactionCommit)
}

void TransactionCommit::SharedCtor() {
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_master_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(require_master_));
}

TransactionCommit::~TransactionCommit() {
  // @@protoc_insertion_point(destructor:es.message.TransactionCommit)
  SharedDtor();
}

void TransactionCommit::SharedDtor() {
}

void TransactionCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionCommit& TransactionCommit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionCommit_messages_2eproto.base);
  return *internal_default_instance();
}


void TransactionCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.TransactionCommit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_master_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(require_master_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionCommit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_transaction_id(&has_bits);
          transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool require_master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_require_master(&has_bits);
          require_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionCommit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.TransactionCommit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_transaction_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool require_master = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_require_master(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.TransactionCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.TransactionCommit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionCommit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.TransactionCommit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required bool require_master = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->require_master(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.TransactionCommit)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionCommit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.TransactionCommit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required bool require_master = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->require_master(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.TransactionCommit)
  return target;
}

size_t TransactionCommit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.TransactionCommit)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_require_master()) {
    // required bool require_master = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TransactionCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.TransactionCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required bool require_master = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionCommit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.TransactionCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionCommit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionCommit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.TransactionCommit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.TransactionCommit)
    MergeFrom(*source);
  }
}

void TransactionCommit::MergeFrom(const TransactionCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.TransactionCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      require_master_ = from.require_master_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionCommit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.TransactionCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionCommit::CopyFrom(const TransactionCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.TransactionCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionCommit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TransactionCommit::InternalSwap(TransactionCommit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(transaction_id_, other->transaction_id_);
  swap(require_master_, other->require_master_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionCommit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionCommitCompleted::InitAsDefaultInstance() {
}
class TransactionCommitCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionCommitCompleted>()._has_bits_);
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prepare_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

TransactionCommitCompleted::TransactionCommitCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.TransactionCommitCompleted)
}
TransactionCommitCompleted::TransactionCommitCompleted(const TransactionCommitCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:es.message.TransactionCommitCompleted)
}

void TransactionCommitCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionCommitCompleted_messages_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(result_));
}

TransactionCommitCompleted::~TransactionCommitCompleted() {
  // @@protoc_insertion_point(destructor:es.message.TransactionCommitCompleted)
  SharedDtor();
}

void TransactionCommitCompleted::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionCommitCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionCommitCompleted& TransactionCommitCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionCommitCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void TransactionCommitCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.TransactionCommitCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionCommitCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_transaction_id(&has_bits);
          transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .es.message.OperationResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::OperationResult_IsValid(val))) {
            set_result(static_cast<::es::message::OperationResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message(), ptr, ctx, "es.message.TransactionCommitCompleted.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 first_event_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_first_event_number(&has_bits);
          first_event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 last_event_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_event_number(&has_bits);
          last_event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 prepare_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_prepare_position(&has_bits);
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 commit_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_commit_position(&has_bits);
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionCommitCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.TransactionCommitCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_transaction_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .es.message.OperationResult result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::OperationResult_IsValid(value)) {
            set_result(static_cast< ::es::message::OperationResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.TransactionCommitCompleted.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 first_event_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_first_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_event_number = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 prepare_position = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_prepare_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prepare_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 commit_position = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.TransactionCommitCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.TransactionCommitCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionCommitCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.TransactionCommitCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required .es.message.OperationResult result = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.TransactionCommitCompleted.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // required int64 first_event_number = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->first_event_number(), output);
  }

  // required int64 last_event_number = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->last_event_number(), output);
  }

  // optional int64 prepare_position = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->prepare_position(), output);
  }

  // optional int64 commit_position = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->commit_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.TransactionCommitCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionCommitCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.TransactionCommitCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required .es.message.OperationResult result = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.TransactionCommitCompleted.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // required int64 first_event_number = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->first_event_number(), target);
  }

  // required int64 last_event_number = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->last_event_number(), target);
  }

  // optional int64 prepare_position = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->prepare_position(), target);
  }

  // optional int64 commit_position = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->commit_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.TransactionCommitCompleted)
  return target;
}

size_t TransactionCommitCompleted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.TransactionCommitCompleted)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_first_event_number()) {
    // required int64 first_event_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->first_event_number());
  }

  if (has_last_event_number()) {
    // required int64 last_event_number = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_event_number());
  }

  if (has_result()) {
    // required .es.message.OperationResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t TransactionCommitCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.TransactionCommitCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000004e) ^ 0x0000004e) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int64 first_event_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->first_event_number());

    // required int64 last_event_number = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_event_number());

    // required .es.message.OperationResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (cached_has_bits & 0x00000030u) {
    // optional int64 prepare_position = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->prepare_position());
    }

    // optional int64 commit_position = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->commit_position());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionCommitCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.TransactionCommitCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionCommitCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionCommitCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.TransactionCommitCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.TransactionCommitCompleted)
    MergeFrom(*source);
  }
}

void TransactionCommitCompleted::MergeFrom(const TransactionCommitCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.TransactionCommitCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_event_number_ = from.first_event_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_event_number_ = from.last_event_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      prepare_position_ = from.prepare_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      commit_position_ = from.commit_position_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionCommitCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.TransactionCommitCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionCommitCompleted::CopyFrom(const TransactionCommitCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.TransactionCommitCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionCommitCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004e) != 0x0000004e) return false;
  return true;
}

void TransactionCommitCompleted::InternalSwap(TransactionCommitCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transaction_id_, other->transaction_id_);
  swap(first_event_number_, other->first_event_number_);
  swap(last_event_number_, other->last_event_number_);
  swap(prepare_position_, other->prepare_position_);
  swap(commit_position_, other->commit_position_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionCommitCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadEvent::InitAsDefaultInstance() {
}
class ReadEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadEvent>()._has_bits_);
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resolve_link_tos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_require_master(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ReadEvent::ReadEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ReadEvent)
}
ReadEvent::ReadEvent(const ReadEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  ::memcpy(&event_number_, &from.event_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_master_) -
    reinterpret_cast<char*>(&event_number_)) + sizeof(require_master_));
  // @@protoc_insertion_point(copy_constructor:es.message.ReadEvent)
}

void ReadEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadEvent_messages_2eproto.base);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_master_) -
      reinterpret_cast<char*>(&event_number_)) + sizeof(require_master_));
}

ReadEvent::~ReadEvent() {
  // @@protoc_insertion_point(destructor:es.message.ReadEvent)
  SharedDtor();
}

void ReadEvent::SharedDtor() {
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadEvent& ReadEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadEvent_messages_2eproto.base);
  return *internal_default_instance();
}


void ReadEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ReadEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_stream_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&event_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_master_) -
        reinterpret_cast<char*>(&event_number_)) + sizeof(require_master_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string event_stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.ReadEvent.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 event_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_number(&has_bits);
          event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool resolve_link_tos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_resolve_link_tos(&has_bits);
          resolve_link_tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool require_master = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_require_master(&has_bits);
          require_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ReadEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string event_stream_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.ReadEvent.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 event_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool resolve_link_tos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_resolve_link_tos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolve_link_tos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool require_master = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_require_master(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ReadEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ReadEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ReadEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadEvent.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_stream_id(), output);
  }

  // required int64 event_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->event_number(), output);
  }

  // required bool resolve_link_tos = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->resolve_link_tos(), output);
  }

  // required bool require_master = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->require_master(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ReadEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ReadEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadEvent.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->event_stream_id(), target);
  }

  // required int64 event_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->event_number(), target);
  }

  // required bool resolve_link_tos = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->resolve_link_tos(), target);
  }

  // required bool require_master = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->require_master(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ReadEvent)
  return target;
}

size_t ReadEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.ReadEvent)
  size_t total_size = 0;

  if (has_event_stream_id()) {
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_event_number()) {
    // required int64 event_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->event_number());
  }

  if (has_resolve_link_tos()) {
    // required bool resolve_link_tos = 3;
    total_size += 1 + 1;
  }

  if (has_require_master()) {
    // required bool require_master = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ReadEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ReadEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required int64 event_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->event_number());

    // required bool resolve_link_tos = 3;
    total_size += 1 + 1;

    // required bool require_master = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ReadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ReadEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ReadEvent)
    MergeFrom(*source);
  }
}

void ReadEvent::MergeFrom(const ReadEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ReadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      event_number_ = from.event_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      resolve_link_tos_ = from.resolve_link_tos_;
    }
    if (cached_has_bits & 0x00000008u) {
      require_master_ = from.require_master_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ReadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadEvent::CopyFrom(const ReadEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ReadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ReadEvent::InternalSwap(ReadEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_number_, other->event_number_);
  swap(resolve_link_tos_, other->resolve_link_tos_);
  swap(require_master_, other->require_master_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadEventCompleted::InitAsDefaultInstance() {
  ::es::message::_ReadEventCompleted_default_instance_._instance.get_mutable()->event_ = const_cast< ::es::message::ResolvedIndexedEvent*>(
      ::es::message::ResolvedIndexedEvent::internal_default_instance());
}
class ReadEventCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadEventCompleted>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::es::message::ResolvedIndexedEvent& event(const ReadEventCompleted* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::es::message::ResolvedIndexedEvent&
ReadEventCompleted::_Internal::event(const ReadEventCompleted* msg) {
  return *msg->event_;
}
ReadEventCompleted::ReadEventCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ReadEventCompleted)
}
ReadEventCompleted::ReadEventCompleted(const ReadEventCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_event()) {
    event_ = new ::es::message::ResolvedIndexedEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:es.message.ReadEventCompleted)
}

void ReadEventCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadEventCompleted_messages_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&event_)) + sizeof(result_));
}

ReadEventCompleted::~ReadEventCompleted() {
  // @@protoc_insertion_point(destructor:es.message.ReadEventCompleted)
  SharedDtor();
}

void ReadEventCompleted::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
}

void ReadEventCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadEventCompleted& ReadEventCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadEventCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void ReadEventCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ReadEventCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(event_ != nullptr);
      event_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadEventCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.ReadEventCompleted.ReadEventResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::ReadEventCompleted_ReadEventResult_IsValid(val))) {
            set_result(static_cast<::es::message::ReadEventCompleted_ReadEventResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .es.message.ResolvedIndexedEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_error(), ptr, ctx, "es.message.ReadEventCompleted.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadEventCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ReadEventCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.ReadEventCompleted.ReadEventResult result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::ReadEventCompleted_ReadEventResult_IsValid(value)) {
            set_result(static_cast< ::es::message::ReadEventCompleted_ReadEventResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .es.message.ResolvedIndexedEvent event = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.ReadEventCompleted.error");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ReadEventCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ReadEventCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadEventCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ReadEventCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.ReadEventCompleted.ReadEventResult result = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required .es.message.ResolvedIndexedEvent event = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::event(this), output);
  }

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadEventCompleted.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ReadEventCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadEventCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ReadEventCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.ReadEventCompleted.ReadEventResult result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required .es.message.ResolvedIndexedEvent event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::event(this), target);
  }

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadEventCompleted.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ReadEventCompleted)
  return target;
}

size_t ReadEventCompleted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.ReadEventCompleted)
  size_t total_size = 0;

  if (has_event()) {
    // required .es.message.ResolvedIndexedEvent event = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }

  if (has_result()) {
    // required .es.message.ReadEventCompleted.ReadEventResult result = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t ReadEventCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ReadEventCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .es.message.ResolvedIndexedEvent event = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);

    // required .es.message.ReadEventCompleted.ReadEventResult result = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadEventCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ReadEventCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadEventCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadEventCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ReadEventCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ReadEventCompleted)
    MergeFrom(*source);
  }
}

void ReadEventCompleted::MergeFrom(const ReadEventCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ReadEventCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_event()->::es::message::ResolvedIndexedEvent::MergeFrom(from.event());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadEventCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ReadEventCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadEventCompleted::CopyFrom(const ReadEventCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ReadEventCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadEventCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_event()) {
    if (!this->event_->IsInitialized()) return false;
  }
  return true;
}

void ReadEventCompleted::InternalSwap(ReadEventCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_, other->event_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadEventCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadStreamEvents::InitAsDefaultInstance() {
}
class ReadStreamEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadStreamEvents>()._has_bits_);
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_resolve_link_tos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_require_master(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ReadStreamEvents::ReadStreamEvents()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ReadStreamEvents)
}
ReadStreamEvents::ReadStreamEvents(const ReadStreamEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  ::memcpy(&from_event_number_, &from.from_event_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_master_) -
    reinterpret_cast<char*>(&from_event_number_)) + sizeof(require_master_));
  // @@protoc_insertion_point(copy_constructor:es.message.ReadStreamEvents)
}

void ReadStreamEvents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadStreamEvents_messages_2eproto.base);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_event_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_master_) -
      reinterpret_cast<char*>(&from_event_number_)) + sizeof(require_master_));
}

ReadStreamEvents::~ReadStreamEvents() {
  // @@protoc_insertion_point(destructor:es.message.ReadStreamEvents)
  SharedDtor();
}

void ReadStreamEvents::SharedDtor() {
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadStreamEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadStreamEvents& ReadStreamEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadStreamEvents_messages_2eproto.base);
  return *internal_default_instance();
}


void ReadStreamEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ReadStreamEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_stream_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&from_event_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_master_) -
        reinterpret_cast<char*>(&from_event_number_)) + sizeof(require_master_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadStreamEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string event_stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.ReadStreamEvents.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 from_event_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_from_event_number(&has_bits);
          from_event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 max_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_count(&has_bits);
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool resolve_link_tos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_resolve_link_tos(&has_bits);
          resolve_link_tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool require_master = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_require_master(&has_bits);
          require_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadStreamEvents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ReadStreamEvents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string event_stream_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.ReadStreamEvents.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 from_event_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_from_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool resolve_link_tos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_resolve_link_tos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolve_link_tos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool require_master = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_require_master(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ReadStreamEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ReadStreamEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadStreamEvents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ReadStreamEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadStreamEvents.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_stream_id(), output);
  }

  // required int64 from_event_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->from_event_number(), output);
  }

  // required int32 max_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_count(), output);
  }

  // required bool resolve_link_tos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->resolve_link_tos(), output);
  }

  // required bool require_master = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->require_master(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ReadStreamEvents)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadStreamEvents::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ReadStreamEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadStreamEvents.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->event_stream_id(), target);
  }

  // required int64 from_event_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->from_event_number(), target);
  }

  // required int32 max_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->max_count(), target);
  }

  // required bool resolve_link_tos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->resolve_link_tos(), target);
  }

  // required bool require_master = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->require_master(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ReadStreamEvents)
  return target;
}

size_t ReadStreamEvents::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.ReadStreamEvents)
  size_t total_size = 0;

  if (has_event_stream_id()) {
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_from_event_number()) {
    // required int64 from_event_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->from_event_number());
  }

  if (has_max_count()) {
    // required int32 max_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_count());
  }

  if (has_resolve_link_tos()) {
    // required bool resolve_link_tos = 4;
    total_size += 1 + 1;
  }

  if (has_require_master()) {
    // required bool require_master = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ReadStreamEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ReadStreamEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required int64 from_event_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->from_event_number());

    // required int32 max_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_count());

    // required bool resolve_link_tos = 4;
    total_size += 1 + 1;

    // required bool require_master = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadStreamEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ReadStreamEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadStreamEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadStreamEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ReadStreamEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ReadStreamEvents)
    MergeFrom(*source);
  }
}

void ReadStreamEvents::MergeFrom(const ReadStreamEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ReadStreamEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      from_event_number_ = from.from_event_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_count_ = from.max_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      resolve_link_tos_ = from.resolve_link_tos_;
    }
    if (cached_has_bits & 0x00000010u) {
      require_master_ = from.require_master_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadStreamEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ReadStreamEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadStreamEvents::CopyFrom(const ReadStreamEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ReadStreamEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadStreamEvents::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ReadStreamEvents::InternalSwap(ReadStreamEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_event_number_, other->from_event_number_);
  swap(max_count_, other->max_count_);
  swap(resolve_link_tos_, other->resolve_link_tos_);
  swap(require_master_, other->require_master_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadStreamEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadStreamEventsCompleted::InitAsDefaultInstance() {
}
class ReadStreamEventsCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadStreamEventsCompleted>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_next_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_end_of_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReadStreamEventsCompleted::ReadStreamEventsCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ReadStreamEventsCompleted)
}
ReadStreamEventsCompleted::ReadStreamEventsCompleted(const ReadStreamEventsCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&next_event_number_, &from.next_event_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_commit_position_) -
    reinterpret_cast<char*>(&next_event_number_)) + sizeof(last_commit_position_));
  // @@protoc_insertion_point(copy_constructor:es.message.ReadStreamEventsCompleted)
}

void ReadStreamEventsCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadStreamEventsCompleted_messages_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&next_event_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_commit_position_) -
      reinterpret_cast<char*>(&next_event_number_)) + sizeof(last_commit_position_));
}

ReadStreamEventsCompleted::~ReadStreamEventsCompleted() {
  // @@protoc_insertion_point(destructor:es.message.ReadStreamEventsCompleted)
  SharedDtor();
}

void ReadStreamEventsCompleted::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadStreamEventsCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadStreamEventsCompleted& ReadStreamEventsCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadStreamEventsCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void ReadStreamEventsCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ReadStreamEventsCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&next_event_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_commit_position_) -
        reinterpret_cast<char*>(&next_event_number_)) + sizeof(last_commit_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadStreamEventsCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .es.message.ResolvedIndexedEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // required .es.message.ReadStreamEventsCompleted.ReadStreamResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::ReadStreamEventsCompleted_ReadStreamResult_IsValid(val))) {
            set_result(static_cast<::es::message::ReadStreamEventsCompleted_ReadStreamResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int64 next_event_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_next_event_number(&has_bits);
          next_event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 last_event_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_event_number(&has_bits);
          last_event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_end_of_stream = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_end_of_stream(&has_bits);
          is_end_of_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 last_commit_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_last_commit_position(&has_bits);
          last_commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_error(), ptr, ctx, "es.message.ReadStreamEventsCompleted.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadStreamEventsCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ReadStreamEventsCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .es.message.ResolvedIndexedEvent events = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .es.message.ReadStreamEventsCompleted.ReadStreamResult result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::ReadStreamEventsCompleted_ReadStreamResult_IsValid(value)) {
            set_result(static_cast< ::es::message::ReadStreamEventsCompleted_ReadStreamResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 next_event_number = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_next_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_event_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_end_of_stream = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_end_of_stream(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_end_of_stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_commit_position = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_last_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.ReadStreamEventsCompleted.error");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ReadStreamEventsCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ReadStreamEventsCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadStreamEventsCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ReadStreamEventsCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .es.message.ResolvedIndexedEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->events(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required .es.message.ReadStreamEventsCompleted.ReadStreamResult result = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // required int64 next_event_number = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->next_event_number(), output);
  }

  // required int64 last_event_number = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->last_event_number(), output);
  }

  // required bool is_end_of_stream = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_end_of_stream(), output);
  }

  // required int64 last_commit_position = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->last_commit_position(), output);
  }

  // optional string error = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadStreamEventsCompleted.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ReadStreamEventsCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadStreamEventsCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ReadStreamEventsCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .es.message.ResolvedIndexedEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->events(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .es.message.ReadStreamEventsCompleted.ReadStreamResult result = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // required int64 next_event_number = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->next_event_number(), target);
  }

  // required int64 last_event_number = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->last_event_number(), target);
  }

  // required bool is_end_of_stream = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_end_of_stream(), target);
  }

  // required int64 last_commit_position = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->last_commit_position(), target);
  }

  // optional string error = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadStreamEventsCompleted.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ReadStreamEventsCompleted)
  return target;
}

size_t ReadStreamEventsCompleted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.ReadStreamEventsCompleted)
  size_t total_size = 0;

  if (has_next_event_number()) {
    // required int64 next_event_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_event_number());
  }

  if (has_result()) {
    // required .es.message.ReadStreamEventsCompleted.ReadStreamResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  if (has_is_end_of_stream()) {
    // required bool is_end_of_stream = 5;
    total_size += 1 + 1;
  }

  if (has_last_event_number()) {
    // required int64 last_event_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_event_number());
  }

  if (has_last_commit_position()) {
    // required int64 last_commit_position = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_commit_position());
  }

  return total_size;
}
size_t ReadStreamEventsCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ReadStreamEventsCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required int64 next_event_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_event_number());

    // required .es.message.ReadStreamEventsCompleted.ReadStreamResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());

    // required bool is_end_of_stream = 5;
    total_size += 1 + 1;

    // required int64 last_event_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_event_number());

    // required int64 last_commit_position = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_commit_position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .es.message.ResolvedIndexedEvent events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // optional string error = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadStreamEventsCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ReadStreamEventsCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadStreamEventsCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadStreamEventsCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ReadStreamEventsCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ReadStreamEventsCompleted)
    MergeFrom(*source);
  }
}

void ReadStreamEventsCompleted::MergeFrom(const ReadStreamEventsCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ReadStreamEventsCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      next_event_number_ = from.next_event_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_end_of_stream_ = from.is_end_of_stream_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_event_number_ = from.last_event_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_commit_position_ = from.last_commit_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadStreamEventsCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ReadStreamEventsCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadStreamEventsCompleted::CopyFrom(const ReadStreamEventsCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ReadStreamEventsCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadStreamEventsCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void ReadStreamEventsCompleted::InternalSwap(ReadStreamEventsCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(next_event_number_, other->next_event_number_);
  swap(result_, other->result_);
  swap(is_end_of_stream_, other->is_end_of_stream_);
  swap(last_event_number_, other->last_event_number_);
  swap(last_commit_position_, other->last_commit_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadStreamEventsCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadAllEvents::InitAsDefaultInstance() {
}
class ReadAllEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadAllEvents>()._has_bits_);
  static void set_has_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prepare_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_resolve_link_tos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_require_master(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ReadAllEvents::ReadAllEvents()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ReadAllEvents)
}
ReadAllEvents::ReadAllEvents(const ReadAllEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_master_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(require_master_));
  // @@protoc_insertion_point(copy_constructor:es.message.ReadAllEvents)
}

void ReadAllEvents::SharedCtor() {
  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_master_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(require_master_));
}

ReadAllEvents::~ReadAllEvents() {
  // @@protoc_insertion_point(destructor:es.message.ReadAllEvents)
  SharedDtor();
}

void ReadAllEvents::SharedDtor() {
}

void ReadAllEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadAllEvents& ReadAllEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadAllEvents_messages_2eproto.base);
  return *internal_default_instance();
}


void ReadAllEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ReadAllEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&commit_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_master_) -
        reinterpret_cast<char*>(&commit_position_)) + sizeof(require_master_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadAllEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_commit_position(&has_bits);
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 prepare_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prepare_position(&has_bits);
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 max_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_count(&has_bits);
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool resolve_link_tos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_resolve_link_tos(&has_bits);
          resolve_link_tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool require_master = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_require_master(&has_bits);
          require_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadAllEvents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ReadAllEvents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 commit_position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 prepare_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_prepare_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prepare_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool resolve_link_tos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_resolve_link_tos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolve_link_tos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool require_master = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_require_master(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ReadAllEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ReadAllEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadAllEvents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ReadAllEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 commit_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->commit_position(), output);
  }

  // required int64 prepare_position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->prepare_position(), output);
  }

  // required int32 max_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_count(), output);
  }

  // required bool resolve_link_tos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->resolve_link_tos(), output);
  }

  // required bool require_master = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->require_master(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ReadAllEvents)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadAllEvents::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ReadAllEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 commit_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->commit_position(), target);
  }

  // required int64 prepare_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->prepare_position(), target);
  }

  // required int32 max_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->max_count(), target);
  }

  // required bool resolve_link_tos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->resolve_link_tos(), target);
  }

  // required bool require_master = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->require_master(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ReadAllEvents)
  return target;
}

size_t ReadAllEvents::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.ReadAllEvents)
  size_t total_size = 0;

  if (has_commit_position()) {
    // required int64 commit_position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->commit_position());
  }

  if (has_prepare_position()) {
    // required int64 prepare_position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->prepare_position());
  }

  if (has_max_count()) {
    // required int32 max_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_count());
  }

  if (has_resolve_link_tos()) {
    // required bool resolve_link_tos = 4;
    total_size += 1 + 1;
  }

  if (has_require_master()) {
    // required bool require_master = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ReadAllEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ReadAllEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int64 commit_position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->commit_position());

    // required int64 prepare_position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->prepare_position());

    // required int32 max_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_count());

    // required bool resolve_link_tos = 4;
    total_size += 1 + 1;

    // required bool require_master = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadAllEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ReadAllEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadAllEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadAllEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ReadAllEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ReadAllEvents)
    MergeFrom(*source);
  }
}

void ReadAllEvents::MergeFrom(const ReadAllEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ReadAllEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      commit_position_ = from.commit_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      prepare_position_ = from.prepare_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_count_ = from.max_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      resolve_link_tos_ = from.resolve_link_tos_;
    }
    if (cached_has_bits & 0x00000010u) {
      require_master_ = from.require_master_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadAllEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ReadAllEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadAllEvents::CopyFrom(const ReadAllEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ReadAllEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadAllEvents::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ReadAllEvents::InternalSwap(ReadAllEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commit_position_, other->commit_position_);
  swap(prepare_position_, other->prepare_position_);
  swap(max_count_, other->max_count_);
  swap(resolve_link_tos_, other->resolve_link_tos_);
  swap(require_master_, other->require_master_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadAllEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadAllEventsCompleted::InitAsDefaultInstance() {
}
class ReadAllEventsCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadAllEventsCompleted>()._has_bits_);
  static void set_has_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prepare_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_next_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_next_prepare_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReadAllEventsCompleted::ReadAllEventsCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ReadAllEventsCompleted)
}
ReadAllEventsCompleted::ReadAllEventsCompleted(const ReadAllEventsCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:es.message.ReadAllEventsCompleted)
}

void ReadAllEventsCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadAllEventsCompleted_messages_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(result_));
}

ReadAllEventsCompleted::~ReadAllEventsCompleted() {
  // @@protoc_insertion_point(destructor:es.message.ReadAllEventsCompleted)
  SharedDtor();
}

void ReadAllEventsCompleted::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadAllEventsCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadAllEventsCompleted& ReadAllEventsCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadAllEventsCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void ReadAllEventsCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ReadAllEventsCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&commit_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&commit_position_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadAllEventsCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_commit_position(&has_bits);
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 prepare_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prepare_position(&has_bits);
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .es.message.ResolvedEvent events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // required int64 next_commit_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_next_commit_position(&has_bits);
          next_commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 next_prepare_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_next_prepare_position(&has_bits);
          next_prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .es.message.ReadAllEventsCompleted.ReadAllResult result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::ReadAllEventsCompleted_ReadAllResult_IsValid(val))) {
            set_result(static_cast<::es::message::ReadAllEventsCompleted_ReadAllResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_error(), ptr, ctx, "es.message.ReadAllEventsCompleted.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadAllEventsCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ReadAllEventsCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 commit_position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 prepare_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_prepare_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prepare_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .es.message.ResolvedEvent events = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 next_commit_position = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_next_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 next_prepare_position = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_next_prepare_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_prepare_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .es.message.ReadAllEventsCompleted.ReadAllResult result = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::ReadAllEventsCompleted_ReadAllResult_IsValid(value)) {
            set_result(static_cast< ::es::message::ReadAllEventsCompleted_ReadAllResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.ReadAllEventsCompleted.error");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ReadAllEventsCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ReadAllEventsCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadAllEventsCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ReadAllEventsCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 commit_position = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->commit_position(), output);
  }

  // required int64 prepare_position = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->prepare_position(), output);
  }

  // repeated .es.message.ResolvedEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->events(static_cast<int>(i)),
      output);
  }

  // required int64 next_commit_position = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->next_commit_position(), output);
  }

  // required int64 next_prepare_position = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->next_prepare_position(), output);
  }

  // optional .es.message.ReadAllEventsCompleted.ReadAllResult result = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->result(), output);
  }

  // optional string error = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadAllEventsCompleted.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ReadAllEventsCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadAllEventsCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ReadAllEventsCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 commit_position = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->commit_position(), target);
  }

  // required int64 prepare_position = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->prepare_position(), target);
  }

  // repeated .es.message.ResolvedEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->events(static_cast<int>(i)), target);
  }

  // required int64 next_commit_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->next_commit_position(), target);
  }

  // required int64 next_prepare_position = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->next_prepare_position(), target);
  }

  // optional .es.message.ReadAllEventsCompleted.ReadAllResult result = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->result(), target);
  }

  // optional string error = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ReadAllEventsCompleted.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ReadAllEventsCompleted)
  return target;
}

size_t ReadAllEventsCompleted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.ReadAllEventsCompleted)
  size_t total_size = 0;

  if (has_commit_position()) {
    // required int64 commit_position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->commit_position());
  }

  if (has_prepare_position()) {
    // required int64 prepare_position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->prepare_position());
  }

  if (has_next_commit_position()) {
    // required int64 next_commit_position = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_commit_position());
  }

  if (has_next_prepare_position()) {
    // required int64 next_prepare_position = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_prepare_position());
  }

  return total_size;
}
size_t ReadAllEventsCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ReadAllEventsCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required int64 commit_position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->commit_position());

    // required int64 prepare_position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->prepare_position());

    // required int64 next_commit_position = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_commit_position());

    // required int64 next_prepare_position = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_prepare_position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .es.message.ResolvedEvent events = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // optional string error = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  // optional .es.message.ReadAllEventsCompleted.ReadAllResult result = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadAllEventsCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ReadAllEventsCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadAllEventsCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadAllEventsCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ReadAllEventsCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ReadAllEventsCompleted)
    MergeFrom(*source);
  }
}

void ReadAllEventsCompleted::MergeFrom(const ReadAllEventsCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ReadAllEventsCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      commit_position_ = from.commit_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      prepare_position_ = from.prepare_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      next_commit_position_ = from.next_commit_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      next_prepare_position_ = from.next_prepare_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadAllEventsCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ReadAllEventsCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadAllEventsCompleted::CopyFrom(const ReadAllEventsCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ReadAllEventsCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadAllEventsCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void ReadAllEventsCompleted::InternalSwap(ReadAllEventsCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(commit_position_, other->commit_position_);
  swap(prepare_position_, other->prepare_position_);
  swap(next_commit_position_, other->next_commit_position_);
  swap(next_prepare_position_, other->next_prepare_position_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadAllEventsCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePersistentSubscription::InitAsDefaultInstance() {
}
class CreatePersistentSubscription::_Internal {
 public:
  using HasBits = decltype(std::declval<CreatePersistentSubscription>()._has_bits_);
  static void set_has_subscription_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resolve_link_tos(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_from(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message_timeout_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_record_statistics(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_live_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_read_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_retry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_prefer_round_robin(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_checkpoint_after_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_checkpoint_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_checkpoint_min_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_subscriber_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_named_consumer_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CreatePersistentSubscription::CreatePersistentSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.CreatePersistentSubscription)
}
CreatePersistentSubscription::CreatePersistentSubscription(const CreatePersistentSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_subscription_group_name()) {
    subscription_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_group_name_);
  }
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  named_consumer_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_named_consumer_strategy()) {
    named_consumer_strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.named_consumer_strategy_);
  }
  ::memcpy(&start_from_, &from.start_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscriber_max_count_) -
    reinterpret_cast<char*>(&start_from_)) + sizeof(subscriber_max_count_));
  // @@protoc_insertion_point(copy_constructor:es.message.CreatePersistentSubscription)
}

void CreatePersistentSubscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePersistentSubscription_messages_2eproto.base);
  subscription_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  named_consumer_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscriber_max_count_) -
      reinterpret_cast<char*>(&start_from_)) + sizeof(subscriber_max_count_));
}

CreatePersistentSubscription::~CreatePersistentSubscription() {
  // @@protoc_insertion_point(destructor:es.message.CreatePersistentSubscription)
  SharedDtor();
}

void CreatePersistentSubscription::SharedDtor() {
  subscription_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  named_consumer_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePersistentSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePersistentSubscription& CreatePersistentSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePersistentSubscription_messages_2eproto.base);
  return *internal_default_instance();
}


void CreatePersistentSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.CreatePersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      subscription_group_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      event_stream_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      named_consumer_strategy_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&start_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prefer_round_robin_) -
        reinterpret_cast<char*>(&start_from_)) + sizeof(prefer_round_robin_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&live_buffer_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subscriber_max_count_) -
        reinterpret_cast<char*>(&live_buffer_size_)) + sizeof(subscriber_max_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreatePersistentSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string subscription_group_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_subscription_group_name(), ptr, ctx, "es.message.CreatePersistentSubscription.subscription_group_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string event_stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.CreatePersistentSubscription.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool resolve_link_tos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_resolve_link_tos(&has_bits);
          resolve_link_tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 start_from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_from(&has_bits);
          start_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 message_timeout_milliseconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_message_timeout_milliseconds(&has_bits);
          message_timeout_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool record_statistics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_record_statistics(&has_bits);
          record_statistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 live_buffer_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_live_buffer_size(&has_bits);
          live_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 read_batch_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_read_batch_size(&has_bits);
          read_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 buffer_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_buffer_size(&has_bits);
          buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 max_retry_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_retry_count(&has_bits);
          max_retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool prefer_round_robin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_prefer_round_robin(&has_bits);
          prefer_round_robin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 checkpoint_after_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_checkpoint_after_time(&has_bits);
          checkpoint_after_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 checkpoint_max_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_checkpoint_max_count(&has_bits);
          checkpoint_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 checkpoint_min_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_checkpoint_min_count(&has_bits);
          checkpoint_min_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 subscriber_max_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_subscriber_max_count(&has_bits);
          subscriber_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string named_consumer_strategy = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_named_consumer_strategy(), ptr, ctx, "es.message.CreatePersistentSubscription.named_consumer_strategy");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreatePersistentSubscription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.CreatePersistentSubscription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subscription_group_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_group_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscription_group_name().data(), static_cast<int>(this->subscription_group_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.CreatePersistentSubscription.subscription_group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string event_stream_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.CreatePersistentSubscription.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool resolve_link_tos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_resolve_link_tos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolve_link_tos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 start_from = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_start_from(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 message_timeout_milliseconds = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_message_timeout_milliseconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_timeout_milliseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool record_statistics = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_record_statistics(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_statistics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 live_buffer_size = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_live_buffer_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &live_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 read_batch_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_read_batch_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 buffer_size = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_buffer_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_retry_count = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_max_retry_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_retry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool prefer_round_robin = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_prefer_round_robin(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_round_robin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 checkpoint_after_time = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_checkpoint_after_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_after_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 checkpoint_max_count = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_checkpoint_max_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 checkpoint_min_count = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_checkpoint_min_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_min_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 subscriber_max_count = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_subscriber_max_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscriber_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string named_consumer_strategy = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_named_consumer_strategy()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->named_consumer_strategy().data(), static_cast<int>(this->named_consumer_strategy().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.CreatePersistentSubscription.named_consumer_strategy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.CreatePersistentSubscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.CreatePersistentSubscription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreatePersistentSubscription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.CreatePersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_group_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_group_name().data(), static_cast<int>(this->subscription_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.CreatePersistentSubscription.subscription_group_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription_group_name(), output);
  }

  // required string event_stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.CreatePersistentSubscription.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event_stream_id(), output);
  }

  // required bool resolve_link_tos = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->resolve_link_tos(), output);
  }

  // required int64 start_from = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->start_from(), output);
  }

  // required int32 message_timeout_milliseconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->message_timeout_milliseconds(), output);
  }

  // required bool record_statistics = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->record_statistics(), output);
  }

  // required int32 live_buffer_size = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->live_buffer_size(), output);
  }

  // required int32 read_batch_size = 8;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->read_batch_size(), output);
  }

  // required int32 buffer_size = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->buffer_size(), output);
  }

  // required int32 max_retry_count = 10;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->max_retry_count(), output);
  }

  // required bool prefer_round_robin = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->prefer_round_robin(), output);
  }

  // required int32 checkpoint_after_time = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->checkpoint_after_time(), output);
  }

  // required int32 checkpoint_max_count = 13;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->checkpoint_max_count(), output);
  }

  // required int32 checkpoint_min_count = 14;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->checkpoint_min_count(), output);
  }

  // required int32 subscriber_max_count = 15;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->subscriber_max_count(), output);
  }

  // optional string named_consumer_strategy = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->named_consumer_strategy().data(), static_cast<int>(this->named_consumer_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.CreatePersistentSubscription.named_consumer_strategy");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->named_consumer_strategy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.CreatePersistentSubscription)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePersistentSubscription::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.CreatePersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_group_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_group_name().data(), static_cast<int>(this->subscription_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.CreatePersistentSubscription.subscription_group_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription_group_name(), target);
  }

  // required string event_stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.CreatePersistentSubscription.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->event_stream_id(), target);
  }

  // required bool resolve_link_tos = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->resolve_link_tos(), target);
  }

  // required int64 start_from = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->start_from(), target);
  }

  // required int32 message_timeout_milliseconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->message_timeout_milliseconds(), target);
  }

  // required bool record_statistics = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->record_statistics(), target);
  }

  // required int32 live_buffer_size = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->live_buffer_size(), target);
  }

  // required int32 read_batch_size = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->read_batch_size(), target);
  }

  // required int32 buffer_size = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->buffer_size(), target);
  }

  // required int32 max_retry_count = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->max_retry_count(), target);
  }

  // required bool prefer_round_robin = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->prefer_round_robin(), target);
  }

  // required int32 checkpoint_after_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->checkpoint_after_time(), target);
  }

  // required int32 checkpoint_max_count = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->checkpoint_max_count(), target);
  }

  // required int32 checkpoint_min_count = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->checkpoint_min_count(), target);
  }

  // required int32 subscriber_max_count = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->subscriber_max_count(), target);
  }

  // optional string named_consumer_strategy = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->named_consumer_strategy().data(), static_cast<int>(this->named_consumer_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.CreatePersistentSubscription.named_consumer_strategy");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->named_consumer_strategy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.CreatePersistentSubscription)
  return target;
}

size_t CreatePersistentSubscription::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.CreatePersistentSubscription)
  size_t total_size = 0;

  if (has_subscription_group_name()) {
    // required string subscription_group_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_group_name());
  }

  if (has_event_stream_id()) {
    // required string event_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_start_from()) {
    // required int64 start_from = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->start_from());
  }

  if (has_message_timeout_milliseconds()) {
    // required int32 message_timeout_milliseconds = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->message_timeout_milliseconds());
  }

  if (has_resolve_link_tos()) {
    // required bool resolve_link_tos = 3;
    total_size += 1 + 1;
  }

  if (has_record_statistics()) {
    // required bool record_statistics = 6;
    total_size += 1 + 1;
  }

  if (has_prefer_round_robin()) {
    // required bool prefer_round_robin = 11;
    total_size += 1 + 1;
  }

  if (has_live_buffer_size()) {
    // required int32 live_buffer_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->live_buffer_size());
  }

  if (has_read_batch_size()) {
    // required int32 read_batch_size = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->read_batch_size());
  }

  if (has_buffer_size()) {
    // required int32 buffer_size = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->buffer_size());
  }

  if (has_max_retry_count()) {
    // required int32 max_retry_count = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_retry_count());
  }

  if (has_checkpoint_after_time()) {
    // required int32 checkpoint_after_time = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_after_time());
  }

  if (has_checkpoint_max_count()) {
    // required int32 checkpoint_max_count = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_max_count());
  }

  if (has_checkpoint_min_count()) {
    // required int32 checkpoint_min_count = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_min_count());
  }

  if (has_subscriber_max_count()) {
    // required int32 subscriber_max_count = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->subscriber_max_count());
  }

  return total_size;
}
size_t CreatePersistentSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.CreatePersistentSubscription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000fffb) ^ 0x0000fffb) == 0) {  // All required fields are present.
    // required string subscription_group_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_group_name());

    // required string event_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required int64 start_from = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->start_from());

    // required int32 message_timeout_milliseconds = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->message_timeout_milliseconds());

    // required bool resolve_link_tos = 3;
    total_size += 1 + 1;

    // required bool record_statistics = 6;
    total_size += 1 + 1;

    // required bool prefer_round_robin = 11;
    total_size += 1 + 1;

    // required int32 live_buffer_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->live_buffer_size());

    // required int32 read_batch_size = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->read_batch_size());

    // required int32 buffer_size = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->buffer_size());

    // required int32 max_retry_count = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_retry_count());

    // required int32 checkpoint_after_time = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_after_time());

    // required int32 checkpoint_max_count = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_max_count());

    // required int32 checkpoint_min_count = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_min_count());

    // required int32 subscriber_max_count = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->subscriber_max_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string named_consumer_strategy = 16;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->named_consumer_strategy());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePersistentSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.CreatePersistentSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePersistentSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePersistentSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.CreatePersistentSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.CreatePersistentSubscription)
    MergeFrom(*source);
  }
}

void CreatePersistentSubscription::MergeFrom(const CreatePersistentSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.CreatePersistentSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      subscription_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_group_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      named_consumer_strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.named_consumer_strategy_);
    }
    if (cached_has_bits & 0x00000008u) {
      start_from_ = from.start_from_;
    }
    if (cached_has_bits & 0x00000010u) {
      message_timeout_milliseconds_ = from.message_timeout_milliseconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      resolve_link_tos_ = from.resolve_link_tos_;
    }
    if (cached_has_bits & 0x00000040u) {
      record_statistics_ = from.record_statistics_;
    }
    if (cached_has_bits & 0x00000080u) {
      prefer_round_robin_ = from.prefer_round_robin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      live_buffer_size_ = from.live_buffer_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      read_batch_size_ = from.read_batch_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      buffer_size_ = from.buffer_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_retry_count_ = from.max_retry_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      checkpoint_after_time_ = from.checkpoint_after_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      checkpoint_max_count_ = from.checkpoint_max_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      checkpoint_min_count_ = from.checkpoint_min_count_;
    }
    if (cached_has_bits & 0x00008000u) {
      subscriber_max_count_ = from.subscriber_max_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreatePersistentSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.CreatePersistentSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePersistentSubscription::CopyFrom(const CreatePersistentSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.CreatePersistentSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePersistentSubscription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000fffb) != 0x0000fffb) return false;
  return true;
}

void CreatePersistentSubscription::InternalSwap(CreatePersistentSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subscription_group_name_.Swap(&other->subscription_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  named_consumer_strategy_.Swap(&other->named_consumer_strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_from_, other->start_from_);
  swap(message_timeout_milliseconds_, other->message_timeout_milliseconds_);
  swap(resolve_link_tos_, other->resolve_link_tos_);
  swap(record_statistics_, other->record_statistics_);
  swap(prefer_round_robin_, other->prefer_round_robin_);
  swap(live_buffer_size_, other->live_buffer_size_);
  swap(read_batch_size_, other->read_batch_size_);
  swap(buffer_size_, other->buffer_size_);
  swap(max_retry_count_, other->max_retry_count_);
  swap(checkpoint_after_time_, other->checkpoint_after_time_);
  swap(checkpoint_max_count_, other->checkpoint_max_count_);
  swap(checkpoint_min_count_, other->checkpoint_min_count_);
  swap(subscriber_max_count_, other->subscriber_max_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePersistentSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePersistentSubscription::InitAsDefaultInstance() {
}
class DeletePersistentSubscription::_Internal {
 public:
  using HasBits = decltype(std::declval<DeletePersistentSubscription>()._has_bits_);
  static void set_has_subscription_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeletePersistentSubscription::DeletePersistentSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.DeletePersistentSubscription)
}
DeletePersistentSubscription::DeletePersistentSubscription(const DeletePersistentSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_subscription_group_name()) {
    subscription_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_group_name_);
  }
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  // @@protoc_insertion_point(copy_constructor:es.message.DeletePersistentSubscription)
}

void DeletePersistentSubscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePersistentSubscription_messages_2eproto.base);
  subscription_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeletePersistentSubscription::~DeletePersistentSubscription() {
  // @@protoc_insertion_point(destructor:es.message.DeletePersistentSubscription)
  SharedDtor();
}

void DeletePersistentSubscription::SharedDtor() {
  subscription_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeletePersistentSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePersistentSubscription& DeletePersistentSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePersistentSubscription_messages_2eproto.base);
  return *internal_default_instance();
}


void DeletePersistentSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.DeletePersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      subscription_group_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      event_stream_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeletePersistentSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string subscription_group_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_subscription_group_name(), ptr, ctx, "es.message.DeletePersistentSubscription.subscription_group_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string event_stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.DeletePersistentSubscription.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeletePersistentSubscription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.DeletePersistentSubscription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subscription_group_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_group_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscription_group_name().data(), static_cast<int>(this->subscription_group_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.DeletePersistentSubscription.subscription_group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string event_stream_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.DeletePersistentSubscription.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.DeletePersistentSubscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.DeletePersistentSubscription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeletePersistentSubscription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.DeletePersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_group_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_group_name().data(), static_cast<int>(this->subscription_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeletePersistentSubscription.subscription_group_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription_group_name(), output);
  }

  // required string event_stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeletePersistentSubscription.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event_stream_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.DeletePersistentSubscription)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePersistentSubscription::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.DeletePersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_group_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_group_name().data(), static_cast<int>(this->subscription_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeletePersistentSubscription.subscription_group_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription_group_name(), target);
  }

  // required string event_stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeletePersistentSubscription.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->event_stream_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.DeletePersistentSubscription)
  return target;
}

size_t DeletePersistentSubscription::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.DeletePersistentSubscription)
  size_t total_size = 0;

  if (has_subscription_group_name()) {
    // required string subscription_group_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_group_name());
  }

  if (has_event_stream_id()) {
    // required string event_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  return total_size;
}
size_t DeletePersistentSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.DeletePersistentSubscription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string subscription_group_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_group_name());

    // required string event_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePersistentSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.DeletePersistentSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePersistentSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePersistentSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.DeletePersistentSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.DeletePersistentSubscription)
    MergeFrom(*source);
  }
}

void DeletePersistentSubscription::MergeFrom(const DeletePersistentSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.DeletePersistentSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      subscription_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_group_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
  }
}

void DeletePersistentSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.DeletePersistentSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePersistentSubscription::CopyFrom(const DeletePersistentSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.DeletePersistentSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePersistentSubscription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DeletePersistentSubscription::InternalSwap(DeletePersistentSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subscription_group_name_.Swap(&other->subscription_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePersistentSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePersistentSubscription::InitAsDefaultInstance() {
}
class UpdatePersistentSubscription::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdatePersistentSubscription>()._has_bits_);
  static void set_has_subscription_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resolve_link_tos(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_from(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message_timeout_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_record_statistics(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_live_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_read_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_retry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_prefer_round_robin(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_checkpoint_after_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_checkpoint_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_checkpoint_min_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_subscriber_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_named_consumer_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UpdatePersistentSubscription::UpdatePersistentSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.UpdatePersistentSubscription)
}
UpdatePersistentSubscription::UpdatePersistentSubscription(const UpdatePersistentSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_subscription_group_name()) {
    subscription_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_group_name_);
  }
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  named_consumer_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_named_consumer_strategy()) {
    named_consumer_strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.named_consumer_strategy_);
  }
  ::memcpy(&start_from_, &from.start_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscriber_max_count_) -
    reinterpret_cast<char*>(&start_from_)) + sizeof(subscriber_max_count_));
  // @@protoc_insertion_point(copy_constructor:es.message.UpdatePersistentSubscription)
}

void UpdatePersistentSubscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePersistentSubscription_messages_2eproto.base);
  subscription_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  named_consumer_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscriber_max_count_) -
      reinterpret_cast<char*>(&start_from_)) + sizeof(subscriber_max_count_));
}

UpdatePersistentSubscription::~UpdatePersistentSubscription() {
  // @@protoc_insertion_point(destructor:es.message.UpdatePersistentSubscription)
  SharedDtor();
}

void UpdatePersistentSubscription::SharedDtor() {
  subscription_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  named_consumer_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdatePersistentSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePersistentSubscription& UpdatePersistentSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePersistentSubscription_messages_2eproto.base);
  return *internal_default_instance();
}


void UpdatePersistentSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.UpdatePersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      subscription_group_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      event_stream_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      named_consumer_strategy_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&start_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prefer_round_robin_) -
        reinterpret_cast<char*>(&start_from_)) + sizeof(prefer_round_robin_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&live_buffer_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subscriber_max_count_) -
        reinterpret_cast<char*>(&live_buffer_size_)) + sizeof(subscriber_max_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdatePersistentSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string subscription_group_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_subscription_group_name(), ptr, ctx, "es.message.UpdatePersistentSubscription.subscription_group_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string event_stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.UpdatePersistentSubscription.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool resolve_link_tos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_resolve_link_tos(&has_bits);
          resolve_link_tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 start_from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_from(&has_bits);
          start_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 message_timeout_milliseconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_message_timeout_milliseconds(&has_bits);
          message_timeout_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool record_statistics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_record_statistics(&has_bits);
          record_statistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 live_buffer_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_live_buffer_size(&has_bits);
          live_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 read_batch_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_read_batch_size(&has_bits);
          read_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 buffer_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_buffer_size(&has_bits);
          buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 max_retry_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_retry_count(&has_bits);
          max_retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool prefer_round_robin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_prefer_round_robin(&has_bits);
          prefer_round_robin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 checkpoint_after_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_checkpoint_after_time(&has_bits);
          checkpoint_after_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 checkpoint_max_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_checkpoint_max_count(&has_bits);
          checkpoint_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 checkpoint_min_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_checkpoint_min_count(&has_bits);
          checkpoint_min_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 subscriber_max_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_subscriber_max_count(&has_bits);
          subscriber_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string named_consumer_strategy = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_named_consumer_strategy(), ptr, ctx, "es.message.UpdatePersistentSubscription.named_consumer_strategy");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdatePersistentSubscription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.UpdatePersistentSubscription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subscription_group_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_group_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscription_group_name().data(), static_cast<int>(this->subscription_group_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.UpdatePersistentSubscription.subscription_group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string event_stream_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.UpdatePersistentSubscription.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool resolve_link_tos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_resolve_link_tos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolve_link_tos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 start_from = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_start_from(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 message_timeout_milliseconds = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_message_timeout_milliseconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_timeout_milliseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool record_statistics = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_record_statistics(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_statistics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 live_buffer_size = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_live_buffer_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &live_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 read_batch_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_read_batch_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 buffer_size = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_buffer_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_retry_count = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_max_retry_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_retry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool prefer_round_robin = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_prefer_round_robin(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_round_robin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 checkpoint_after_time = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_checkpoint_after_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_after_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 checkpoint_max_count = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_checkpoint_max_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 checkpoint_min_count = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_checkpoint_min_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_min_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 subscriber_max_count = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_subscriber_max_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscriber_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string named_consumer_strategy = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_named_consumer_strategy()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->named_consumer_strategy().data(), static_cast<int>(this->named_consumer_strategy().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.UpdatePersistentSubscription.named_consumer_strategy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.UpdatePersistentSubscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.UpdatePersistentSubscription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdatePersistentSubscription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.UpdatePersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_group_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_group_name().data(), static_cast<int>(this->subscription_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.UpdatePersistentSubscription.subscription_group_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription_group_name(), output);
  }

  // required string event_stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.UpdatePersistentSubscription.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event_stream_id(), output);
  }

  // required bool resolve_link_tos = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->resolve_link_tos(), output);
  }

  // required int64 start_from = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->start_from(), output);
  }

  // required int32 message_timeout_milliseconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->message_timeout_milliseconds(), output);
  }

  // required bool record_statistics = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->record_statistics(), output);
  }

  // required int32 live_buffer_size = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->live_buffer_size(), output);
  }

  // required int32 read_batch_size = 8;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->read_batch_size(), output);
  }

  // required int32 buffer_size = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->buffer_size(), output);
  }

  // required int32 max_retry_count = 10;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->max_retry_count(), output);
  }

  // required bool prefer_round_robin = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->prefer_round_robin(), output);
  }

  // required int32 checkpoint_after_time = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->checkpoint_after_time(), output);
  }

  // required int32 checkpoint_max_count = 13;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->checkpoint_max_count(), output);
  }

  // required int32 checkpoint_min_count = 14;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->checkpoint_min_count(), output);
  }

  // required int32 subscriber_max_count = 15;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->subscriber_max_count(), output);
  }

  // optional string named_consumer_strategy = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->named_consumer_strategy().data(), static_cast<int>(this->named_consumer_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.UpdatePersistentSubscription.named_consumer_strategy");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->named_consumer_strategy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.UpdatePersistentSubscription)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePersistentSubscription::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.UpdatePersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_group_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_group_name().data(), static_cast<int>(this->subscription_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.UpdatePersistentSubscription.subscription_group_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription_group_name(), target);
  }

  // required string event_stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.UpdatePersistentSubscription.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->event_stream_id(), target);
  }

  // required bool resolve_link_tos = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->resolve_link_tos(), target);
  }

  // required int64 start_from = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->start_from(), target);
  }

  // required int32 message_timeout_milliseconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->message_timeout_milliseconds(), target);
  }

  // required bool record_statistics = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->record_statistics(), target);
  }

  // required int32 live_buffer_size = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->live_buffer_size(), target);
  }

  // required int32 read_batch_size = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->read_batch_size(), target);
  }

  // required int32 buffer_size = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->buffer_size(), target);
  }

  // required int32 max_retry_count = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->max_retry_count(), target);
  }

  // required bool prefer_round_robin = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->prefer_round_robin(), target);
  }

  // required int32 checkpoint_after_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->checkpoint_after_time(), target);
  }

  // required int32 checkpoint_max_count = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->checkpoint_max_count(), target);
  }

  // required int32 checkpoint_min_count = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->checkpoint_min_count(), target);
  }

  // required int32 subscriber_max_count = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->subscriber_max_count(), target);
  }

  // optional string named_consumer_strategy = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->named_consumer_strategy().data(), static_cast<int>(this->named_consumer_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.UpdatePersistentSubscription.named_consumer_strategy");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->named_consumer_strategy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.UpdatePersistentSubscription)
  return target;
}

size_t UpdatePersistentSubscription::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.UpdatePersistentSubscription)
  size_t total_size = 0;

  if (has_subscription_group_name()) {
    // required string subscription_group_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_group_name());
  }

  if (has_event_stream_id()) {
    // required string event_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_start_from()) {
    // required int64 start_from = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->start_from());
  }

  if (has_message_timeout_milliseconds()) {
    // required int32 message_timeout_milliseconds = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->message_timeout_milliseconds());
  }

  if (has_resolve_link_tos()) {
    // required bool resolve_link_tos = 3;
    total_size += 1 + 1;
  }

  if (has_record_statistics()) {
    // required bool record_statistics = 6;
    total_size += 1 + 1;
  }

  if (has_prefer_round_robin()) {
    // required bool prefer_round_robin = 11;
    total_size += 1 + 1;
  }

  if (has_live_buffer_size()) {
    // required int32 live_buffer_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->live_buffer_size());
  }

  if (has_read_batch_size()) {
    // required int32 read_batch_size = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->read_batch_size());
  }

  if (has_buffer_size()) {
    // required int32 buffer_size = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->buffer_size());
  }

  if (has_max_retry_count()) {
    // required int32 max_retry_count = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_retry_count());
  }

  if (has_checkpoint_after_time()) {
    // required int32 checkpoint_after_time = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_after_time());
  }

  if (has_checkpoint_max_count()) {
    // required int32 checkpoint_max_count = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_max_count());
  }

  if (has_checkpoint_min_count()) {
    // required int32 checkpoint_min_count = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_min_count());
  }

  if (has_subscriber_max_count()) {
    // required int32 subscriber_max_count = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->subscriber_max_count());
  }

  return total_size;
}
size_t UpdatePersistentSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.UpdatePersistentSubscription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000fffb) ^ 0x0000fffb) == 0) {  // All required fields are present.
    // required string subscription_group_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_group_name());

    // required string event_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required int64 start_from = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->start_from());

    // required int32 message_timeout_milliseconds = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->message_timeout_milliseconds());

    // required bool resolve_link_tos = 3;
    total_size += 1 + 1;

    // required bool record_statistics = 6;
    total_size += 1 + 1;

    // required bool prefer_round_robin = 11;
    total_size += 1 + 1;

    // required int32 live_buffer_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->live_buffer_size());

    // required int32 read_batch_size = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->read_batch_size());

    // required int32 buffer_size = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->buffer_size());

    // required int32 max_retry_count = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_retry_count());

    // required int32 checkpoint_after_time = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_after_time());

    // required int32 checkpoint_max_count = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_max_count());

    // required int32 checkpoint_min_count = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->checkpoint_min_count());

    // required int32 subscriber_max_count = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->subscriber_max_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string named_consumer_strategy = 16;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->named_consumer_strategy());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePersistentSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.UpdatePersistentSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePersistentSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePersistentSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.UpdatePersistentSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.UpdatePersistentSubscription)
    MergeFrom(*source);
  }
}

void UpdatePersistentSubscription::MergeFrom(const UpdatePersistentSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.UpdatePersistentSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      subscription_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_group_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      named_consumer_strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.named_consumer_strategy_);
    }
    if (cached_has_bits & 0x00000008u) {
      start_from_ = from.start_from_;
    }
    if (cached_has_bits & 0x00000010u) {
      message_timeout_milliseconds_ = from.message_timeout_milliseconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      resolve_link_tos_ = from.resolve_link_tos_;
    }
    if (cached_has_bits & 0x00000040u) {
      record_statistics_ = from.record_statistics_;
    }
    if (cached_has_bits & 0x00000080u) {
      prefer_round_robin_ = from.prefer_round_robin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      live_buffer_size_ = from.live_buffer_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      read_batch_size_ = from.read_batch_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      buffer_size_ = from.buffer_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_retry_count_ = from.max_retry_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      checkpoint_after_time_ = from.checkpoint_after_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      checkpoint_max_count_ = from.checkpoint_max_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      checkpoint_min_count_ = from.checkpoint_min_count_;
    }
    if (cached_has_bits & 0x00008000u) {
      subscriber_max_count_ = from.subscriber_max_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdatePersistentSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.UpdatePersistentSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePersistentSubscription::CopyFrom(const UpdatePersistentSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.UpdatePersistentSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePersistentSubscription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000fffb) != 0x0000fffb) return false;
  return true;
}

void UpdatePersistentSubscription::InternalSwap(UpdatePersistentSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subscription_group_name_.Swap(&other->subscription_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  named_consumer_strategy_.Swap(&other->named_consumer_strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_from_, other->start_from_);
  swap(message_timeout_milliseconds_, other->message_timeout_milliseconds_);
  swap(resolve_link_tos_, other->resolve_link_tos_);
  swap(record_statistics_, other->record_statistics_);
  swap(prefer_round_robin_, other->prefer_round_robin_);
  swap(live_buffer_size_, other->live_buffer_size_);
  swap(read_batch_size_, other->read_batch_size_);
  swap(buffer_size_, other->buffer_size_);
  swap(max_retry_count_, other->max_retry_count_);
  swap(checkpoint_after_time_, other->checkpoint_after_time_);
  swap(checkpoint_max_count_, other->checkpoint_max_count_);
  swap(checkpoint_min_count_, other->checkpoint_min_count_);
  swap(subscriber_max_count_, other->subscriber_max_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePersistentSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePersistentSubscriptionCompleted::InitAsDefaultInstance() {
}
class UpdatePersistentSubscriptionCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdatePersistentSubscriptionCompleted>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UpdatePersistentSubscriptionCompleted::UpdatePersistentSubscriptionCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.UpdatePersistentSubscriptionCompleted)
}
UpdatePersistentSubscriptionCompleted::UpdatePersistentSubscriptionCompleted(const UpdatePersistentSubscriptionCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:es.message.UpdatePersistentSubscriptionCompleted)
}

void UpdatePersistentSubscriptionCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePersistentSubscriptionCompleted_messages_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

UpdatePersistentSubscriptionCompleted::~UpdatePersistentSubscriptionCompleted() {
  // @@protoc_insertion_point(destructor:es.message.UpdatePersistentSubscriptionCompleted)
  SharedDtor();
}

void UpdatePersistentSubscriptionCompleted::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdatePersistentSubscriptionCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePersistentSubscriptionCompleted& UpdatePersistentSubscriptionCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePersistentSubscriptionCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void UpdatePersistentSubscriptionCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.UpdatePersistentSubscriptionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdatePersistentSubscriptionCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_IsValid(val))) {
            set_result(static_cast<::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_reason(), ptr, ctx, "es.message.UpdatePersistentSubscriptionCompleted.reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdatePersistentSubscriptionCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.UpdatePersistentSubscriptionCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_IsValid(value)) {
            set_result(static_cast< ::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.UpdatePersistentSubscriptionCompleted.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.UpdatePersistentSubscriptionCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.UpdatePersistentSubscriptionCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdatePersistentSubscriptionCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.UpdatePersistentSubscriptionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.UpdatePersistentSubscriptionCompleted.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.UpdatePersistentSubscriptionCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePersistentSubscriptionCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.UpdatePersistentSubscriptionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.UpdatePersistentSubscriptionCompleted.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.UpdatePersistentSubscriptionCompleted)
  return target;
}

size_t UpdatePersistentSubscriptionCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.UpdatePersistentSubscriptionCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .es.message.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult result = 1;
  if (has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePersistentSubscriptionCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.UpdatePersistentSubscriptionCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePersistentSubscriptionCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePersistentSubscriptionCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.UpdatePersistentSubscriptionCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.UpdatePersistentSubscriptionCompleted)
    MergeFrom(*source);
  }
}

void UpdatePersistentSubscriptionCompleted::MergeFrom(const UpdatePersistentSubscriptionCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.UpdatePersistentSubscriptionCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdatePersistentSubscriptionCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.UpdatePersistentSubscriptionCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePersistentSubscriptionCompleted::CopyFrom(const UpdatePersistentSubscriptionCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.UpdatePersistentSubscriptionCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePersistentSubscriptionCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void UpdatePersistentSubscriptionCompleted::InternalSwap(UpdatePersistentSubscriptionCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePersistentSubscriptionCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePersistentSubscriptionCompleted::InitAsDefaultInstance() {
}
class CreatePersistentSubscriptionCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CreatePersistentSubscriptionCompleted>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CreatePersistentSubscriptionCompleted::CreatePersistentSubscriptionCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.CreatePersistentSubscriptionCompleted)
}
CreatePersistentSubscriptionCompleted::CreatePersistentSubscriptionCompleted(const CreatePersistentSubscriptionCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:es.message.CreatePersistentSubscriptionCompleted)
}

void CreatePersistentSubscriptionCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePersistentSubscriptionCompleted_messages_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CreatePersistentSubscriptionCompleted::~CreatePersistentSubscriptionCompleted() {
  // @@protoc_insertion_point(destructor:es.message.CreatePersistentSubscriptionCompleted)
  SharedDtor();
}

void CreatePersistentSubscriptionCompleted::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePersistentSubscriptionCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePersistentSubscriptionCompleted& CreatePersistentSubscriptionCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePersistentSubscriptionCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void CreatePersistentSubscriptionCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.CreatePersistentSubscriptionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreatePersistentSubscriptionCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_IsValid(val))) {
            set_result(static_cast<::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_reason(), ptr, ctx, "es.message.CreatePersistentSubscriptionCompleted.reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreatePersistentSubscriptionCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.CreatePersistentSubscriptionCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_IsValid(value)) {
            set_result(static_cast< ::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.CreatePersistentSubscriptionCompleted.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.CreatePersistentSubscriptionCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.CreatePersistentSubscriptionCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreatePersistentSubscriptionCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.CreatePersistentSubscriptionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.CreatePersistentSubscriptionCompleted.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.CreatePersistentSubscriptionCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePersistentSubscriptionCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.CreatePersistentSubscriptionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.CreatePersistentSubscriptionCompleted.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.CreatePersistentSubscriptionCompleted)
  return target;
}

size_t CreatePersistentSubscriptionCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.CreatePersistentSubscriptionCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .es.message.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult result = 1;
  if (has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePersistentSubscriptionCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.CreatePersistentSubscriptionCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePersistentSubscriptionCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePersistentSubscriptionCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.CreatePersistentSubscriptionCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.CreatePersistentSubscriptionCompleted)
    MergeFrom(*source);
  }
}

void CreatePersistentSubscriptionCompleted::MergeFrom(const CreatePersistentSubscriptionCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.CreatePersistentSubscriptionCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreatePersistentSubscriptionCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.CreatePersistentSubscriptionCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePersistentSubscriptionCompleted::CopyFrom(const CreatePersistentSubscriptionCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.CreatePersistentSubscriptionCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePersistentSubscriptionCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CreatePersistentSubscriptionCompleted::InternalSwap(CreatePersistentSubscriptionCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePersistentSubscriptionCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePersistentSubscriptionCompleted::InitAsDefaultInstance() {
}
class DeletePersistentSubscriptionCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<DeletePersistentSubscriptionCompleted>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeletePersistentSubscriptionCompleted::DeletePersistentSubscriptionCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.DeletePersistentSubscriptionCompleted)
}
DeletePersistentSubscriptionCompleted::DeletePersistentSubscriptionCompleted(const DeletePersistentSubscriptionCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:es.message.DeletePersistentSubscriptionCompleted)
}

void DeletePersistentSubscriptionCompleted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePersistentSubscriptionCompleted_messages_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

DeletePersistentSubscriptionCompleted::~DeletePersistentSubscriptionCompleted() {
  // @@protoc_insertion_point(destructor:es.message.DeletePersistentSubscriptionCompleted)
  SharedDtor();
}

void DeletePersistentSubscriptionCompleted::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeletePersistentSubscriptionCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePersistentSubscriptionCompleted& DeletePersistentSubscriptionCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePersistentSubscriptionCompleted_messages_2eproto.base);
  return *internal_default_instance();
}


void DeletePersistentSubscriptionCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.DeletePersistentSubscriptionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeletePersistentSubscriptionCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_IsValid(val))) {
            set_result(static_cast<::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_reason(), ptr, ctx, "es.message.DeletePersistentSubscriptionCompleted.reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeletePersistentSubscriptionCompleted::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.DeletePersistentSubscriptionCompleted)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_IsValid(value)) {
            set_result(static_cast< ::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.DeletePersistentSubscriptionCompleted.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.DeletePersistentSubscriptionCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.DeletePersistentSubscriptionCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeletePersistentSubscriptionCompleted::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.DeletePersistentSubscriptionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeletePersistentSubscriptionCompleted.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.DeletePersistentSubscriptionCompleted)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePersistentSubscriptionCompleted::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.DeletePersistentSubscriptionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.DeletePersistentSubscriptionCompleted.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.DeletePersistentSubscriptionCompleted)
  return target;
}

size_t DeletePersistentSubscriptionCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.DeletePersistentSubscriptionCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .es.message.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult result = 1;
  if (has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePersistentSubscriptionCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.DeletePersistentSubscriptionCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePersistentSubscriptionCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePersistentSubscriptionCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.DeletePersistentSubscriptionCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.DeletePersistentSubscriptionCompleted)
    MergeFrom(*source);
  }
}

void DeletePersistentSubscriptionCompleted::MergeFrom(const DeletePersistentSubscriptionCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.DeletePersistentSubscriptionCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeletePersistentSubscriptionCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.DeletePersistentSubscriptionCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePersistentSubscriptionCompleted::CopyFrom(const DeletePersistentSubscriptionCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.DeletePersistentSubscriptionCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePersistentSubscriptionCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void DeletePersistentSubscriptionCompleted::InternalSwap(DeletePersistentSubscriptionCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePersistentSubscriptionCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectToPersistentSubscription::InitAsDefaultInstance() {
}
class ConnectToPersistentSubscription::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectToPersistentSubscription>()._has_bits_);
  static void set_has_subscription_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allowed_in_flight_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ConnectToPersistentSubscription::ConnectToPersistentSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ConnectToPersistentSubscription)
}
ConnectToPersistentSubscription::ConnectToPersistentSubscription(const ConnectToPersistentSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_subscription_id()) {
    subscription_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_id_);
  }
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  allowed_in_flight_messages_ = from.allowed_in_flight_messages_;
  // @@protoc_insertion_point(copy_constructor:es.message.ConnectToPersistentSubscription)
}

void ConnectToPersistentSubscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectToPersistentSubscription_messages_2eproto.base);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  allowed_in_flight_messages_ = 0;
}

ConnectToPersistentSubscription::~ConnectToPersistentSubscription() {
  // @@protoc_insertion_point(destructor:es.message.ConnectToPersistentSubscription)
  SharedDtor();
}

void ConnectToPersistentSubscription::SharedDtor() {
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectToPersistentSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectToPersistentSubscription& ConnectToPersistentSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectToPersistentSubscription_messages_2eproto.base);
  return *internal_default_instance();
}


void ConnectToPersistentSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ConnectToPersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      subscription_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      event_stream_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  allowed_in_flight_messages_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectToPersistentSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string subscription_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_subscription_id(), ptr, ctx, "es.message.ConnectToPersistentSubscription.subscription_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string event_stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.ConnectToPersistentSubscription.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 allowed_in_flight_messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_allowed_in_flight_messages(&has_bits);
          allowed_in_flight_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectToPersistentSubscription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ConnectToPersistentSubscription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subscription_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.ConnectToPersistentSubscription.subscription_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string event_stream_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.ConnectToPersistentSubscription.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 allowed_in_flight_messages = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_allowed_in_flight_messages(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowed_in_flight_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ConnectToPersistentSubscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ConnectToPersistentSubscription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectToPersistentSubscription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ConnectToPersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ConnectToPersistentSubscription.subscription_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription_id(), output);
  }

  // required string event_stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ConnectToPersistentSubscription.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event_stream_id(), output);
  }

  // required int32 allowed_in_flight_messages = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->allowed_in_flight_messages(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ConnectToPersistentSubscription)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectToPersistentSubscription::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ConnectToPersistentSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ConnectToPersistentSubscription.subscription_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription_id(), target);
  }

  // required string event_stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ConnectToPersistentSubscription.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->event_stream_id(), target);
  }

  // required int32 allowed_in_flight_messages = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->allowed_in_flight_messages(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ConnectToPersistentSubscription)
  return target;
}

size_t ConnectToPersistentSubscription::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.ConnectToPersistentSubscription)
  size_t total_size = 0;

  if (has_subscription_id()) {
    // required string subscription_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_id());
  }

  if (has_event_stream_id()) {
    // required string event_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_allowed_in_flight_messages()) {
    // required int32 allowed_in_flight_messages = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->allowed_in_flight_messages());
  }

  return total_size;
}
size_t ConnectToPersistentSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ConnectToPersistentSubscription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string subscription_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_id());

    // required string event_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required int32 allowed_in_flight_messages = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->allowed_in_flight_messages());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectToPersistentSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ConnectToPersistentSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectToPersistentSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectToPersistentSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ConnectToPersistentSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ConnectToPersistentSubscription)
    MergeFrom(*source);
  }
}

void ConnectToPersistentSubscription::MergeFrom(const ConnectToPersistentSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ConnectToPersistentSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      subscription_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      allowed_in_flight_messages_ = from.allowed_in_flight_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectToPersistentSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ConnectToPersistentSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectToPersistentSubscription::CopyFrom(const ConnectToPersistentSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ConnectToPersistentSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectToPersistentSubscription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConnectToPersistentSubscription::InternalSwap(ConnectToPersistentSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(allowed_in_flight_messages_, other->allowed_in_flight_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectToPersistentSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PersistentSubscriptionAckEvents::InitAsDefaultInstance() {
}
class PersistentSubscriptionAckEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistentSubscriptionAckEvents>()._has_bits_);
  static void set_has_subscription_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PersistentSubscriptionAckEvents::PersistentSubscriptionAckEvents()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.PersistentSubscriptionAckEvents)
}
PersistentSubscriptionAckEvents::PersistentSubscriptionAckEvents(const PersistentSubscriptionAckEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      processed_event_ids_(from.processed_event_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_subscription_id()) {
    subscription_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_id_);
  }
  // @@protoc_insertion_point(copy_constructor:es.message.PersistentSubscriptionAckEvents)
}

void PersistentSubscriptionAckEvents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistentSubscriptionAckEvents_messages_2eproto.base);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PersistentSubscriptionAckEvents::~PersistentSubscriptionAckEvents() {
  // @@protoc_insertion_point(destructor:es.message.PersistentSubscriptionAckEvents)
  SharedDtor();
}

void PersistentSubscriptionAckEvents::SharedDtor() {
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PersistentSubscriptionAckEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistentSubscriptionAckEvents& PersistentSubscriptionAckEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistentSubscriptionAckEvents_messages_2eproto.base);
  return *internal_default_instance();
}


void PersistentSubscriptionAckEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.PersistentSubscriptionAckEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processed_event_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    subscription_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistentSubscriptionAckEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string subscription_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_subscription_id(), ptr, ctx, "es.message.PersistentSubscriptionAckEvents.subscription_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes processed_event_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_processed_event_ids(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistentSubscriptionAckEvents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.PersistentSubscriptionAckEvents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subscription_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.PersistentSubscriptionAckEvents.subscription_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes processed_event_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_processed_event_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.PersistentSubscriptionAckEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.PersistentSubscriptionAckEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistentSubscriptionAckEvents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.PersistentSubscriptionAckEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.PersistentSubscriptionAckEvents.subscription_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription_id(), output);
  }

  // repeated bytes processed_event_ids = 2;
  for (int i = 0, n = this->processed_event_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->processed_event_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.PersistentSubscriptionAckEvents)
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistentSubscriptionAckEvents::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.PersistentSubscriptionAckEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.PersistentSubscriptionAckEvents.subscription_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription_id(), target);
  }

  // repeated bytes processed_event_ids = 2;
  for (int i = 0, n = this->processed_event_ids_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->processed_event_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.PersistentSubscriptionAckEvents)
  return target;
}

size_t PersistentSubscriptionAckEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.PersistentSubscriptionAckEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string subscription_id = 1;
  if (has_subscription_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes processed_event_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->processed_event_ids_size());
  for (int i = 0, n = this->processed_event_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->processed_event_ids(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistentSubscriptionAckEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.PersistentSubscriptionAckEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistentSubscriptionAckEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistentSubscriptionAckEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.PersistentSubscriptionAckEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.PersistentSubscriptionAckEvents)
    MergeFrom(*source);
  }
}

void PersistentSubscriptionAckEvents::MergeFrom(const PersistentSubscriptionAckEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.PersistentSubscriptionAckEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processed_event_ids_.MergeFrom(from.processed_event_ids_);
  if (from.has_subscription_id()) {
    _has_bits_[0] |= 0x00000001u;
    subscription_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_id_);
  }
}

void PersistentSubscriptionAckEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.PersistentSubscriptionAckEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistentSubscriptionAckEvents::CopyFrom(const PersistentSubscriptionAckEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.PersistentSubscriptionAckEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentSubscriptionAckEvents::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PersistentSubscriptionAckEvents::InternalSwap(PersistentSubscriptionAckEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  processed_event_ids_.InternalSwap(CastToBase(&other->processed_event_ids_));
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistentSubscriptionAckEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PersistentSubscriptionNakEvents::InitAsDefaultInstance() {
}
class PersistentSubscriptionNakEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistentSubscriptionNakEvents>()._has_bits_);
  static void set_has_subscription_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PersistentSubscriptionNakEvents::PersistentSubscriptionNakEvents()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.PersistentSubscriptionNakEvents)
}
PersistentSubscriptionNakEvents::PersistentSubscriptionNakEvents(const PersistentSubscriptionNakEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      processed_event_ids_(from.processed_event_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_subscription_id()) {
    subscription_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_id_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:es.message.PersistentSubscriptionNakEvents)
}

void PersistentSubscriptionNakEvents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistentSubscriptionNakEvents_messages_2eproto.base);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
}

PersistentSubscriptionNakEvents::~PersistentSubscriptionNakEvents() {
  // @@protoc_insertion_point(destructor:es.message.PersistentSubscriptionNakEvents)
  SharedDtor();
}

void PersistentSubscriptionNakEvents::SharedDtor() {
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PersistentSubscriptionNakEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistentSubscriptionNakEvents& PersistentSubscriptionNakEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistentSubscriptionNakEvents_messages_2eproto.base);
  return *internal_default_instance();
}


void PersistentSubscriptionNakEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.PersistentSubscriptionNakEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processed_event_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      subscription_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistentSubscriptionNakEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string subscription_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_subscription_id(), ptr, ctx, "es.message.PersistentSubscriptionNakEvents.subscription_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes processed_event_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_processed_event_ids(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message(), ptr, ctx, "es.message.PersistentSubscriptionNakEvents.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .es.message.PersistentSubscriptionNakEvents.NakAction action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::PersistentSubscriptionNakEvents_NakAction_IsValid(val))) {
            set_action(static_cast<::es::message::PersistentSubscriptionNakEvents_NakAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistentSubscriptionNakEvents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.PersistentSubscriptionNakEvents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subscription_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.PersistentSubscriptionNakEvents.subscription_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes processed_event_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_processed_event_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.PersistentSubscriptionNakEvents.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .es.message.PersistentSubscriptionNakEvents.NakAction action = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::PersistentSubscriptionNakEvents_NakAction_IsValid(value)) {
            set_action(static_cast< ::es::message::PersistentSubscriptionNakEvents_NakAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.PersistentSubscriptionNakEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.PersistentSubscriptionNakEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistentSubscriptionNakEvents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.PersistentSubscriptionNakEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.PersistentSubscriptionNakEvents.subscription_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription_id(), output);
  }

  // repeated bytes processed_event_ids = 2;
  for (int i = 0, n = this->processed_event_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->processed_event_ids(i), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.PersistentSubscriptionNakEvents.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // required .es.message.PersistentSubscriptionNakEvents.NakAction action = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.PersistentSubscriptionNakEvents)
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistentSubscriptionNakEvents::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.PersistentSubscriptionNakEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string subscription_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.PersistentSubscriptionNakEvents.subscription_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription_id(), target);
  }

  // repeated bytes processed_event_ids = 2;
  for (int i = 0, n = this->processed_event_ids_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->processed_event_ids(i), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.PersistentSubscriptionNakEvents.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // required .es.message.PersistentSubscriptionNakEvents.NakAction action = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.PersistentSubscriptionNakEvents)
  return target;
}

size_t PersistentSubscriptionNakEvents::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.PersistentSubscriptionNakEvents)
  size_t total_size = 0;

  if (has_subscription_id()) {
    // required string subscription_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_id());
  }

  if (has_action()) {
    // required .es.message.PersistentSubscriptionNakEvents.NakAction action = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  return total_size;
}
size_t PersistentSubscriptionNakEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.PersistentSubscriptionNakEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string subscription_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_id());

    // required .es.message.PersistentSubscriptionNakEvents.NakAction action = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes processed_event_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->processed_event_ids_size());
  for (int i = 0, n = this->processed_event_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->processed_event_ids(i));
  }

  // optional string message = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistentSubscriptionNakEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.PersistentSubscriptionNakEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistentSubscriptionNakEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistentSubscriptionNakEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.PersistentSubscriptionNakEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.PersistentSubscriptionNakEvents)
    MergeFrom(*source);
  }
}

void PersistentSubscriptionNakEvents::MergeFrom(const PersistentSubscriptionNakEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.PersistentSubscriptionNakEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processed_event_ids_.MergeFrom(from.processed_event_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      subscription_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PersistentSubscriptionNakEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.PersistentSubscriptionNakEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistentSubscriptionNakEvents::CopyFrom(const PersistentSubscriptionNakEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.PersistentSubscriptionNakEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentSubscriptionNakEvents::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void PersistentSubscriptionNakEvents::InternalSwap(PersistentSubscriptionNakEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  processed_event_ids_.InternalSwap(CastToBase(&other->processed_event_ids_));
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistentSubscriptionNakEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PersistentSubscriptionConfirmation::InitAsDefaultInstance() {
}
class PersistentSubscriptionConfirmation::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistentSubscriptionConfirmation>()._has_bits_);
  static void set_has_last_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subscription_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PersistentSubscriptionConfirmation::PersistentSubscriptionConfirmation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.PersistentSubscriptionConfirmation)
}
PersistentSubscriptionConfirmation::PersistentSubscriptionConfirmation(const PersistentSubscriptionConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_subscription_id()) {
    subscription_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_id_);
  }
  ::memcpy(&last_commit_position_, &from.last_commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_event_number_) -
    reinterpret_cast<char*>(&last_commit_position_)) + sizeof(last_event_number_));
  // @@protoc_insertion_point(copy_constructor:es.message.PersistentSubscriptionConfirmation)
}

void PersistentSubscriptionConfirmation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistentSubscriptionConfirmation_messages_2eproto.base);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_event_number_) -
      reinterpret_cast<char*>(&last_commit_position_)) + sizeof(last_event_number_));
}

PersistentSubscriptionConfirmation::~PersistentSubscriptionConfirmation() {
  // @@protoc_insertion_point(destructor:es.message.PersistentSubscriptionConfirmation)
  SharedDtor();
}

void PersistentSubscriptionConfirmation::SharedDtor() {
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PersistentSubscriptionConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistentSubscriptionConfirmation& PersistentSubscriptionConfirmation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistentSubscriptionConfirmation_messages_2eproto.base);
  return *internal_default_instance();
}


void PersistentSubscriptionConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.PersistentSubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    subscription_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&last_commit_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_event_number_) -
        reinterpret_cast<char*>(&last_commit_position_)) + sizeof(last_event_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistentSubscriptionConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 last_commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_commit_position(&has_bits);
          last_commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string subscription_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_subscription_id(), ptr, ctx, "es.message.PersistentSubscriptionConfirmation.subscription_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_event_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_event_number(&has_bits);
          last_event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistentSubscriptionConfirmation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.PersistentSubscriptionConfirmation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_commit_position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string subscription_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.PersistentSubscriptionConfirmation.subscription_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_event_number = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_last_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.PersistentSubscriptionConfirmation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.PersistentSubscriptionConfirmation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistentSubscriptionConfirmation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.PersistentSubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_commit_position = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->last_commit_position(), output);
  }

  // required string subscription_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.PersistentSubscriptionConfirmation.subscription_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subscription_id(), output);
  }

  // optional int64 last_event_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->last_event_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.PersistentSubscriptionConfirmation)
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistentSubscriptionConfirmation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.PersistentSubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_commit_position = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->last_commit_position(), target);
  }

  // required string subscription_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), static_cast<int>(this->subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.PersistentSubscriptionConfirmation.subscription_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->subscription_id(), target);
  }

  // optional int64 last_event_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->last_event_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.PersistentSubscriptionConfirmation)
  return target;
}

size_t PersistentSubscriptionConfirmation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.PersistentSubscriptionConfirmation)
  size_t total_size = 0;

  if (has_subscription_id()) {
    // required string subscription_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_id());
  }

  if (has_last_commit_position()) {
    // required int64 last_commit_position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_commit_position());
  }

  return total_size;
}
size_t PersistentSubscriptionConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.PersistentSubscriptionConfirmation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string subscription_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->subscription_id());

    // required int64 last_commit_position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_commit_position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 last_event_number = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_event_number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistentSubscriptionConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.PersistentSubscriptionConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistentSubscriptionConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistentSubscriptionConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.PersistentSubscriptionConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.PersistentSubscriptionConfirmation)
    MergeFrom(*source);
  }
}

void PersistentSubscriptionConfirmation::MergeFrom(const PersistentSubscriptionConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.PersistentSubscriptionConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      subscription_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscription_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_commit_position_ = from.last_commit_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_event_number_ = from.last_event_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PersistentSubscriptionConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.PersistentSubscriptionConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistentSubscriptionConfirmation::CopyFrom(const PersistentSubscriptionConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.PersistentSubscriptionConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentSubscriptionConfirmation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PersistentSubscriptionConfirmation::InternalSwap(PersistentSubscriptionConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_commit_position_, other->last_commit_position_);
  swap(last_event_number_, other->last_event_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistentSubscriptionConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PersistentSubscriptionStreamEventAppeared::InitAsDefaultInstance() {
  ::es::message::_PersistentSubscriptionStreamEventAppeared_default_instance_._instance.get_mutable()->event_ = const_cast< ::es::message::ResolvedIndexedEvent*>(
      ::es::message::ResolvedIndexedEvent::internal_default_instance());
}
class PersistentSubscriptionStreamEventAppeared::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistentSubscriptionStreamEventAppeared>()._has_bits_);
  static const ::es::message::ResolvedIndexedEvent& event(const PersistentSubscriptionStreamEventAppeared* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_retrycount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::es::message::ResolvedIndexedEvent&
PersistentSubscriptionStreamEventAppeared::_Internal::event(const PersistentSubscriptionStreamEventAppeared* msg) {
  return *msg->event_;
}
PersistentSubscriptionStreamEventAppeared::PersistentSubscriptionStreamEventAppeared()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.PersistentSubscriptionStreamEventAppeared)
}
PersistentSubscriptionStreamEventAppeared::PersistentSubscriptionStreamEventAppeared(const PersistentSubscriptionStreamEventAppeared& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event()) {
    event_ = new ::es::message::ResolvedIndexedEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  retrycount_ = from.retrycount_;
  // @@protoc_insertion_point(copy_constructor:es.message.PersistentSubscriptionStreamEventAppeared)
}

void PersistentSubscriptionStreamEventAppeared::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistentSubscriptionStreamEventAppeared_messages_2eproto.base);
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retrycount_) -
      reinterpret_cast<char*>(&event_)) + sizeof(retrycount_));
}

PersistentSubscriptionStreamEventAppeared::~PersistentSubscriptionStreamEventAppeared() {
  // @@protoc_insertion_point(destructor:es.message.PersistentSubscriptionStreamEventAppeared)
  SharedDtor();
}

void PersistentSubscriptionStreamEventAppeared::SharedDtor() {
  if (this != internal_default_instance()) delete event_;
}

void PersistentSubscriptionStreamEventAppeared::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistentSubscriptionStreamEventAppeared& PersistentSubscriptionStreamEventAppeared::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistentSubscriptionStreamEventAppeared_messages_2eproto.base);
  return *internal_default_instance();
}


void PersistentSubscriptionStreamEventAppeared::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.PersistentSubscriptionStreamEventAppeared)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(event_ != nullptr);
    event_->Clear();
  }
  retrycount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistentSubscriptionStreamEventAppeared::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.ResolvedIndexedEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 retryCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_retrycount(&has_bits);
          retrycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistentSubscriptionStreamEventAppeared::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.PersistentSubscriptionStreamEventAppeared)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.ResolvedIndexedEvent event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 retryCount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_retrycount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &retrycount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.PersistentSubscriptionStreamEventAppeared)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.PersistentSubscriptionStreamEventAppeared)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistentSubscriptionStreamEventAppeared::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.PersistentSubscriptionStreamEventAppeared)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.ResolvedIndexedEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::event(this), output);
  }

  // optional int32 retryCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->retrycount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.PersistentSubscriptionStreamEventAppeared)
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistentSubscriptionStreamEventAppeared::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.PersistentSubscriptionStreamEventAppeared)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.ResolvedIndexedEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::event(this), target);
  }

  // optional int32 retryCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->retrycount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.PersistentSubscriptionStreamEventAppeared)
  return target;
}

size_t PersistentSubscriptionStreamEventAppeared::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.PersistentSubscriptionStreamEventAppeared)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .es.message.ResolvedIndexedEvent event = 1;
  if (has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 retryCount = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->retrycount());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistentSubscriptionStreamEventAppeared::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.PersistentSubscriptionStreamEventAppeared)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistentSubscriptionStreamEventAppeared* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistentSubscriptionStreamEventAppeared>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.PersistentSubscriptionStreamEventAppeared)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.PersistentSubscriptionStreamEventAppeared)
    MergeFrom(*source);
  }
}

void PersistentSubscriptionStreamEventAppeared::MergeFrom(const PersistentSubscriptionStreamEventAppeared& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.PersistentSubscriptionStreamEventAppeared)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_event()->::es::message::ResolvedIndexedEvent::MergeFrom(from.event());
    }
    if (cached_has_bits & 0x00000002u) {
      retrycount_ = from.retrycount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PersistentSubscriptionStreamEventAppeared::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.PersistentSubscriptionStreamEventAppeared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistentSubscriptionStreamEventAppeared::CopyFrom(const PersistentSubscriptionStreamEventAppeared& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.PersistentSubscriptionStreamEventAppeared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentSubscriptionStreamEventAppeared::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_event()) {
    if (!this->event_->IsInitialized()) return false;
  }
  return true;
}

void PersistentSubscriptionStreamEventAppeared::InternalSwap(PersistentSubscriptionStreamEventAppeared* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
  swap(retrycount_, other->retrycount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistentSubscriptionStreamEventAppeared::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeToStream::InitAsDefaultInstance() {
}
class SubscribeToStream::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeToStream>()._has_bits_);
  static void set_has_event_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resolve_link_tos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SubscribeToStream::SubscribeToStream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.SubscribeToStream)
}
SubscribeToStream::SubscribeToStream(const SubscribeToStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_stream_id()) {
    event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
  }
  resolve_link_tos_ = from.resolve_link_tos_;
  // @@protoc_insertion_point(copy_constructor:es.message.SubscribeToStream)
}

void SubscribeToStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeToStream_messages_2eproto.base);
  event_stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resolve_link_tos_ = false;
}

SubscribeToStream::~SubscribeToStream() {
  // @@protoc_insertion_point(destructor:es.message.SubscribeToStream)
  SharedDtor();
}

void SubscribeToStream::SharedDtor() {
  event_stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeToStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeToStream& SubscribeToStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeToStream_messages_2eproto.base);
  return *internal_default_instance();
}


void SubscribeToStream::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.SubscribeToStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_stream_id_.ClearNonDefaultToEmptyNoArena();
  }
  resolve_link_tos_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeToStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string event_stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_event_stream_id(), ptr, ctx, "es.message.SubscribeToStream.event_stream_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool resolve_link_tos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_resolve_link_tos(&has_bits);
          resolve_link_tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeToStream::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.SubscribeToStream)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string event_stream_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_stream_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.SubscribeToStream.event_stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool resolve_link_tos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_resolve_link_tos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolve_link_tos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.SubscribeToStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.SubscribeToStream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeToStream::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.SubscribeToStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.SubscribeToStream.event_stream_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_stream_id(), output);
  }

  // required bool resolve_link_tos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->resolve_link_tos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.SubscribeToStream)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeToStream::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.SubscribeToStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string event_stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_stream_id().data(), static_cast<int>(this->event_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.SubscribeToStream.event_stream_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->event_stream_id(), target);
  }

  // required bool resolve_link_tos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->resolve_link_tos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.SubscribeToStream)
  return target;
}

size_t SubscribeToStream::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.SubscribeToStream)
  size_t total_size = 0;

  if (has_event_stream_id()) {
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());
  }

  if (has_resolve_link_tos()) {
    // required bool resolve_link_tos = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SubscribeToStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.SubscribeToStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string event_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_stream_id());

    // required bool resolve_link_tos = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeToStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.SubscribeToStream)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeToStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeToStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.SubscribeToStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.SubscribeToStream)
    MergeFrom(*source);
  }
}

void SubscribeToStream::MergeFrom(const SubscribeToStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.SubscribeToStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_stream_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_stream_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      resolve_link_tos_ = from.resolve_link_tos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeToStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.SubscribeToStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeToStream::CopyFrom(const SubscribeToStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.SubscribeToStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeToStream::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SubscribeToStream::InternalSwap(SubscribeToStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_stream_id_.Swap(&other->event_stream_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resolve_link_tos_, other->resolve_link_tos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeToStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionConfirmation::InitAsDefaultInstance() {
}
class SubscriptionConfirmation::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionConfirmation>()._has_bits_);
  static void set_has_last_commit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_event_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SubscriptionConfirmation::SubscriptionConfirmation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.SubscriptionConfirmation)
}
SubscriptionConfirmation::SubscriptionConfirmation(const SubscriptionConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_commit_position_, &from.last_commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_event_number_) -
    reinterpret_cast<char*>(&last_commit_position_)) + sizeof(last_event_number_));
  // @@protoc_insertion_point(copy_constructor:es.message.SubscriptionConfirmation)
}

void SubscriptionConfirmation::SharedCtor() {
  ::memset(&last_commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_event_number_) -
      reinterpret_cast<char*>(&last_commit_position_)) + sizeof(last_event_number_));
}

SubscriptionConfirmation::~SubscriptionConfirmation() {
  // @@protoc_insertion_point(destructor:es.message.SubscriptionConfirmation)
  SharedDtor();
}

void SubscriptionConfirmation::SharedDtor() {
}

void SubscriptionConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionConfirmation& SubscriptionConfirmation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionConfirmation_messages_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.SubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&last_commit_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_event_number_) -
        reinterpret_cast<char*>(&last_commit_position_)) + sizeof(last_event_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscriptionConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 last_commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_commit_position(&has_bits);
          last_commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_event_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_event_number(&has_bits);
          last_event_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscriptionConfirmation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.SubscriptionConfirmation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_commit_position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_commit_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_commit_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_event_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_last_event_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_event_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.SubscriptionConfirmation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.SubscriptionConfirmation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscriptionConfirmation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.SubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_commit_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->last_commit_position(), output);
  }

  // optional int64 last_event_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->last_event_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.SubscriptionConfirmation)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionConfirmation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.SubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_commit_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->last_commit_position(), target);
  }

  // optional int64 last_event_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->last_event_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.SubscriptionConfirmation)
  return target;
}

size_t SubscriptionConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.SubscriptionConfirmation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 last_commit_position = 1;
  if (has_last_commit_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_commit_position());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 last_event_number = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_event_number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.SubscriptionConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.SubscriptionConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.SubscriptionConfirmation)
    MergeFrom(*source);
  }
}

void SubscriptionConfirmation::MergeFrom(const SubscriptionConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.SubscriptionConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_commit_position_ = from.last_commit_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_event_number_ = from.last_event_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscriptionConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.SubscriptionConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionConfirmation::CopyFrom(const SubscriptionConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.SubscriptionConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionConfirmation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubscriptionConfirmation::InternalSwap(SubscriptionConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_commit_position_, other->last_commit_position_);
  swap(last_event_number_, other->last_event_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamEventAppeared::InitAsDefaultInstance() {
  ::es::message::_StreamEventAppeared_default_instance_._instance.get_mutable()->event_ = const_cast< ::es::message::ResolvedEvent*>(
      ::es::message::ResolvedEvent::internal_default_instance());
}
class StreamEventAppeared::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamEventAppeared>()._has_bits_);
  static const ::es::message::ResolvedEvent& event(const StreamEventAppeared* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::es::message::ResolvedEvent&
StreamEventAppeared::_Internal::event(const StreamEventAppeared* msg) {
  return *msg->event_;
}
StreamEventAppeared::StreamEventAppeared()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.StreamEventAppeared)
}
StreamEventAppeared::StreamEventAppeared(const StreamEventAppeared& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event()) {
    event_ = new ::es::message::ResolvedEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:es.message.StreamEventAppeared)
}

void StreamEventAppeared::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamEventAppeared_messages_2eproto.base);
  event_ = nullptr;
}

StreamEventAppeared::~StreamEventAppeared() {
  // @@protoc_insertion_point(destructor:es.message.StreamEventAppeared)
  SharedDtor();
}

void StreamEventAppeared::SharedDtor() {
  if (this != internal_default_instance()) delete event_;
}

void StreamEventAppeared::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamEventAppeared& StreamEventAppeared::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamEventAppeared_messages_2eproto.base);
  return *internal_default_instance();
}


void StreamEventAppeared::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.StreamEventAppeared)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(event_ != nullptr);
    event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamEventAppeared::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.ResolvedEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamEventAppeared::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.StreamEventAppeared)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.ResolvedEvent event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.StreamEventAppeared)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.StreamEventAppeared)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamEventAppeared::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.StreamEventAppeared)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.ResolvedEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::event(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.StreamEventAppeared)
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamEventAppeared::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.StreamEventAppeared)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.ResolvedEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::event(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.StreamEventAppeared)
  return target;
}

size_t StreamEventAppeared::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.StreamEventAppeared)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .es.message.ResolvedEvent event = 1;
  if (has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamEventAppeared::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.StreamEventAppeared)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamEventAppeared* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamEventAppeared>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.StreamEventAppeared)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.StreamEventAppeared)
    MergeFrom(*source);
  }
}

void StreamEventAppeared::MergeFrom(const StreamEventAppeared& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.StreamEventAppeared)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event()) {
    mutable_event()->::es::message::ResolvedEvent::MergeFrom(from.event());
  }
}

void StreamEventAppeared::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.StreamEventAppeared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamEventAppeared::CopyFrom(const StreamEventAppeared& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.StreamEventAppeared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamEventAppeared::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_event()) {
    if (!this->event_->IsInitialized()) return false;
  }
  return true;
}

void StreamEventAppeared::InternalSwap(StreamEventAppeared* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamEventAppeared::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeFromStream::InitAsDefaultInstance() {
}
class UnsubscribeFromStream::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeFromStream>()._has_bits_);
};

UnsubscribeFromStream::UnsubscribeFromStream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.UnsubscribeFromStream)
}
UnsubscribeFromStream::UnsubscribeFromStream(const UnsubscribeFromStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:es.message.UnsubscribeFromStream)
}

void UnsubscribeFromStream::SharedCtor() {
}

UnsubscribeFromStream::~UnsubscribeFromStream() {
  // @@protoc_insertion_point(destructor:es.message.UnsubscribeFromStream)
  SharedDtor();
}

void UnsubscribeFromStream::SharedDtor() {
}

void UnsubscribeFromStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeFromStream& UnsubscribeFromStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeFromStream_messages_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeFromStream::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.UnsubscribeFromStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnsubscribeFromStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnsubscribeFromStream::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.UnsubscribeFromStream)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.UnsubscribeFromStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.UnsubscribeFromStream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnsubscribeFromStream::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.UnsubscribeFromStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.UnsubscribeFromStream)
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeFromStream::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.UnsubscribeFromStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.UnsubscribeFromStream)
  return target;
}

size_t UnsubscribeFromStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.UnsubscribeFromStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeFromStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.UnsubscribeFromStream)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeFromStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeFromStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.UnsubscribeFromStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.UnsubscribeFromStream)
    MergeFrom(*source);
  }
}

void UnsubscribeFromStream::MergeFrom(const UnsubscribeFromStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.UnsubscribeFromStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnsubscribeFromStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.UnsubscribeFromStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeFromStream::CopyFrom(const UnsubscribeFromStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.UnsubscribeFromStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeFromStream::IsInitialized() const {
  return true;
}

void UnsubscribeFromStream::InternalSwap(UnsubscribeFromStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeFromStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionDropped::InitAsDefaultInstance() {
}
class SubscriptionDropped::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionDropped>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SubscriptionDropped::SubscriptionDropped()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.SubscriptionDropped)
}
SubscriptionDropped::SubscriptionDropped(const SubscriptionDropped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:es.message.SubscriptionDropped)
}

void SubscriptionDropped::SharedCtor() {
  reason_ = 0;
}

SubscriptionDropped::~SubscriptionDropped() {
  // @@protoc_insertion_point(destructor:es.message.SubscriptionDropped)
  SharedDtor();
}

void SubscriptionDropped::SharedDtor() {
}

void SubscriptionDropped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionDropped& SubscriptionDropped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionDropped_messages_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionDropped::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.SubscriptionDropped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscriptionDropped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .es.message.SubscriptionDropped.SubscriptionDropReason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::SubscriptionDropped_SubscriptionDropReason_IsValid(val))) {
            set_reason(static_cast<::es::message::SubscriptionDropped_SubscriptionDropReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscriptionDropped::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.SubscriptionDropped)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .es.message.SubscriptionDropped.SubscriptionDropReason reason = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::SubscriptionDropped_SubscriptionDropReason_IsValid(value)) {
            set_reason(static_cast< ::es::message::SubscriptionDropped_SubscriptionDropReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.SubscriptionDropped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.SubscriptionDropped)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscriptionDropped::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.SubscriptionDropped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .es.message.SubscriptionDropped.SubscriptionDropReason reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.SubscriptionDropped)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionDropped::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.SubscriptionDropped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .es.message.SubscriptionDropped.SubscriptionDropReason reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.SubscriptionDropped)
  return target;
}

size_t SubscriptionDropped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.SubscriptionDropped)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .es.message.SubscriptionDropped.SubscriptionDropReason reason = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionDropped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.SubscriptionDropped)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionDropped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionDropped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.SubscriptionDropped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.SubscriptionDropped)
    MergeFrom(*source);
  }
}

void SubscriptionDropped::MergeFrom(const SubscriptionDropped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.SubscriptionDropped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason()) {
    set_reason(from.reason());
  }
}

void SubscriptionDropped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.SubscriptionDropped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionDropped::CopyFrom(const SubscriptionDropped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.SubscriptionDropped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionDropped::IsInitialized() const {
  return true;
}

void SubscriptionDropped::InternalSwap(SubscriptionDropped* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionDropped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NotHandled_MasterInfo::InitAsDefaultInstance() {
}
class NotHandled_MasterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NotHandled_MasterInfo>()._has_bits_);
  static void set_has_external_tcp_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_external_tcp_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_external_http_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_external_http_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_external_secure_tcp_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_external_secure_tcp_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

NotHandled_MasterInfo::NotHandled_MasterInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.NotHandled.MasterInfo)
}
NotHandled_MasterInfo::NotHandled_MasterInfo(const NotHandled_MasterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  external_tcp_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_tcp_address()) {
    external_tcp_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.external_tcp_address_);
  }
  external_http_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_http_address()) {
    external_http_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.external_http_address_);
  }
  external_secure_tcp_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_secure_tcp_address()) {
    external_secure_tcp_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.external_secure_tcp_address_);
  }
  ::memcpy(&external_tcp_port_, &from.external_tcp_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&external_secure_tcp_port_) -
    reinterpret_cast<char*>(&external_tcp_port_)) + sizeof(external_secure_tcp_port_));
  // @@protoc_insertion_point(copy_constructor:es.message.NotHandled.MasterInfo)
}

void NotHandled_MasterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotHandled_MasterInfo_messages_2eproto.base);
  external_tcp_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_http_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_secure_tcp_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&external_tcp_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_secure_tcp_port_) -
      reinterpret_cast<char*>(&external_tcp_port_)) + sizeof(external_secure_tcp_port_));
}

NotHandled_MasterInfo::~NotHandled_MasterInfo() {
  // @@protoc_insertion_point(destructor:es.message.NotHandled.MasterInfo)
  SharedDtor();
}

void NotHandled_MasterInfo::SharedDtor() {
  external_tcp_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_http_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_secure_tcp_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NotHandled_MasterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotHandled_MasterInfo& NotHandled_MasterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotHandled_MasterInfo_messages_2eproto.base);
  return *internal_default_instance();
}


void NotHandled_MasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.NotHandled.MasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      external_tcp_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      external_http_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      external_secure_tcp_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&external_tcp_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&external_secure_tcp_port_) -
        reinterpret_cast<char*>(&external_tcp_port_)) + sizeof(external_secure_tcp_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotHandled_MasterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string external_tcp_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_external_tcp_address(), ptr, ctx, "es.message.NotHandled.MasterInfo.external_tcp_address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 external_tcp_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_external_tcp_port(&has_bits);
          external_tcp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string external_http_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_external_http_address(), ptr, ctx, "es.message.NotHandled.MasterInfo.external_http_address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 external_http_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_external_http_port(&has_bits);
          external_http_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string external_secure_tcp_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_external_secure_tcp_address(), ptr, ctx, "es.message.NotHandled.MasterInfo.external_secure_tcp_address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 external_secure_tcp_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_external_secure_tcp_port(&has_bits);
          external_secure_tcp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotHandled_MasterInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.NotHandled.MasterInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string external_tcp_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_external_tcp_address()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_tcp_address().data(), static_cast<int>(this->external_tcp_address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.NotHandled.MasterInfo.external_tcp_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 external_tcp_port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_external_tcp_port(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string external_http_address = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_external_http_address()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_http_address().data(), static_cast<int>(this->external_http_address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.NotHandled.MasterInfo.external_http_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 external_http_port = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_external_http_port(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_http_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string external_secure_tcp_address = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_external_secure_tcp_address()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_secure_tcp_address().data(), static_cast<int>(this->external_secure_tcp_address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.NotHandled.MasterInfo.external_secure_tcp_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 external_secure_tcp_port = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_external_secure_tcp_port(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_secure_tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.NotHandled.MasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.NotHandled.MasterInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotHandled_MasterInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.NotHandled.MasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string external_tcp_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_tcp_address().data(), static_cast<int>(this->external_tcp_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.NotHandled.MasterInfo.external_tcp_address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->external_tcp_address(), output);
  }

  // required int32 external_tcp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->external_tcp_port(), output);
  }

  // required string external_http_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_http_address().data(), static_cast<int>(this->external_http_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.NotHandled.MasterInfo.external_http_address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->external_http_address(), output);
  }

  // required int32 external_http_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->external_http_port(), output);
  }

  // optional string external_secure_tcp_address = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_secure_tcp_address().data(), static_cast<int>(this->external_secure_tcp_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.NotHandled.MasterInfo.external_secure_tcp_address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->external_secure_tcp_address(), output);
  }

  // optional int32 external_secure_tcp_port = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->external_secure_tcp_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.NotHandled.MasterInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* NotHandled_MasterInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.NotHandled.MasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string external_tcp_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_tcp_address().data(), static_cast<int>(this->external_tcp_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.NotHandled.MasterInfo.external_tcp_address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->external_tcp_address(), target);
  }

  // required int32 external_tcp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->external_tcp_port(), target);
  }

  // required string external_http_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_http_address().data(), static_cast<int>(this->external_http_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.NotHandled.MasterInfo.external_http_address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->external_http_address(), target);
  }

  // required int32 external_http_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->external_http_port(), target);
  }

  // optional string external_secure_tcp_address = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_secure_tcp_address().data(), static_cast<int>(this->external_secure_tcp_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.NotHandled.MasterInfo.external_secure_tcp_address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->external_secure_tcp_address(), target);
  }

  // optional int32 external_secure_tcp_port = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->external_secure_tcp_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.NotHandled.MasterInfo)
  return target;
}

size_t NotHandled_MasterInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:es.message.NotHandled.MasterInfo)
  size_t total_size = 0;

  if (has_external_tcp_address()) {
    // required string external_tcp_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->external_tcp_address());
  }

  if (has_external_http_address()) {
    // required string external_http_address = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->external_http_address());
  }

  if (has_external_tcp_port()) {
    // required int32 external_tcp_port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->external_tcp_port());
  }

  if (has_external_http_port()) {
    // required int32 external_http_port = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->external_http_port());
  }

  return total_size;
}
size_t NotHandled_MasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.NotHandled.MasterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required string external_tcp_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->external_tcp_address());

    // required string external_http_address = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->external_http_address());

    // required int32 external_tcp_port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->external_tcp_port());

    // required int32 external_http_port = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->external_http_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string external_secure_tcp_address = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->external_secure_tcp_address());
  }

  // optional int32 external_secure_tcp_port = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->external_secure_tcp_port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotHandled_MasterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.NotHandled.MasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NotHandled_MasterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotHandled_MasterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.NotHandled.MasterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.NotHandled.MasterInfo)
    MergeFrom(*source);
  }
}

void NotHandled_MasterInfo::MergeFrom(const NotHandled_MasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.NotHandled.MasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      external_tcp_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.external_tcp_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      external_http_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.external_http_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      external_secure_tcp_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.external_secure_tcp_address_);
    }
    if (cached_has_bits & 0x00000008u) {
      external_tcp_port_ = from.external_tcp_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      external_http_port_ = from.external_http_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      external_secure_tcp_port_ = from.external_secure_tcp_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NotHandled_MasterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.NotHandled.MasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotHandled_MasterInfo::CopyFrom(const NotHandled_MasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.NotHandled.MasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotHandled_MasterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  return true;
}

void NotHandled_MasterInfo::InternalSwap(NotHandled_MasterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  external_tcp_address_.Swap(&other->external_tcp_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  external_http_address_.Swap(&other->external_http_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  external_secure_tcp_address_.Swap(&other->external_secure_tcp_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(external_tcp_port_, other->external_tcp_port_);
  swap(external_http_port_, other->external_http_port_);
  swap(external_secure_tcp_port_, other->external_secure_tcp_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotHandled_MasterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NotHandled::InitAsDefaultInstance() {
}
class NotHandled::_Internal {
 public:
  using HasBits = decltype(std::declval<NotHandled>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_additional_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NotHandled::NotHandled()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.NotHandled)
}
NotHandled::NotHandled(const NotHandled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  additional_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_additional_info()) {
    additional_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.additional_info_);
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:es.message.NotHandled)
}

void NotHandled::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotHandled_messages_2eproto.base);
  additional_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_ = 0;
}

NotHandled::~NotHandled() {
  // @@protoc_insertion_point(destructor:es.message.NotHandled)
  SharedDtor();
}

void NotHandled::SharedDtor() {
  additional_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NotHandled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotHandled& NotHandled::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotHandled_messages_2eproto.base);
  return *internal_default_instance();
}


void NotHandled::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.NotHandled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    additional_info_.ClearNonDefaultToEmptyNoArena();
  }
  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotHandled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.NotHandled.NotHandledReason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::NotHandled_NotHandledReason_IsValid(val))) {
            set_reason(static_cast<::es::message::NotHandled_NotHandledReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes additional_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_additional_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotHandled::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.NotHandled)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.NotHandled.NotHandledReason reason = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::NotHandled_NotHandledReason_IsValid(value)) {
            set_reason(static_cast< ::es::message::NotHandled_NotHandledReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes additional_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_additional_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.NotHandled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.NotHandled)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotHandled::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.NotHandled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.NotHandled.NotHandledReason reason = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  // optional bytes additional_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->additional_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.NotHandled)
}

::PROTOBUF_NAMESPACE_ID::uint8* NotHandled::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.NotHandled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.NotHandled.NotHandledReason reason = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  // optional bytes additional_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->additional_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.NotHandled)
  return target;
}

size_t NotHandled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.NotHandled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .es.message.NotHandled.NotHandledReason reason = 1;
  if (has_reason()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->reason());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes additional_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->additional_info());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotHandled::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.NotHandled)
  GOOGLE_DCHECK_NE(&from, this);
  const NotHandled* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotHandled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.NotHandled)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.NotHandled)
    MergeFrom(*source);
  }
}

void NotHandled::MergeFrom(const NotHandled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.NotHandled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      additional_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.additional_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NotHandled::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.NotHandled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotHandled::CopyFrom(const NotHandled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.NotHandled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotHandled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void NotHandled::InternalSwap(NotHandled* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_info_.Swap(&other->additional_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotHandled::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScavengeDatabase::InitAsDefaultInstance() {
}
class ScavengeDatabase::_Internal {
 public:
  using HasBits = decltype(std::declval<ScavengeDatabase>()._has_bits_);
};

ScavengeDatabase::ScavengeDatabase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ScavengeDatabase)
}
ScavengeDatabase::ScavengeDatabase(const ScavengeDatabase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:es.message.ScavengeDatabase)
}

void ScavengeDatabase::SharedCtor() {
}

ScavengeDatabase::~ScavengeDatabase() {
  // @@protoc_insertion_point(destructor:es.message.ScavengeDatabase)
  SharedDtor();
}

void ScavengeDatabase::SharedDtor() {
}

void ScavengeDatabase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScavengeDatabase& ScavengeDatabase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScavengeDatabase_messages_2eproto.base);
  return *internal_default_instance();
}


void ScavengeDatabase::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ScavengeDatabase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScavengeDatabase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScavengeDatabase::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ScavengeDatabase)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ScavengeDatabase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ScavengeDatabase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScavengeDatabase::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ScavengeDatabase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ScavengeDatabase)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScavengeDatabase::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ScavengeDatabase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ScavengeDatabase)
  return target;
}

size_t ScavengeDatabase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ScavengeDatabase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScavengeDatabase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ScavengeDatabase)
  GOOGLE_DCHECK_NE(&from, this);
  const ScavengeDatabase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScavengeDatabase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ScavengeDatabase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ScavengeDatabase)
    MergeFrom(*source);
  }
}

void ScavengeDatabase::MergeFrom(const ScavengeDatabase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ScavengeDatabase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScavengeDatabase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ScavengeDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScavengeDatabase::CopyFrom(const ScavengeDatabase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ScavengeDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScavengeDatabase::IsInitialized() const {
  return true;
}

void ScavengeDatabase::InternalSwap(ScavengeDatabase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScavengeDatabase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScavengeDatabaseResponse::InitAsDefaultInstance() {
}
class ScavengeDatabaseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ScavengeDatabaseResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scavengeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScavengeDatabaseResponse::ScavengeDatabaseResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ScavengeDatabaseResponse)
}
ScavengeDatabaseResponse::ScavengeDatabaseResponse(const ScavengeDatabaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scavengeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_scavengeid()) {
    scavengeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scavengeid_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:es.message.ScavengeDatabaseResponse)
}

void ScavengeDatabaseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScavengeDatabaseResponse_messages_2eproto.base);
  scavengeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

ScavengeDatabaseResponse::~ScavengeDatabaseResponse() {
  // @@protoc_insertion_point(destructor:es.message.ScavengeDatabaseResponse)
  SharedDtor();
}

void ScavengeDatabaseResponse::SharedDtor() {
  scavengeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScavengeDatabaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScavengeDatabaseResponse& ScavengeDatabaseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScavengeDatabaseResponse_messages_2eproto.base);
  return *internal_default_instance();
}


void ScavengeDatabaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ScavengeDatabaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    scavengeid_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScavengeDatabaseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .es.message.ScavengeDatabaseResponse.ScavengeResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::es::message::ScavengeDatabaseResponse_ScavengeResult_IsValid(val))) {
            set_result(static_cast<::es::message::ScavengeDatabaseResponse_ScavengeResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string scavengeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_scavengeid(), ptr, ctx, "es.message.ScavengeDatabaseResponse.scavengeId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScavengeDatabaseResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ScavengeDatabaseResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .es.message.ScavengeDatabaseResponse.ScavengeResult result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::es::message::ScavengeDatabaseResponse_ScavengeResult_IsValid(value)) {
            set_result(static_cast< ::es::message::ScavengeDatabaseResponse_ScavengeResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scavengeId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scavengeid()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scavengeid().data(), static_cast<int>(this->scavengeid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.ScavengeDatabaseResponse.scavengeId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ScavengeDatabaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ScavengeDatabaseResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScavengeDatabaseResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ScavengeDatabaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.ScavengeDatabaseResponse.ScavengeResult result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string scavengeId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scavengeid().data(), static_cast<int>(this->scavengeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ScavengeDatabaseResponse.scavengeId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scavengeid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ScavengeDatabaseResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScavengeDatabaseResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ScavengeDatabaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .es.message.ScavengeDatabaseResponse.ScavengeResult result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string scavengeId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scavengeid().data(), static_cast<int>(this->scavengeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.ScavengeDatabaseResponse.scavengeId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->scavengeid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ScavengeDatabaseResponse)
  return target;
}

size_t ScavengeDatabaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ScavengeDatabaseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .es.message.ScavengeDatabaseResponse.ScavengeResult result = 1;
  if (has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string scavengeId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scavengeid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScavengeDatabaseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ScavengeDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScavengeDatabaseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScavengeDatabaseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ScavengeDatabaseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ScavengeDatabaseResponse)
    MergeFrom(*source);
  }
}

void ScavengeDatabaseResponse::MergeFrom(const ScavengeDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ScavengeDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      scavengeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scavengeid_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScavengeDatabaseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ScavengeDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScavengeDatabaseResponse::CopyFrom(const ScavengeDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ScavengeDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScavengeDatabaseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ScavengeDatabaseResponse::InternalSwap(ScavengeDatabaseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scavengeid_.Swap(&other->scavengeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScavengeDatabaseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IdentifyClient::InitAsDefaultInstance() {
}
class IdentifyClient::_Internal {
 public:
  using HasBits = decltype(std::declval<IdentifyClient>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connection_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IdentifyClient::IdentifyClient()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.IdentifyClient)
}
IdentifyClient::IdentifyClient(const IdentifyClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_name()) {
    connection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:es.message.IdentifyClient)
}

void IdentifyClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IdentifyClient_messages_2eproto.base);
  connection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

IdentifyClient::~IdentifyClient() {
  // @@protoc_insertion_point(destructor:es.message.IdentifyClient)
  SharedDtor();
}

void IdentifyClient::SharedDtor() {
  connection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IdentifyClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IdentifyClient& IdentifyClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IdentifyClient_messages_2eproto.base);
  return *internal_default_instance();
}


void IdentifyClient::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.IdentifyClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connection_name_.ClearNonDefaultToEmptyNoArena();
  }
  version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IdentifyClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string connection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_connection_name(), ptr, ctx, "es.message.IdentifyClient.connection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IdentifyClient::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.IdentifyClient)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connection_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connection_name().data(), static_cast<int>(this->connection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "es.message.IdentifyClient.connection_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.IdentifyClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.IdentifyClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IdentifyClient::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.IdentifyClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional string connection_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_name().data(), static_cast<int>(this->connection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.IdentifyClient.connection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connection_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.IdentifyClient)
}

::PROTOBUF_NAMESPACE_ID::uint8* IdentifyClient::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.IdentifyClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional string connection_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_name().data(), static_cast<int>(this->connection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "es.message.IdentifyClient.connection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->connection_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.IdentifyClient)
  return target;
}

size_t IdentifyClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.IdentifyClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->version());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string connection_name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->connection_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdentifyClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.IdentifyClient)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentifyClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IdentifyClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.IdentifyClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.IdentifyClient)
    MergeFrom(*source);
  }
}

void IdentifyClient::MergeFrom(const IdentifyClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.IdentifyClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      connection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IdentifyClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.IdentifyClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentifyClient::CopyFrom(const IdentifyClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.IdentifyClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifyClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void IdentifyClient::InternalSwap(IdentifyClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connection_name_.Swap(&other->connection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifyClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientIdentified::InitAsDefaultInstance() {
}
class ClientIdentified::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientIdentified>()._has_bits_);
};

ClientIdentified::ClientIdentified()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:es.message.ClientIdentified)
}
ClientIdentified::ClientIdentified(const ClientIdentified& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:es.message.ClientIdentified)
}

void ClientIdentified::SharedCtor() {
}

ClientIdentified::~ClientIdentified() {
  // @@protoc_insertion_point(destructor:es.message.ClientIdentified)
  SharedDtor();
}

void ClientIdentified::SharedDtor() {
}

void ClientIdentified::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientIdentified& ClientIdentified::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientIdentified_messages_2eproto.base);
  return *internal_default_instance();
}


void ClientIdentified::Clear() {
// @@protoc_insertion_point(message_clear_start:es.message.ClientIdentified)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientIdentified::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientIdentified::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:es.message.ClientIdentified)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:es.message.ClientIdentified)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:es.message.ClientIdentified)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientIdentified::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:es.message.ClientIdentified)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:es.message.ClientIdentified)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientIdentified::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:es.message.ClientIdentified)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:es.message.ClientIdentified)
  return target;
}

size_t ClientIdentified::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:es.message.ClientIdentified)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientIdentified::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:es.message.ClientIdentified)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientIdentified* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientIdentified>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:es.message.ClientIdentified)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:es.message.ClientIdentified)
    MergeFrom(*source);
  }
}

void ClientIdentified::MergeFrom(const ClientIdentified& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:es.message.ClientIdentified)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClientIdentified::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:es.message.ClientIdentified)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientIdentified::CopyFrom(const ClientIdentified& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:es.message.ClientIdentified)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIdentified::IsInitialized() const {
  return true;
}

void ClientIdentified::InternalSwap(ClientIdentified* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientIdentified::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace es
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::es::message::NewEvent* Arena::CreateMaybeMessage< ::es::message::NewEvent >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::NewEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::EventRecord* Arena::CreateMaybeMessage< ::es::message::EventRecord >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::EventRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ResolvedIndexedEvent* Arena::CreateMaybeMessage< ::es::message::ResolvedIndexedEvent >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ResolvedIndexedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ResolvedEvent* Arena::CreateMaybeMessage< ::es::message::ResolvedEvent >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ResolvedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::WriteEvents* Arena::CreateMaybeMessage< ::es::message::WriteEvents >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::WriteEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::WriteEventsCompleted* Arena::CreateMaybeMessage< ::es::message::WriteEventsCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::WriteEventsCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::DeleteStream* Arena::CreateMaybeMessage< ::es::message::DeleteStream >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::DeleteStream >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::DeleteStreamCompleted* Arena::CreateMaybeMessage< ::es::message::DeleteStreamCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::DeleteStreamCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::TransactionStart* Arena::CreateMaybeMessage< ::es::message::TransactionStart >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::TransactionStart >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::TransactionStartCompleted* Arena::CreateMaybeMessage< ::es::message::TransactionStartCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::TransactionStartCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::TransactionWrite* Arena::CreateMaybeMessage< ::es::message::TransactionWrite >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::TransactionWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::TransactionWriteCompleted* Arena::CreateMaybeMessage< ::es::message::TransactionWriteCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::TransactionWriteCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::TransactionCommit* Arena::CreateMaybeMessage< ::es::message::TransactionCommit >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::TransactionCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::TransactionCommitCompleted* Arena::CreateMaybeMessage< ::es::message::TransactionCommitCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::TransactionCommitCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ReadEvent* Arena::CreateMaybeMessage< ::es::message::ReadEvent >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ReadEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ReadEventCompleted* Arena::CreateMaybeMessage< ::es::message::ReadEventCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ReadEventCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ReadStreamEvents* Arena::CreateMaybeMessage< ::es::message::ReadStreamEvents >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ReadStreamEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ReadStreamEventsCompleted* Arena::CreateMaybeMessage< ::es::message::ReadStreamEventsCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ReadStreamEventsCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ReadAllEvents* Arena::CreateMaybeMessage< ::es::message::ReadAllEvents >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ReadAllEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ReadAllEventsCompleted* Arena::CreateMaybeMessage< ::es::message::ReadAllEventsCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ReadAllEventsCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::CreatePersistentSubscription* Arena::CreateMaybeMessage< ::es::message::CreatePersistentSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::CreatePersistentSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::DeletePersistentSubscription* Arena::CreateMaybeMessage< ::es::message::DeletePersistentSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::DeletePersistentSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::UpdatePersistentSubscription* Arena::CreateMaybeMessage< ::es::message::UpdatePersistentSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::UpdatePersistentSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::UpdatePersistentSubscriptionCompleted* Arena::CreateMaybeMessage< ::es::message::UpdatePersistentSubscriptionCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::UpdatePersistentSubscriptionCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::CreatePersistentSubscriptionCompleted* Arena::CreateMaybeMessage< ::es::message::CreatePersistentSubscriptionCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::CreatePersistentSubscriptionCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::DeletePersistentSubscriptionCompleted* Arena::CreateMaybeMessage< ::es::message::DeletePersistentSubscriptionCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::DeletePersistentSubscriptionCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ConnectToPersistentSubscription* Arena::CreateMaybeMessage< ::es::message::ConnectToPersistentSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ConnectToPersistentSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::PersistentSubscriptionAckEvents* Arena::CreateMaybeMessage< ::es::message::PersistentSubscriptionAckEvents >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::PersistentSubscriptionAckEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::PersistentSubscriptionNakEvents* Arena::CreateMaybeMessage< ::es::message::PersistentSubscriptionNakEvents >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::PersistentSubscriptionNakEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::PersistentSubscriptionConfirmation* Arena::CreateMaybeMessage< ::es::message::PersistentSubscriptionConfirmation >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::PersistentSubscriptionConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::PersistentSubscriptionStreamEventAppeared* Arena::CreateMaybeMessage< ::es::message::PersistentSubscriptionStreamEventAppeared >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::PersistentSubscriptionStreamEventAppeared >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::SubscribeToStream* Arena::CreateMaybeMessage< ::es::message::SubscribeToStream >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::SubscribeToStream >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::SubscriptionConfirmation* Arena::CreateMaybeMessage< ::es::message::SubscriptionConfirmation >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::SubscriptionConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::StreamEventAppeared* Arena::CreateMaybeMessage< ::es::message::StreamEventAppeared >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::StreamEventAppeared >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::UnsubscribeFromStream* Arena::CreateMaybeMessage< ::es::message::UnsubscribeFromStream >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::UnsubscribeFromStream >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::SubscriptionDropped* Arena::CreateMaybeMessage< ::es::message::SubscriptionDropped >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::SubscriptionDropped >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::NotHandled_MasterInfo* Arena::CreateMaybeMessage< ::es::message::NotHandled_MasterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::NotHandled_MasterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::NotHandled* Arena::CreateMaybeMessage< ::es::message::NotHandled >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::NotHandled >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ScavengeDatabase* Arena::CreateMaybeMessage< ::es::message::ScavengeDatabase >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ScavengeDatabase >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ScavengeDatabaseResponse* Arena::CreateMaybeMessage< ::es::message::ScavengeDatabaseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ScavengeDatabaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::IdentifyClient* Arena::CreateMaybeMessage< ::es::message::IdentifyClient >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::IdentifyClient >(arena);
}
template<> PROTOBUF_NOINLINE ::es::message::ClientIdentified* Arena::CreateMaybeMessage< ::es::message::ClientIdentified >(Arena* arena) {
  return Arena::CreateInternal< ::es::message::ClientIdentified >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
