// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[42]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace es {
namespace message {
class ClientIdentified;
class ClientIdentifiedDefaultTypeInternal;
extern ClientIdentifiedDefaultTypeInternal _ClientIdentified_default_instance_;
class ConnectToPersistentSubscription;
class ConnectToPersistentSubscriptionDefaultTypeInternal;
extern ConnectToPersistentSubscriptionDefaultTypeInternal _ConnectToPersistentSubscription_default_instance_;
class CreatePersistentSubscription;
class CreatePersistentSubscriptionDefaultTypeInternal;
extern CreatePersistentSubscriptionDefaultTypeInternal _CreatePersistentSubscription_default_instance_;
class CreatePersistentSubscriptionCompleted;
class CreatePersistentSubscriptionCompletedDefaultTypeInternal;
extern CreatePersistentSubscriptionCompletedDefaultTypeInternal _CreatePersistentSubscriptionCompleted_default_instance_;
class DeletePersistentSubscription;
class DeletePersistentSubscriptionDefaultTypeInternal;
extern DeletePersistentSubscriptionDefaultTypeInternal _DeletePersistentSubscription_default_instance_;
class DeletePersistentSubscriptionCompleted;
class DeletePersistentSubscriptionCompletedDefaultTypeInternal;
extern DeletePersistentSubscriptionCompletedDefaultTypeInternal _DeletePersistentSubscriptionCompleted_default_instance_;
class DeleteStream;
class DeleteStreamDefaultTypeInternal;
extern DeleteStreamDefaultTypeInternal _DeleteStream_default_instance_;
class DeleteStreamCompleted;
class DeleteStreamCompletedDefaultTypeInternal;
extern DeleteStreamCompletedDefaultTypeInternal _DeleteStreamCompleted_default_instance_;
class EventRecord;
class EventRecordDefaultTypeInternal;
extern EventRecordDefaultTypeInternal _EventRecord_default_instance_;
class IdentifyClient;
class IdentifyClientDefaultTypeInternal;
extern IdentifyClientDefaultTypeInternal _IdentifyClient_default_instance_;
class NewEvent;
class NewEventDefaultTypeInternal;
extern NewEventDefaultTypeInternal _NewEvent_default_instance_;
class NotHandled;
class NotHandledDefaultTypeInternal;
extern NotHandledDefaultTypeInternal _NotHandled_default_instance_;
class NotHandled_MasterInfo;
class NotHandled_MasterInfoDefaultTypeInternal;
extern NotHandled_MasterInfoDefaultTypeInternal _NotHandled_MasterInfo_default_instance_;
class PersistentSubscriptionAckEvents;
class PersistentSubscriptionAckEventsDefaultTypeInternal;
extern PersistentSubscriptionAckEventsDefaultTypeInternal _PersistentSubscriptionAckEvents_default_instance_;
class PersistentSubscriptionConfirmation;
class PersistentSubscriptionConfirmationDefaultTypeInternal;
extern PersistentSubscriptionConfirmationDefaultTypeInternal _PersistentSubscriptionConfirmation_default_instance_;
class PersistentSubscriptionNakEvents;
class PersistentSubscriptionNakEventsDefaultTypeInternal;
extern PersistentSubscriptionNakEventsDefaultTypeInternal _PersistentSubscriptionNakEvents_default_instance_;
class PersistentSubscriptionStreamEventAppeared;
class PersistentSubscriptionStreamEventAppearedDefaultTypeInternal;
extern PersistentSubscriptionStreamEventAppearedDefaultTypeInternal _PersistentSubscriptionStreamEventAppeared_default_instance_;
class ReadAllEvents;
class ReadAllEventsDefaultTypeInternal;
extern ReadAllEventsDefaultTypeInternal _ReadAllEvents_default_instance_;
class ReadAllEventsCompleted;
class ReadAllEventsCompletedDefaultTypeInternal;
extern ReadAllEventsCompletedDefaultTypeInternal _ReadAllEventsCompleted_default_instance_;
class ReadEvent;
class ReadEventDefaultTypeInternal;
extern ReadEventDefaultTypeInternal _ReadEvent_default_instance_;
class ReadEventCompleted;
class ReadEventCompletedDefaultTypeInternal;
extern ReadEventCompletedDefaultTypeInternal _ReadEventCompleted_default_instance_;
class ReadStreamEvents;
class ReadStreamEventsDefaultTypeInternal;
extern ReadStreamEventsDefaultTypeInternal _ReadStreamEvents_default_instance_;
class ReadStreamEventsCompleted;
class ReadStreamEventsCompletedDefaultTypeInternal;
extern ReadStreamEventsCompletedDefaultTypeInternal _ReadStreamEventsCompleted_default_instance_;
class ResolvedEvent;
class ResolvedEventDefaultTypeInternal;
extern ResolvedEventDefaultTypeInternal _ResolvedEvent_default_instance_;
class ResolvedIndexedEvent;
class ResolvedIndexedEventDefaultTypeInternal;
extern ResolvedIndexedEventDefaultTypeInternal _ResolvedIndexedEvent_default_instance_;
class ScavengeDatabase;
class ScavengeDatabaseDefaultTypeInternal;
extern ScavengeDatabaseDefaultTypeInternal _ScavengeDatabase_default_instance_;
class ScavengeDatabaseResponse;
class ScavengeDatabaseResponseDefaultTypeInternal;
extern ScavengeDatabaseResponseDefaultTypeInternal _ScavengeDatabaseResponse_default_instance_;
class StreamEventAppeared;
class StreamEventAppearedDefaultTypeInternal;
extern StreamEventAppearedDefaultTypeInternal _StreamEventAppeared_default_instance_;
class SubscribeToStream;
class SubscribeToStreamDefaultTypeInternal;
extern SubscribeToStreamDefaultTypeInternal _SubscribeToStream_default_instance_;
class SubscriptionConfirmation;
class SubscriptionConfirmationDefaultTypeInternal;
extern SubscriptionConfirmationDefaultTypeInternal _SubscriptionConfirmation_default_instance_;
class SubscriptionDropped;
class SubscriptionDroppedDefaultTypeInternal;
extern SubscriptionDroppedDefaultTypeInternal _SubscriptionDropped_default_instance_;
class TransactionCommit;
class TransactionCommitDefaultTypeInternal;
extern TransactionCommitDefaultTypeInternal _TransactionCommit_default_instance_;
class TransactionCommitCompleted;
class TransactionCommitCompletedDefaultTypeInternal;
extern TransactionCommitCompletedDefaultTypeInternal _TransactionCommitCompleted_default_instance_;
class TransactionStart;
class TransactionStartDefaultTypeInternal;
extern TransactionStartDefaultTypeInternal _TransactionStart_default_instance_;
class TransactionStartCompleted;
class TransactionStartCompletedDefaultTypeInternal;
extern TransactionStartCompletedDefaultTypeInternal _TransactionStartCompleted_default_instance_;
class TransactionWrite;
class TransactionWriteDefaultTypeInternal;
extern TransactionWriteDefaultTypeInternal _TransactionWrite_default_instance_;
class TransactionWriteCompleted;
class TransactionWriteCompletedDefaultTypeInternal;
extern TransactionWriteCompletedDefaultTypeInternal _TransactionWriteCompleted_default_instance_;
class UnsubscribeFromStream;
class UnsubscribeFromStreamDefaultTypeInternal;
extern UnsubscribeFromStreamDefaultTypeInternal _UnsubscribeFromStream_default_instance_;
class UpdatePersistentSubscription;
class UpdatePersistentSubscriptionDefaultTypeInternal;
extern UpdatePersistentSubscriptionDefaultTypeInternal _UpdatePersistentSubscription_default_instance_;
class UpdatePersistentSubscriptionCompleted;
class UpdatePersistentSubscriptionCompletedDefaultTypeInternal;
extern UpdatePersistentSubscriptionCompletedDefaultTypeInternal _UpdatePersistentSubscriptionCompleted_default_instance_;
class WriteEvents;
class WriteEventsDefaultTypeInternal;
extern WriteEventsDefaultTypeInternal _WriteEvents_default_instance_;
class WriteEventsCompleted;
class WriteEventsCompletedDefaultTypeInternal;
extern WriteEventsCompletedDefaultTypeInternal _WriteEventsCompleted_default_instance_;
}  // namespace message
}  // namespace es
PROTOBUF_NAMESPACE_OPEN
template<> ::es::message::ClientIdentified* Arena::CreateMaybeMessage<::es::message::ClientIdentified>(Arena*);
template<> ::es::message::ConnectToPersistentSubscription* Arena::CreateMaybeMessage<::es::message::ConnectToPersistentSubscription>(Arena*);
template<> ::es::message::CreatePersistentSubscription* Arena::CreateMaybeMessage<::es::message::CreatePersistentSubscription>(Arena*);
template<> ::es::message::CreatePersistentSubscriptionCompleted* Arena::CreateMaybeMessage<::es::message::CreatePersistentSubscriptionCompleted>(Arena*);
template<> ::es::message::DeletePersistentSubscription* Arena::CreateMaybeMessage<::es::message::DeletePersistentSubscription>(Arena*);
template<> ::es::message::DeletePersistentSubscriptionCompleted* Arena::CreateMaybeMessage<::es::message::DeletePersistentSubscriptionCompleted>(Arena*);
template<> ::es::message::DeleteStream* Arena::CreateMaybeMessage<::es::message::DeleteStream>(Arena*);
template<> ::es::message::DeleteStreamCompleted* Arena::CreateMaybeMessage<::es::message::DeleteStreamCompleted>(Arena*);
template<> ::es::message::EventRecord* Arena::CreateMaybeMessage<::es::message::EventRecord>(Arena*);
template<> ::es::message::IdentifyClient* Arena::CreateMaybeMessage<::es::message::IdentifyClient>(Arena*);
template<> ::es::message::NewEvent* Arena::CreateMaybeMessage<::es::message::NewEvent>(Arena*);
template<> ::es::message::NotHandled* Arena::CreateMaybeMessage<::es::message::NotHandled>(Arena*);
template<> ::es::message::NotHandled_MasterInfo* Arena::CreateMaybeMessage<::es::message::NotHandled_MasterInfo>(Arena*);
template<> ::es::message::PersistentSubscriptionAckEvents* Arena::CreateMaybeMessage<::es::message::PersistentSubscriptionAckEvents>(Arena*);
template<> ::es::message::PersistentSubscriptionConfirmation* Arena::CreateMaybeMessage<::es::message::PersistentSubscriptionConfirmation>(Arena*);
template<> ::es::message::PersistentSubscriptionNakEvents* Arena::CreateMaybeMessage<::es::message::PersistentSubscriptionNakEvents>(Arena*);
template<> ::es::message::PersistentSubscriptionStreamEventAppeared* Arena::CreateMaybeMessage<::es::message::PersistentSubscriptionStreamEventAppeared>(Arena*);
template<> ::es::message::ReadAllEvents* Arena::CreateMaybeMessage<::es::message::ReadAllEvents>(Arena*);
template<> ::es::message::ReadAllEventsCompleted* Arena::CreateMaybeMessage<::es::message::ReadAllEventsCompleted>(Arena*);
template<> ::es::message::ReadEvent* Arena::CreateMaybeMessage<::es::message::ReadEvent>(Arena*);
template<> ::es::message::ReadEventCompleted* Arena::CreateMaybeMessage<::es::message::ReadEventCompleted>(Arena*);
template<> ::es::message::ReadStreamEvents* Arena::CreateMaybeMessage<::es::message::ReadStreamEvents>(Arena*);
template<> ::es::message::ReadStreamEventsCompleted* Arena::CreateMaybeMessage<::es::message::ReadStreamEventsCompleted>(Arena*);
template<> ::es::message::ResolvedEvent* Arena::CreateMaybeMessage<::es::message::ResolvedEvent>(Arena*);
template<> ::es::message::ResolvedIndexedEvent* Arena::CreateMaybeMessage<::es::message::ResolvedIndexedEvent>(Arena*);
template<> ::es::message::ScavengeDatabase* Arena::CreateMaybeMessage<::es::message::ScavengeDatabase>(Arena*);
template<> ::es::message::ScavengeDatabaseResponse* Arena::CreateMaybeMessage<::es::message::ScavengeDatabaseResponse>(Arena*);
template<> ::es::message::StreamEventAppeared* Arena::CreateMaybeMessage<::es::message::StreamEventAppeared>(Arena*);
template<> ::es::message::SubscribeToStream* Arena::CreateMaybeMessage<::es::message::SubscribeToStream>(Arena*);
template<> ::es::message::SubscriptionConfirmation* Arena::CreateMaybeMessage<::es::message::SubscriptionConfirmation>(Arena*);
template<> ::es::message::SubscriptionDropped* Arena::CreateMaybeMessage<::es::message::SubscriptionDropped>(Arena*);
template<> ::es::message::TransactionCommit* Arena::CreateMaybeMessage<::es::message::TransactionCommit>(Arena*);
template<> ::es::message::TransactionCommitCompleted* Arena::CreateMaybeMessage<::es::message::TransactionCommitCompleted>(Arena*);
template<> ::es::message::TransactionStart* Arena::CreateMaybeMessage<::es::message::TransactionStart>(Arena*);
template<> ::es::message::TransactionStartCompleted* Arena::CreateMaybeMessage<::es::message::TransactionStartCompleted>(Arena*);
template<> ::es::message::TransactionWrite* Arena::CreateMaybeMessage<::es::message::TransactionWrite>(Arena*);
template<> ::es::message::TransactionWriteCompleted* Arena::CreateMaybeMessage<::es::message::TransactionWriteCompleted>(Arena*);
template<> ::es::message::UnsubscribeFromStream* Arena::CreateMaybeMessage<::es::message::UnsubscribeFromStream>(Arena*);
template<> ::es::message::UpdatePersistentSubscription* Arena::CreateMaybeMessage<::es::message::UpdatePersistentSubscription>(Arena*);
template<> ::es::message::UpdatePersistentSubscriptionCompleted* Arena::CreateMaybeMessage<::es::message::UpdatePersistentSubscriptionCompleted>(Arena*);
template<> ::es::message::WriteEvents* Arena::CreateMaybeMessage<::es::message::WriteEvents>(Arena*);
template<> ::es::message::WriteEventsCompleted* Arena::CreateMaybeMessage<::es::message::WriteEventsCompleted>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace es {
namespace message {

enum ReadEventCompleted_ReadEventResult : int {
  ReadEventCompleted_ReadEventResult_Success = 0,
  ReadEventCompleted_ReadEventResult_NotFound = 1,
  ReadEventCompleted_ReadEventResult_NoStream = 2,
  ReadEventCompleted_ReadEventResult_StreamDeleted = 3,
  ReadEventCompleted_ReadEventResult_Error = 4,
  ReadEventCompleted_ReadEventResult_AccessDenied = 5
};
bool ReadEventCompleted_ReadEventResult_IsValid(int value);
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted_ReadEventResult_ReadEventResult_MIN = ReadEventCompleted_ReadEventResult_Success;
constexpr ReadEventCompleted_ReadEventResult ReadEventCompleted_ReadEventResult_ReadEventResult_MAX = ReadEventCompleted_ReadEventResult_AccessDenied;
constexpr int ReadEventCompleted_ReadEventResult_ReadEventResult_ARRAYSIZE = ReadEventCompleted_ReadEventResult_ReadEventResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadEventCompleted_ReadEventResult_descriptor();
template<typename T>
inline const std::string& ReadEventCompleted_ReadEventResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadEventCompleted_ReadEventResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadEventCompleted_ReadEventResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadEventCompleted_ReadEventResult_descriptor(), enum_t_value);
}
inline bool ReadEventCompleted_ReadEventResult_Parse(
    const std::string& name, ReadEventCompleted_ReadEventResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadEventCompleted_ReadEventResult>(
    ReadEventCompleted_ReadEventResult_descriptor(), name, value);
}
enum ReadStreamEventsCompleted_ReadStreamResult : int {
  ReadStreamEventsCompleted_ReadStreamResult_Success = 0,
  ReadStreamEventsCompleted_ReadStreamResult_NoStream = 1,
  ReadStreamEventsCompleted_ReadStreamResult_StreamDeleted = 2,
  ReadStreamEventsCompleted_ReadStreamResult_NotModified = 3,
  ReadStreamEventsCompleted_ReadStreamResult_Error = 4,
  ReadStreamEventsCompleted_ReadStreamResult_AccessDenied = 5
};
bool ReadStreamEventsCompleted_ReadStreamResult_IsValid(int value);
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted_ReadStreamResult_ReadStreamResult_MIN = ReadStreamEventsCompleted_ReadStreamResult_Success;
constexpr ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted_ReadStreamResult_ReadStreamResult_MAX = ReadStreamEventsCompleted_ReadStreamResult_AccessDenied;
constexpr int ReadStreamEventsCompleted_ReadStreamResult_ReadStreamResult_ARRAYSIZE = ReadStreamEventsCompleted_ReadStreamResult_ReadStreamResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadStreamEventsCompleted_ReadStreamResult_descriptor();
template<typename T>
inline const std::string& ReadStreamEventsCompleted_ReadStreamResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadStreamEventsCompleted_ReadStreamResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadStreamEventsCompleted_ReadStreamResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadStreamEventsCompleted_ReadStreamResult_descriptor(), enum_t_value);
}
inline bool ReadStreamEventsCompleted_ReadStreamResult_Parse(
    const std::string& name, ReadStreamEventsCompleted_ReadStreamResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadStreamEventsCompleted_ReadStreamResult>(
    ReadStreamEventsCompleted_ReadStreamResult_descriptor(), name, value);
}
enum ReadAllEventsCompleted_ReadAllResult : int {
  ReadAllEventsCompleted_ReadAllResult_Success = 0,
  ReadAllEventsCompleted_ReadAllResult_NotModified = 1,
  ReadAllEventsCompleted_ReadAllResult_Error = 2,
  ReadAllEventsCompleted_ReadAllResult_AccessDenied = 3
};
bool ReadAllEventsCompleted_ReadAllResult_IsValid(int value);
constexpr ReadAllEventsCompleted_ReadAllResult ReadAllEventsCompleted_ReadAllResult_ReadAllResult_MIN = ReadAllEventsCompleted_ReadAllResult_Success;
constexpr ReadAllEventsCompleted_ReadAllResult ReadAllEventsCompleted_ReadAllResult_ReadAllResult_MAX = ReadAllEventsCompleted_ReadAllResult_AccessDenied;
constexpr int ReadAllEventsCompleted_ReadAllResult_ReadAllResult_ARRAYSIZE = ReadAllEventsCompleted_ReadAllResult_ReadAllResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadAllEventsCompleted_ReadAllResult_descriptor();
template<typename T>
inline const std::string& ReadAllEventsCompleted_ReadAllResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadAllEventsCompleted_ReadAllResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadAllEventsCompleted_ReadAllResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadAllEventsCompleted_ReadAllResult_descriptor(), enum_t_value);
}
inline bool ReadAllEventsCompleted_ReadAllResult_Parse(
    const std::string& name, ReadAllEventsCompleted_ReadAllResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadAllEventsCompleted_ReadAllResult>(
    ReadAllEventsCompleted_ReadAllResult_descriptor(), name, value);
}
enum UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult : int {
  UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Success = 0,
  UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_DoesNotExist = 1,
  UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Fail = 2,
  UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_AccessDenied = 3
};
bool UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_IsValid(int value);
constexpr UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_UpdatePersistentSubscriptionResult_MIN = UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Success;
constexpr UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_UpdatePersistentSubscriptionResult_MAX = UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_AccessDenied;
constexpr int UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_UpdatePersistentSubscriptionResult_ARRAYSIZE = UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_UpdatePersistentSubscriptionResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_descriptor();
template<typename T>
inline const std::string& UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_descriptor(), enum_t_value);
}
inline bool UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Parse(
    const std::string& name, UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult>(
    UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_descriptor(), name, value);
}
enum CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult : int {
  CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Success = 0,
  CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_AlreadyExists = 1,
  CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Fail = 2,
  CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_AccessDenied = 3
};
bool CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_IsValid(int value);
constexpr CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_CreatePersistentSubscriptionResult_MIN = CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Success;
constexpr CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_CreatePersistentSubscriptionResult_MAX = CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_AccessDenied;
constexpr int CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_CreatePersistentSubscriptionResult_ARRAYSIZE = CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_CreatePersistentSubscriptionResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_descriptor();
template<typename T>
inline const std::string& CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_descriptor(), enum_t_value);
}
inline bool CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Parse(
    const std::string& name, CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult>(
    CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_descriptor(), name, value);
}
enum DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult : int {
  DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Success = 0,
  DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_DoesNotExist = 1,
  DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Fail = 2,
  DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_AccessDenied = 3
};
bool DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_IsValid(int value);
constexpr DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_DeletePersistentSubscriptionResult_MIN = DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Success;
constexpr DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_DeletePersistentSubscriptionResult_MAX = DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_AccessDenied;
constexpr int DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_DeletePersistentSubscriptionResult_ARRAYSIZE = DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_DeletePersistentSubscriptionResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_descriptor();
template<typename T>
inline const std::string& DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_descriptor(), enum_t_value);
}
inline bool DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Parse(
    const std::string& name, DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult>(
    DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_descriptor(), name, value);
}
enum PersistentSubscriptionNakEvents_NakAction : int {
  PersistentSubscriptionNakEvents_NakAction_Unknown = 0,
  PersistentSubscriptionNakEvents_NakAction_Park = 1,
  PersistentSubscriptionNakEvents_NakAction_Retry = 2,
  PersistentSubscriptionNakEvents_NakAction_Skip = 3,
  PersistentSubscriptionNakEvents_NakAction_Stop = 4
};
bool PersistentSubscriptionNakEvents_NakAction_IsValid(int value);
constexpr PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents_NakAction_NakAction_MIN = PersistentSubscriptionNakEvents_NakAction_Unknown;
constexpr PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents_NakAction_NakAction_MAX = PersistentSubscriptionNakEvents_NakAction_Stop;
constexpr int PersistentSubscriptionNakEvents_NakAction_NakAction_ARRAYSIZE = PersistentSubscriptionNakEvents_NakAction_NakAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PersistentSubscriptionNakEvents_NakAction_descriptor();
template<typename T>
inline const std::string& PersistentSubscriptionNakEvents_NakAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PersistentSubscriptionNakEvents_NakAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PersistentSubscriptionNakEvents_NakAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PersistentSubscriptionNakEvents_NakAction_descriptor(), enum_t_value);
}
inline bool PersistentSubscriptionNakEvents_NakAction_Parse(
    const std::string& name, PersistentSubscriptionNakEvents_NakAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PersistentSubscriptionNakEvents_NakAction>(
    PersistentSubscriptionNakEvents_NakAction_descriptor(), name, value);
}
enum SubscriptionDropped_SubscriptionDropReason : int {
  SubscriptionDropped_SubscriptionDropReason_Unsubscribed = 0,
  SubscriptionDropped_SubscriptionDropReason_AccessDenied = 1,
  SubscriptionDropped_SubscriptionDropReason_NotFound = 2,
  SubscriptionDropped_SubscriptionDropReason_PersistentSubscriptionDeleted = 3,
  SubscriptionDropped_SubscriptionDropReason_SubscriberMaxCountReached = 4
};
bool SubscriptionDropped_SubscriptionDropReason_IsValid(int value);
constexpr SubscriptionDropped_SubscriptionDropReason SubscriptionDropped_SubscriptionDropReason_SubscriptionDropReason_MIN = SubscriptionDropped_SubscriptionDropReason_Unsubscribed;
constexpr SubscriptionDropped_SubscriptionDropReason SubscriptionDropped_SubscriptionDropReason_SubscriptionDropReason_MAX = SubscriptionDropped_SubscriptionDropReason_SubscriberMaxCountReached;
constexpr int SubscriptionDropped_SubscriptionDropReason_SubscriptionDropReason_ARRAYSIZE = SubscriptionDropped_SubscriptionDropReason_SubscriptionDropReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionDropped_SubscriptionDropReason_descriptor();
template<typename T>
inline const std::string& SubscriptionDropped_SubscriptionDropReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubscriptionDropped_SubscriptionDropReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubscriptionDropped_SubscriptionDropReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubscriptionDropped_SubscriptionDropReason_descriptor(), enum_t_value);
}
inline bool SubscriptionDropped_SubscriptionDropReason_Parse(
    const std::string& name, SubscriptionDropped_SubscriptionDropReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubscriptionDropped_SubscriptionDropReason>(
    SubscriptionDropped_SubscriptionDropReason_descriptor(), name, value);
}
enum NotHandled_NotHandledReason : int {
  NotHandled_NotHandledReason_NotReady = 0,
  NotHandled_NotHandledReason_TooBusy = 1,
  NotHandled_NotHandledReason_NotMaster = 2
};
bool NotHandled_NotHandledReason_IsValid(int value);
constexpr NotHandled_NotHandledReason NotHandled_NotHandledReason_NotHandledReason_MIN = NotHandled_NotHandledReason_NotReady;
constexpr NotHandled_NotHandledReason NotHandled_NotHandledReason_NotHandledReason_MAX = NotHandled_NotHandledReason_NotMaster;
constexpr int NotHandled_NotHandledReason_NotHandledReason_ARRAYSIZE = NotHandled_NotHandledReason_NotHandledReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotHandled_NotHandledReason_descriptor();
template<typename T>
inline const std::string& NotHandled_NotHandledReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotHandled_NotHandledReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotHandled_NotHandledReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NotHandled_NotHandledReason_descriptor(), enum_t_value);
}
inline bool NotHandled_NotHandledReason_Parse(
    const std::string& name, NotHandled_NotHandledReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NotHandled_NotHandledReason>(
    NotHandled_NotHandledReason_descriptor(), name, value);
}
enum ScavengeDatabaseResponse_ScavengeResult : int {
  ScavengeDatabaseResponse_ScavengeResult_Started = 0,
  ScavengeDatabaseResponse_ScavengeResult_InProgress = 1,
  ScavengeDatabaseResponse_ScavengeResult_Unauthorized = 2
};
bool ScavengeDatabaseResponse_ScavengeResult_IsValid(int value);
constexpr ScavengeDatabaseResponse_ScavengeResult ScavengeDatabaseResponse_ScavengeResult_ScavengeResult_MIN = ScavengeDatabaseResponse_ScavengeResult_Started;
constexpr ScavengeDatabaseResponse_ScavengeResult ScavengeDatabaseResponse_ScavengeResult_ScavengeResult_MAX = ScavengeDatabaseResponse_ScavengeResult_Unauthorized;
constexpr int ScavengeDatabaseResponse_ScavengeResult_ScavengeResult_ARRAYSIZE = ScavengeDatabaseResponse_ScavengeResult_ScavengeResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScavengeDatabaseResponse_ScavengeResult_descriptor();
template<typename T>
inline const std::string& ScavengeDatabaseResponse_ScavengeResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScavengeDatabaseResponse_ScavengeResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScavengeDatabaseResponse_ScavengeResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScavengeDatabaseResponse_ScavengeResult_descriptor(), enum_t_value);
}
inline bool ScavengeDatabaseResponse_ScavengeResult_Parse(
    const std::string& name, ScavengeDatabaseResponse_ScavengeResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScavengeDatabaseResponse_ScavengeResult>(
    ScavengeDatabaseResponse_ScavengeResult_descriptor(), name, value);
}
enum OperationResult : int {
  Success = 0,
  PrepareTimeout = 1,
  CommitTimeout = 2,
  ForwardTimeout = 3,
  WrongExpectedVersion = 4,
  StreamDeleted = 5,
  InvalidTransaction = 6,
  AccessDenied = 7
};
bool OperationResult_IsValid(int value);
constexpr OperationResult OperationResult_MIN = Success;
constexpr OperationResult OperationResult_MAX = AccessDenied;
constexpr int OperationResult_ARRAYSIZE = OperationResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationResult_descriptor();
template<typename T>
inline const std::string& OperationResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperationResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperationResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperationResult_descriptor(), enum_t_value);
}
inline bool OperationResult_Parse(
    const std::string& name, OperationResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperationResult>(
    OperationResult_descriptor(), name, value);
}
// ===================================================================

class NewEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.NewEvent) */ {
 public:
  NewEvent();
  virtual ~NewEvent();

  NewEvent(const NewEvent& from);
  NewEvent(NewEvent&& from) noexcept
    : NewEvent() {
    *this = ::std::move(from);
  }

  inline NewEvent& operator=(const NewEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewEvent& operator=(NewEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewEvent* internal_default_instance() {
    return reinterpret_cast<const NewEvent*>(
               &_NewEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewEvent& a, NewEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NewEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewEvent* New() const final {
    return CreateMaybeMessage<NewEvent>(nullptr);
  }

  NewEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewEvent& from);
  void MergeFrom(const NewEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.NewEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kEventTypeFieldNumber = 2,
    kDataFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kDataContentTypeFieldNumber = 3,
    kMetadataContentTypeFieldNumber = 4,
  };
  // required bytes event_id = 1;
  bool has_event_id() const;
  void clear_event_id();
  const std::string& event_id() const;
  void set_event_id(const std::string& value);
  void set_event_id(std::string&& value);
  void set_event_id(const char* value);
  void set_event_id(const void* value, size_t size);
  std::string* mutable_event_id();
  std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);

  // required string event_type = 2;
  bool has_event_type() const;
  void clear_event_type();
  const std::string& event_type() const;
  void set_event_type(const std::string& value);
  void set_event_type(std::string&& value);
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  std::string* mutable_event_type();
  std::string* release_event_type();
  void set_allocated_event_type(std::string* event_type);

  // required bytes data = 5;
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // optional bytes metadata = 6;
  bool has_metadata() const;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);

  // required int32 data_content_type = 3;
  bool has_data_content_type() const;
  void clear_data_content_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_content_type() const;
  void set_data_content_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 metadata_content_type = 4;
  bool has_metadata_content_type() const;
  void clear_metadata_content_type();
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_content_type() const;
  void set_metadata_content_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:es.message.NewEvent)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_content_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_content_type_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EventRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.EventRecord) */ {
 public:
  EventRecord();
  virtual ~EventRecord();

  EventRecord(const EventRecord& from);
  EventRecord(EventRecord&& from) noexcept
    : EventRecord() {
    *this = ::std::move(from);
  }

  inline EventRecord& operator=(const EventRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventRecord& operator=(EventRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventRecord* internal_default_instance() {
    return reinterpret_cast<const EventRecord*>(
               &_EventRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventRecord& a, EventRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EventRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventRecord* New() const final {
    return CreateMaybeMessage<EventRecord>(nullptr);
  }

  EventRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventRecord& from);
  void MergeFrom(const EventRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.EventRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventStreamIdFieldNumber = 1,
    kEventIdFieldNumber = 3,
    kEventTypeFieldNumber = 4,
    kDataFieldNumber = 7,
    kMetadataFieldNumber = 8,
    kEventNumberFieldNumber = 2,
    kDataContentTypeFieldNumber = 5,
    kMetadataContentTypeFieldNumber = 6,
    kCreatedFieldNumber = 9,
    kCreatedEpochFieldNumber = 10,
  };
  // required string event_stream_id = 1;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // required bytes event_id = 3;
  bool has_event_id() const;
  void clear_event_id();
  const std::string& event_id() const;
  void set_event_id(const std::string& value);
  void set_event_id(std::string&& value);
  void set_event_id(const char* value);
  void set_event_id(const void* value, size_t size);
  std::string* mutable_event_id();
  std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);

  // required string event_type = 4;
  bool has_event_type() const;
  void clear_event_type();
  const std::string& event_type() const;
  void set_event_type(const std::string& value);
  void set_event_type(std::string&& value);
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  std::string* mutable_event_type();
  std::string* release_event_type();
  void set_allocated_event_type(std::string* event_type);

  // required bytes data = 7;
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // optional bytes metadata = 8;
  bool has_metadata() const;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);

  // required int64 event_number = 2;
  bool has_event_number() const;
  void clear_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 event_number() const;
  void set_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 data_content_type = 5;
  bool has_data_content_type() const;
  void clear_data_content_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_content_type() const;
  void set_data_content_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 metadata_content_type = 6;
  bool has_metadata_content_type() const;
  void clear_metadata_content_type();
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_content_type() const;
  void set_metadata_content_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 created = 9;
  bool has_created() const;
  void clear_created();
  ::PROTOBUF_NAMESPACE_ID::int64 created() const;
  void set_created(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 created_epoch = 10;
  bool has_created_epoch() const;
  void clear_created_epoch();
  ::PROTOBUF_NAMESPACE_ID::int64 created_epoch() const;
  void set_created_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:es.message.EventRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 event_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_content_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_content_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_epoch_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ResolvedIndexedEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ResolvedIndexedEvent) */ {
 public:
  ResolvedIndexedEvent();
  virtual ~ResolvedIndexedEvent();

  ResolvedIndexedEvent(const ResolvedIndexedEvent& from);
  ResolvedIndexedEvent(ResolvedIndexedEvent&& from) noexcept
    : ResolvedIndexedEvent() {
    *this = ::std::move(from);
  }

  inline ResolvedIndexedEvent& operator=(const ResolvedIndexedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolvedIndexedEvent& operator=(ResolvedIndexedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolvedIndexedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedIndexedEvent* internal_default_instance() {
    return reinterpret_cast<const ResolvedIndexedEvent*>(
               &_ResolvedIndexedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResolvedIndexedEvent& a, ResolvedIndexedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolvedIndexedEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolvedIndexedEvent* New() const final {
    return CreateMaybeMessage<ResolvedIndexedEvent>(nullptr);
  }

  ResolvedIndexedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedIndexedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolvedIndexedEvent& from);
  void MergeFrom(const ResolvedIndexedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedIndexedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ResolvedIndexedEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kLinkFieldNumber = 2,
  };
  // required .es.message.EventRecord event = 1;
  bool has_event() const;
  void clear_event();
  const ::es::message::EventRecord& event() const;
  ::es::message::EventRecord* release_event();
  ::es::message::EventRecord* mutable_event();
  void set_allocated_event(::es::message::EventRecord* event);

  // optional .es.message.EventRecord link = 2;
  bool has_link() const;
  void clear_link();
  const ::es::message::EventRecord& link() const;
  ::es::message::EventRecord* release_link();
  ::es::message::EventRecord* mutable_link();
  void set_allocated_link(::es::message::EventRecord* link);

  // @@protoc_insertion_point(class_scope:es.message.ResolvedIndexedEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::es::message::EventRecord* event_;
  ::es::message::EventRecord* link_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ResolvedEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ResolvedEvent) */ {
 public:
  ResolvedEvent();
  virtual ~ResolvedEvent();

  ResolvedEvent(const ResolvedEvent& from);
  ResolvedEvent(ResolvedEvent&& from) noexcept
    : ResolvedEvent() {
    *this = ::std::move(from);
  }

  inline ResolvedEvent& operator=(const ResolvedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolvedEvent& operator=(ResolvedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolvedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolvedEvent* internal_default_instance() {
    return reinterpret_cast<const ResolvedEvent*>(
               &_ResolvedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResolvedEvent& a, ResolvedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolvedEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolvedEvent* New() const final {
    return CreateMaybeMessage<ResolvedEvent>(nullptr);
  }

  ResolvedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolvedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolvedEvent& from);
  void MergeFrom(const ResolvedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolvedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ResolvedEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kLinkFieldNumber = 2,
    kCommitPositionFieldNumber = 3,
    kPreparePositionFieldNumber = 4,
  };
  // required .es.message.EventRecord event = 1;
  bool has_event() const;
  void clear_event();
  const ::es::message::EventRecord& event() const;
  ::es::message::EventRecord* release_event();
  ::es::message::EventRecord* mutable_event();
  void set_allocated_event(::es::message::EventRecord* event);

  // optional .es.message.EventRecord link = 2;
  bool has_link() const;
  void clear_link();
  const ::es::message::EventRecord& link() const;
  ::es::message::EventRecord* release_link();
  ::es::message::EventRecord* mutable_link();
  void set_allocated_link(::es::message::EventRecord* link);

  // required int64 commit_position = 3;
  bool has_commit_position() const;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 prepare_position = 4;
  bool has_prepare_position() const;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:es.message.ResolvedEvent)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::es::message::EventRecord* event_;
  ::es::message::EventRecord* link_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WriteEvents :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.WriteEvents) */ {
 public:
  WriteEvents();
  virtual ~WriteEvents();

  WriteEvents(const WriteEvents& from);
  WriteEvents(WriteEvents&& from) noexcept
    : WriteEvents() {
    *this = ::std::move(from);
  }

  inline WriteEvents& operator=(const WriteEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteEvents& operator=(WriteEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteEvents* internal_default_instance() {
    return reinterpret_cast<const WriteEvents*>(
               &_WriteEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteEvents& a, WriteEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteEvents* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteEvents* New() const final {
    return CreateMaybeMessage<WriteEvents>(nullptr);
  }

  WriteEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteEvents& from);
  void MergeFrom(const WriteEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.WriteEvents";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kEventStreamIdFieldNumber = 1,
    kExpectedVersionFieldNumber = 2,
    kRequireMasterFieldNumber = 4,
  };
  // repeated .es.message.NewEvent events = 3;
  int events_size() const;
  void clear_events();
  ::es::message::NewEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent >*
      mutable_events();
  const ::es::message::NewEvent& events(int index) const;
  ::es::message::NewEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent >&
      events() const;

  // required string event_stream_id = 1;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // required int64 expected_version = 2;
  bool has_expected_version() const;
  void clear_expected_version();
  ::PROTOBUF_NAMESPACE_ID::int64 expected_version() const;
  void set_expected_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required bool require_master = 4;
  bool has_require_master() const;
  void clear_require_master();
  bool require_master() const;
  void set_require_master(bool value);

  // @@protoc_insertion_point(class_scope:es.message.WriteEvents)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 expected_version_;
  bool require_master_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WriteEventsCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.WriteEventsCompleted) */ {
 public:
  WriteEventsCompleted();
  virtual ~WriteEventsCompleted();

  WriteEventsCompleted(const WriteEventsCompleted& from);
  WriteEventsCompleted(WriteEventsCompleted&& from) noexcept
    : WriteEventsCompleted() {
    *this = ::std::move(from);
  }

  inline WriteEventsCompleted& operator=(const WriteEventsCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteEventsCompleted& operator=(WriteEventsCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteEventsCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteEventsCompleted* internal_default_instance() {
    return reinterpret_cast<const WriteEventsCompleted*>(
               &_WriteEventsCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WriteEventsCompleted& a, WriteEventsCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteEventsCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteEventsCompleted* New() const final {
    return CreateMaybeMessage<WriteEventsCompleted>(nullptr);
  }

  WriteEventsCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteEventsCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteEventsCompleted& from);
  void MergeFrom(const WriteEventsCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteEventsCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.WriteEventsCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kFirstEventNumberFieldNumber = 3,
    kLastEventNumberFieldNumber = 4,
    kPreparePositionFieldNumber = 5,
    kCommitPositionFieldNumber = 6,
    kCurrentVersionFieldNumber = 7,
    kResultFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // required int64 first_event_number = 3;
  bool has_first_event_number() const;
  void clear_first_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 first_event_number() const;
  void set_first_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 last_event_number = 4;
  bool has_last_event_number() const;
  void clear_last_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number() const;
  void set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 prepare_position = 5;
  bool has_prepare_position() const;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 commit_position = 6;
  bool has_commit_position() const;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 current_version = 7;
  bool has_current_version() const;
  void clear_current_version();
  ::PROTOBUF_NAMESPACE_ID::int64 current_version() const;
  void set_current_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .es.message.OperationResult result = 1;
  bool has_result() const;
  void clear_result();
  ::es::message::OperationResult result() const;
  void set_result(::es::message::OperationResult value);

  // @@protoc_insertion_point(class_scope:es.message.WriteEventsCompleted)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 first_event_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_version_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DeleteStream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.DeleteStream) */ {
 public:
  DeleteStream();
  virtual ~DeleteStream();

  DeleteStream(const DeleteStream& from);
  DeleteStream(DeleteStream&& from) noexcept
    : DeleteStream() {
    *this = ::std::move(from);
  }

  inline DeleteStream& operator=(const DeleteStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStream& operator=(DeleteStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteStream* internal_default_instance() {
    return reinterpret_cast<const DeleteStream*>(
               &_DeleteStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteStream& a, DeleteStream& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStream* New() const final {
    return CreateMaybeMessage<DeleteStream>(nullptr);
  }

  DeleteStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteStream& from);
  void MergeFrom(const DeleteStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.DeleteStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventStreamIdFieldNumber = 1,
    kExpectedVersionFieldNumber = 2,
    kRequireMasterFieldNumber = 3,
    kHardDeleteFieldNumber = 4,
  };
  // required string event_stream_id = 1;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // required int64 expected_version = 2;
  bool has_expected_version() const;
  void clear_expected_version();
  ::PROTOBUF_NAMESPACE_ID::int64 expected_version() const;
  void set_expected_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required bool require_master = 3;
  bool has_require_master() const;
  void clear_require_master();
  bool require_master() const;
  void set_require_master(bool value);

  // optional bool hard_delete = 4;
  bool has_hard_delete() const;
  void clear_hard_delete();
  bool hard_delete() const;
  void set_hard_delete(bool value);

  // @@protoc_insertion_point(class_scope:es.message.DeleteStream)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 expected_version_;
  bool require_master_;
  bool hard_delete_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DeleteStreamCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.DeleteStreamCompleted) */ {
 public:
  DeleteStreamCompleted();
  virtual ~DeleteStreamCompleted();

  DeleteStreamCompleted(const DeleteStreamCompleted& from);
  DeleteStreamCompleted(DeleteStreamCompleted&& from) noexcept
    : DeleteStreamCompleted() {
    *this = ::std::move(from);
  }

  inline DeleteStreamCompleted& operator=(const DeleteStreamCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStreamCompleted& operator=(DeleteStreamCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteStreamCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteStreamCompleted* internal_default_instance() {
    return reinterpret_cast<const DeleteStreamCompleted*>(
               &_DeleteStreamCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteStreamCompleted& a, DeleteStreamCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStreamCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStreamCompleted* New() const final {
    return CreateMaybeMessage<DeleteStreamCompleted>(nullptr);
  }

  DeleteStreamCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStreamCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteStreamCompleted& from);
  void MergeFrom(const DeleteStreamCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStreamCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.DeleteStreamCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kPreparePositionFieldNumber = 3,
    kCommitPositionFieldNumber = 4,
    kResultFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // optional int64 prepare_position = 3;
  bool has_prepare_position() const;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 commit_position = 4;
  bool has_commit_position() const;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .es.message.OperationResult result = 1;
  bool has_result() const;
  void clear_result();
  ::es::message::OperationResult result() const;
  void set_result(::es::message::OperationResult value);

  // @@protoc_insertion_point(class_scope:es.message.DeleteStreamCompleted)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TransactionStart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.TransactionStart) */ {
 public:
  TransactionStart();
  virtual ~TransactionStart();

  TransactionStart(const TransactionStart& from);
  TransactionStart(TransactionStart&& from) noexcept
    : TransactionStart() {
    *this = ::std::move(from);
  }

  inline TransactionStart& operator=(const TransactionStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionStart& operator=(TransactionStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionStart* internal_default_instance() {
    return reinterpret_cast<const TransactionStart*>(
               &_TransactionStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransactionStart& a, TransactionStart& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionStart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionStart* New() const final {
    return CreateMaybeMessage<TransactionStart>(nullptr);
  }

  TransactionStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionStart& from);
  void MergeFrom(const TransactionStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.TransactionStart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventStreamIdFieldNumber = 1,
    kExpectedVersionFieldNumber = 2,
    kRequireMasterFieldNumber = 3,
  };
  // required string event_stream_id = 1;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // required int64 expected_version = 2;
  bool has_expected_version() const;
  void clear_expected_version();
  ::PROTOBUF_NAMESPACE_ID::int64 expected_version() const;
  void set_expected_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required bool require_master = 3;
  bool has_require_master() const;
  void clear_require_master();
  bool require_master() const;
  void set_require_master(bool value);

  // @@protoc_insertion_point(class_scope:es.message.TransactionStart)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 expected_version_;
  bool require_master_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TransactionStartCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.TransactionStartCompleted) */ {
 public:
  TransactionStartCompleted();
  virtual ~TransactionStartCompleted();

  TransactionStartCompleted(const TransactionStartCompleted& from);
  TransactionStartCompleted(TransactionStartCompleted&& from) noexcept
    : TransactionStartCompleted() {
    *this = ::std::move(from);
  }

  inline TransactionStartCompleted& operator=(const TransactionStartCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionStartCompleted& operator=(TransactionStartCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionStartCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionStartCompleted* internal_default_instance() {
    return reinterpret_cast<const TransactionStartCompleted*>(
               &_TransactionStartCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransactionStartCompleted& a, TransactionStartCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionStartCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionStartCompleted* New() const final {
    return CreateMaybeMessage<TransactionStartCompleted>(nullptr);
  }

  TransactionStartCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionStartCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionStartCompleted& from);
  void MergeFrom(const TransactionStartCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionStartCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.TransactionStartCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kTransactionIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // optional string message = 3;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // required int64 transaction_id = 1;
  bool has_transaction_id() const;
  void clear_transaction_id();
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id() const;
  void set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .es.message.OperationResult result = 2;
  bool has_result() const;
  void clear_result();
  ::es::message::OperationResult result() const;
  void set_result(::es::message::OperationResult value);

  // @@protoc_insertion_point(class_scope:es.message.TransactionStartCompleted)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TransactionWrite :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.TransactionWrite) */ {
 public:
  TransactionWrite();
  virtual ~TransactionWrite();

  TransactionWrite(const TransactionWrite& from);
  TransactionWrite(TransactionWrite&& from) noexcept
    : TransactionWrite() {
    *this = ::std::move(from);
  }

  inline TransactionWrite& operator=(const TransactionWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionWrite& operator=(TransactionWrite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionWrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionWrite* internal_default_instance() {
    return reinterpret_cast<const TransactionWrite*>(
               &_TransactionWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TransactionWrite& a, TransactionWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionWrite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionWrite* New() const final {
    return CreateMaybeMessage<TransactionWrite>(nullptr);
  }

  TransactionWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionWrite& from);
  void MergeFrom(const TransactionWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.TransactionWrite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kTransactionIdFieldNumber = 1,
    kRequireMasterFieldNumber = 3,
  };
  // repeated .es.message.NewEvent events = 2;
  int events_size() const;
  void clear_events();
  ::es::message::NewEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent >*
      mutable_events();
  const ::es::message::NewEvent& events(int index) const;
  ::es::message::NewEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent >&
      events() const;

  // required int64 transaction_id = 1;
  bool has_transaction_id() const;
  void clear_transaction_id();
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id() const;
  void set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required bool require_master = 3;
  bool has_require_master() const;
  void clear_require_master();
  bool require_master() const;
  void set_require_master(bool value);

  // @@protoc_insertion_point(class_scope:es.message.TransactionWrite)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id_;
  bool require_master_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TransactionWriteCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.TransactionWriteCompleted) */ {
 public:
  TransactionWriteCompleted();
  virtual ~TransactionWriteCompleted();

  TransactionWriteCompleted(const TransactionWriteCompleted& from);
  TransactionWriteCompleted(TransactionWriteCompleted&& from) noexcept
    : TransactionWriteCompleted() {
    *this = ::std::move(from);
  }

  inline TransactionWriteCompleted& operator=(const TransactionWriteCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionWriteCompleted& operator=(TransactionWriteCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionWriteCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionWriteCompleted* internal_default_instance() {
    return reinterpret_cast<const TransactionWriteCompleted*>(
               &_TransactionWriteCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TransactionWriteCompleted& a, TransactionWriteCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionWriteCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionWriteCompleted* New() const final {
    return CreateMaybeMessage<TransactionWriteCompleted>(nullptr);
  }

  TransactionWriteCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionWriteCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionWriteCompleted& from);
  void MergeFrom(const TransactionWriteCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionWriteCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.TransactionWriteCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kTransactionIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // optional string message = 3;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // required int64 transaction_id = 1;
  bool has_transaction_id() const;
  void clear_transaction_id();
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id() const;
  void set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .es.message.OperationResult result = 2;
  bool has_result() const;
  void clear_result();
  ::es::message::OperationResult result() const;
  void set_result(::es::message::OperationResult value);

  // @@protoc_insertion_point(class_scope:es.message.TransactionWriteCompleted)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TransactionCommit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.TransactionCommit) */ {
 public:
  TransactionCommit();
  virtual ~TransactionCommit();

  TransactionCommit(const TransactionCommit& from);
  TransactionCommit(TransactionCommit&& from) noexcept
    : TransactionCommit() {
    *this = ::std::move(from);
  }

  inline TransactionCommit& operator=(const TransactionCommit& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionCommit& operator=(TransactionCommit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionCommit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionCommit* internal_default_instance() {
    return reinterpret_cast<const TransactionCommit*>(
               &_TransactionCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TransactionCommit& a, TransactionCommit& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionCommit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionCommit* New() const final {
    return CreateMaybeMessage<TransactionCommit>(nullptr);
  }

  TransactionCommit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionCommit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionCommit& from);
  void MergeFrom(const TransactionCommit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionCommit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.TransactionCommit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
    kRequireMasterFieldNumber = 2,
  };
  // required int64 transaction_id = 1;
  bool has_transaction_id() const;
  void clear_transaction_id();
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id() const;
  void set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required bool require_master = 2;
  bool has_require_master() const;
  void clear_require_master();
  bool require_master() const;
  void set_require_master(bool value);

  // @@protoc_insertion_point(class_scope:es.message.TransactionCommit)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id_;
  bool require_master_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TransactionCommitCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.TransactionCommitCompleted) */ {
 public:
  TransactionCommitCompleted();
  virtual ~TransactionCommitCompleted();

  TransactionCommitCompleted(const TransactionCommitCompleted& from);
  TransactionCommitCompleted(TransactionCommitCompleted&& from) noexcept
    : TransactionCommitCompleted() {
    *this = ::std::move(from);
  }

  inline TransactionCommitCompleted& operator=(const TransactionCommitCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionCommitCompleted& operator=(TransactionCommitCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionCommitCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionCommitCompleted* internal_default_instance() {
    return reinterpret_cast<const TransactionCommitCompleted*>(
               &_TransactionCommitCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TransactionCommitCompleted& a, TransactionCommitCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionCommitCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionCommitCompleted* New() const final {
    return CreateMaybeMessage<TransactionCommitCompleted>(nullptr);
  }

  TransactionCommitCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionCommitCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionCommitCompleted& from);
  void MergeFrom(const TransactionCommitCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionCommitCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.TransactionCommitCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kTransactionIdFieldNumber = 1,
    kFirstEventNumberFieldNumber = 4,
    kLastEventNumberFieldNumber = 5,
    kPreparePositionFieldNumber = 6,
    kCommitPositionFieldNumber = 7,
    kResultFieldNumber = 2,
  };
  // optional string message = 3;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // required int64 transaction_id = 1;
  bool has_transaction_id() const;
  void clear_transaction_id();
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id() const;
  void set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 first_event_number = 4;
  bool has_first_event_number() const;
  void clear_first_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 first_event_number() const;
  void set_first_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 last_event_number = 5;
  bool has_last_event_number() const;
  void clear_last_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number() const;
  void set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 prepare_position = 6;
  bool has_prepare_position() const;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 commit_position = 7;
  bool has_commit_position() const;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .es.message.OperationResult result = 2;
  bool has_result() const;
  void clear_result();
  ::es::message::OperationResult result() const;
  void set_result(::es::message::OperationResult value);

  // @@protoc_insertion_point(class_scope:es.message.TransactionCommitCompleted)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 first_event_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ReadEvent) */ {
 public:
  ReadEvent();
  virtual ~ReadEvent();

  ReadEvent(const ReadEvent& from);
  ReadEvent(ReadEvent&& from) noexcept
    : ReadEvent() {
    *this = ::std::move(from);
  }

  inline ReadEvent& operator=(const ReadEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadEvent& operator=(ReadEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadEvent* internal_default_instance() {
    return reinterpret_cast<const ReadEvent*>(
               &_ReadEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReadEvent& a, ReadEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadEvent* New() const final {
    return CreateMaybeMessage<ReadEvent>(nullptr);
  }

  ReadEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadEvent& from);
  void MergeFrom(const ReadEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ReadEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventStreamIdFieldNumber = 1,
    kEventNumberFieldNumber = 2,
    kResolveLinkTosFieldNumber = 3,
    kRequireMasterFieldNumber = 4,
  };
  // required string event_stream_id = 1;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // required int64 event_number = 2;
  bool has_event_number() const;
  void clear_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 event_number() const;
  void set_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required bool resolve_link_tos = 3;
  bool has_resolve_link_tos() const;
  void clear_resolve_link_tos();
  bool resolve_link_tos() const;
  void set_resolve_link_tos(bool value);

  // required bool require_master = 4;
  bool has_require_master() const;
  void clear_require_master();
  bool require_master() const;
  void set_require_master(bool value);

  // @@protoc_insertion_point(class_scope:es.message.ReadEvent)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 event_number_;
  bool resolve_link_tos_;
  bool require_master_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadEventCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ReadEventCompleted) */ {
 public:
  ReadEventCompleted();
  virtual ~ReadEventCompleted();

  ReadEventCompleted(const ReadEventCompleted& from);
  ReadEventCompleted(ReadEventCompleted&& from) noexcept
    : ReadEventCompleted() {
    *this = ::std::move(from);
  }

  inline ReadEventCompleted& operator=(const ReadEventCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadEventCompleted& operator=(ReadEventCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadEventCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadEventCompleted* internal_default_instance() {
    return reinterpret_cast<const ReadEventCompleted*>(
               &_ReadEventCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReadEventCompleted& a, ReadEventCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadEventCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadEventCompleted* New() const final {
    return CreateMaybeMessage<ReadEventCompleted>(nullptr);
  }

  ReadEventCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadEventCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadEventCompleted& from);
  void MergeFrom(const ReadEventCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadEventCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ReadEventCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadEventCompleted_ReadEventResult ReadEventResult;
  static constexpr ReadEventResult Success =
    ReadEventCompleted_ReadEventResult_Success;
  static constexpr ReadEventResult NotFound =
    ReadEventCompleted_ReadEventResult_NotFound;
  static constexpr ReadEventResult NoStream =
    ReadEventCompleted_ReadEventResult_NoStream;
  static constexpr ReadEventResult StreamDeleted =
    ReadEventCompleted_ReadEventResult_StreamDeleted;
  static constexpr ReadEventResult Error =
    ReadEventCompleted_ReadEventResult_Error;
  static constexpr ReadEventResult AccessDenied =
    ReadEventCompleted_ReadEventResult_AccessDenied;
  static inline bool ReadEventResult_IsValid(int value) {
    return ReadEventCompleted_ReadEventResult_IsValid(value);
  }
  static constexpr ReadEventResult ReadEventResult_MIN =
    ReadEventCompleted_ReadEventResult_ReadEventResult_MIN;
  static constexpr ReadEventResult ReadEventResult_MAX =
    ReadEventCompleted_ReadEventResult_ReadEventResult_MAX;
  static constexpr int ReadEventResult_ARRAYSIZE =
    ReadEventCompleted_ReadEventResult_ReadEventResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReadEventResult_descriptor() {
    return ReadEventCompleted_ReadEventResult_descriptor();
  }
  template<typename T>
  static inline const std::string& ReadEventResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReadEventResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReadEventResult_Name.");
    return ReadEventCompleted_ReadEventResult_Name(enum_t_value);
  }
  static inline bool ReadEventResult_Parse(const std::string& name,
      ReadEventResult* value) {
    return ReadEventCompleted_ReadEventResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
    kEventFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional string error = 3;
  bool has_error() const;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);

  // required .es.message.ResolvedIndexedEvent event = 2;
  bool has_event() const;
  void clear_event();
  const ::es::message::ResolvedIndexedEvent& event() const;
  ::es::message::ResolvedIndexedEvent* release_event();
  ::es::message::ResolvedIndexedEvent* mutable_event();
  void set_allocated_event(::es::message::ResolvedIndexedEvent* event);

  // required .es.message.ReadEventCompleted.ReadEventResult result = 1;
  bool has_result() const;
  void clear_result();
  ::es::message::ReadEventCompleted_ReadEventResult result() const;
  void set_result(::es::message::ReadEventCompleted_ReadEventResult value);

  // @@protoc_insertion_point(class_scope:es.message.ReadEventCompleted)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::es::message::ResolvedIndexedEvent* event_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadStreamEvents :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ReadStreamEvents) */ {
 public:
  ReadStreamEvents();
  virtual ~ReadStreamEvents();

  ReadStreamEvents(const ReadStreamEvents& from);
  ReadStreamEvents(ReadStreamEvents&& from) noexcept
    : ReadStreamEvents() {
    *this = ::std::move(from);
  }

  inline ReadStreamEvents& operator=(const ReadStreamEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadStreamEvents& operator=(ReadStreamEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadStreamEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadStreamEvents* internal_default_instance() {
    return reinterpret_cast<const ReadStreamEvents*>(
               &_ReadStreamEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReadStreamEvents& a, ReadStreamEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadStreamEvents* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadStreamEvents* New() const final {
    return CreateMaybeMessage<ReadStreamEvents>(nullptr);
  }

  ReadStreamEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadStreamEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadStreamEvents& from);
  void MergeFrom(const ReadStreamEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadStreamEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ReadStreamEvents";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventStreamIdFieldNumber = 1,
    kFromEventNumberFieldNumber = 2,
    kMaxCountFieldNumber = 3,
    kResolveLinkTosFieldNumber = 4,
    kRequireMasterFieldNumber = 5,
  };
  // required string event_stream_id = 1;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // required int64 from_event_number = 2;
  bool has_from_event_number() const;
  void clear_from_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 from_event_number() const;
  void set_from_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 max_count = 3;
  bool has_max_count() const;
  void clear_max_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_count() const;
  void set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required bool resolve_link_tos = 4;
  bool has_resolve_link_tos() const;
  void clear_resolve_link_tos();
  bool resolve_link_tos() const;
  void set_resolve_link_tos(bool value);

  // required bool require_master = 5;
  bool has_require_master() const;
  void clear_require_master();
  bool require_master() const;
  void set_require_master(bool value);

  // @@protoc_insertion_point(class_scope:es.message.ReadStreamEvents)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_event_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_count_;
  bool resolve_link_tos_;
  bool require_master_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadStreamEventsCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ReadStreamEventsCompleted) */ {
 public:
  ReadStreamEventsCompleted();
  virtual ~ReadStreamEventsCompleted();

  ReadStreamEventsCompleted(const ReadStreamEventsCompleted& from);
  ReadStreamEventsCompleted(ReadStreamEventsCompleted&& from) noexcept
    : ReadStreamEventsCompleted() {
    *this = ::std::move(from);
  }

  inline ReadStreamEventsCompleted& operator=(const ReadStreamEventsCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadStreamEventsCompleted& operator=(ReadStreamEventsCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadStreamEventsCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadStreamEventsCompleted* internal_default_instance() {
    return reinterpret_cast<const ReadStreamEventsCompleted*>(
               &_ReadStreamEventsCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReadStreamEventsCompleted& a, ReadStreamEventsCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadStreamEventsCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadStreamEventsCompleted* New() const final {
    return CreateMaybeMessage<ReadStreamEventsCompleted>(nullptr);
  }

  ReadStreamEventsCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadStreamEventsCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadStreamEventsCompleted& from);
  void MergeFrom(const ReadStreamEventsCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadStreamEventsCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ReadStreamEventsCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadStreamEventsCompleted_ReadStreamResult ReadStreamResult;
  static constexpr ReadStreamResult Success =
    ReadStreamEventsCompleted_ReadStreamResult_Success;
  static constexpr ReadStreamResult NoStream =
    ReadStreamEventsCompleted_ReadStreamResult_NoStream;
  static constexpr ReadStreamResult StreamDeleted =
    ReadStreamEventsCompleted_ReadStreamResult_StreamDeleted;
  static constexpr ReadStreamResult NotModified =
    ReadStreamEventsCompleted_ReadStreamResult_NotModified;
  static constexpr ReadStreamResult Error =
    ReadStreamEventsCompleted_ReadStreamResult_Error;
  static constexpr ReadStreamResult AccessDenied =
    ReadStreamEventsCompleted_ReadStreamResult_AccessDenied;
  static inline bool ReadStreamResult_IsValid(int value) {
    return ReadStreamEventsCompleted_ReadStreamResult_IsValid(value);
  }
  static constexpr ReadStreamResult ReadStreamResult_MIN =
    ReadStreamEventsCompleted_ReadStreamResult_ReadStreamResult_MIN;
  static constexpr ReadStreamResult ReadStreamResult_MAX =
    ReadStreamEventsCompleted_ReadStreamResult_ReadStreamResult_MAX;
  static constexpr int ReadStreamResult_ARRAYSIZE =
    ReadStreamEventsCompleted_ReadStreamResult_ReadStreamResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReadStreamResult_descriptor() {
    return ReadStreamEventsCompleted_ReadStreamResult_descriptor();
  }
  template<typename T>
  static inline const std::string& ReadStreamResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReadStreamResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReadStreamResult_Name.");
    return ReadStreamEventsCompleted_ReadStreamResult_Name(enum_t_value);
  }
  static inline bool ReadStreamResult_Parse(const std::string& name,
      ReadStreamResult* value) {
    return ReadStreamEventsCompleted_ReadStreamResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
    kErrorFieldNumber = 7,
    kNextEventNumberFieldNumber = 3,
    kResultFieldNumber = 2,
    kIsEndOfStreamFieldNumber = 5,
    kLastEventNumberFieldNumber = 4,
    kLastCommitPositionFieldNumber = 6,
  };
  // repeated .es.message.ResolvedIndexedEvent events = 1;
  int events_size() const;
  void clear_events();
  ::es::message::ResolvedIndexedEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedIndexedEvent >*
      mutable_events();
  const ::es::message::ResolvedIndexedEvent& events(int index) const;
  ::es::message::ResolvedIndexedEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedIndexedEvent >&
      events() const;

  // optional string error = 7;
  bool has_error() const;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);

  // required int64 next_event_number = 3;
  bool has_next_event_number() const;
  void clear_next_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 next_event_number() const;
  void set_next_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .es.message.ReadStreamEventsCompleted.ReadStreamResult result = 2;
  bool has_result() const;
  void clear_result();
  ::es::message::ReadStreamEventsCompleted_ReadStreamResult result() const;
  void set_result(::es::message::ReadStreamEventsCompleted_ReadStreamResult value);

  // required bool is_end_of_stream = 5;
  bool has_is_end_of_stream() const;
  void clear_is_end_of_stream();
  bool is_end_of_stream() const;
  void set_is_end_of_stream(bool value);

  // required int64 last_event_number = 4;
  bool has_last_event_number() const;
  void clear_last_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number() const;
  void set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 last_commit_position = 6;
  bool has_last_commit_position() const;
  void clear_last_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position() const;
  void set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:es.message.ReadStreamEventsCompleted)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedIndexedEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_event_number_;
  int result_;
  bool is_end_of_stream_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadAllEvents :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ReadAllEvents) */ {
 public:
  ReadAllEvents();
  virtual ~ReadAllEvents();

  ReadAllEvents(const ReadAllEvents& from);
  ReadAllEvents(ReadAllEvents&& from) noexcept
    : ReadAllEvents() {
    *this = ::std::move(from);
  }

  inline ReadAllEvents& operator=(const ReadAllEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadAllEvents& operator=(ReadAllEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadAllEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadAllEvents* internal_default_instance() {
    return reinterpret_cast<const ReadAllEvents*>(
               &_ReadAllEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReadAllEvents& a, ReadAllEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadAllEvents* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadAllEvents* New() const final {
    return CreateMaybeMessage<ReadAllEvents>(nullptr);
  }

  ReadAllEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadAllEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadAllEvents& from);
  void MergeFrom(const ReadAllEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadAllEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ReadAllEvents";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
    kMaxCountFieldNumber = 3,
    kResolveLinkTosFieldNumber = 4,
    kRequireMasterFieldNumber = 5,
  };
  // required int64 commit_position = 1;
  bool has_commit_position() const;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 prepare_position = 2;
  bool has_prepare_position() const;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 max_count = 3;
  bool has_max_count() const;
  void clear_max_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_count() const;
  void set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required bool resolve_link_tos = 4;
  bool has_resolve_link_tos() const;
  void clear_resolve_link_tos();
  bool resolve_link_tos() const;
  void set_resolve_link_tos(bool value);

  // required bool require_master = 5;
  bool has_require_master() const;
  void clear_require_master();
  bool require_master() const;
  void set_require_master(bool value);

  // @@protoc_insertion_point(class_scope:es.message.ReadAllEvents)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_count_;
  bool resolve_link_tos_;
  bool require_master_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ReadAllEventsCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ReadAllEventsCompleted) */ {
 public:
  ReadAllEventsCompleted();
  virtual ~ReadAllEventsCompleted();

  ReadAllEventsCompleted(const ReadAllEventsCompleted& from);
  ReadAllEventsCompleted(ReadAllEventsCompleted&& from) noexcept
    : ReadAllEventsCompleted() {
    *this = ::std::move(from);
  }

  inline ReadAllEventsCompleted& operator=(const ReadAllEventsCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadAllEventsCompleted& operator=(ReadAllEventsCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadAllEventsCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadAllEventsCompleted* internal_default_instance() {
    return reinterpret_cast<const ReadAllEventsCompleted*>(
               &_ReadAllEventsCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ReadAllEventsCompleted& a, ReadAllEventsCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadAllEventsCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadAllEventsCompleted* New() const final {
    return CreateMaybeMessage<ReadAllEventsCompleted>(nullptr);
  }

  ReadAllEventsCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadAllEventsCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadAllEventsCompleted& from);
  void MergeFrom(const ReadAllEventsCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadAllEventsCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ReadAllEventsCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadAllEventsCompleted_ReadAllResult ReadAllResult;
  static constexpr ReadAllResult Success =
    ReadAllEventsCompleted_ReadAllResult_Success;
  static constexpr ReadAllResult NotModified =
    ReadAllEventsCompleted_ReadAllResult_NotModified;
  static constexpr ReadAllResult Error =
    ReadAllEventsCompleted_ReadAllResult_Error;
  static constexpr ReadAllResult AccessDenied =
    ReadAllEventsCompleted_ReadAllResult_AccessDenied;
  static inline bool ReadAllResult_IsValid(int value) {
    return ReadAllEventsCompleted_ReadAllResult_IsValid(value);
  }
  static constexpr ReadAllResult ReadAllResult_MIN =
    ReadAllEventsCompleted_ReadAllResult_ReadAllResult_MIN;
  static constexpr ReadAllResult ReadAllResult_MAX =
    ReadAllEventsCompleted_ReadAllResult_ReadAllResult_MAX;
  static constexpr int ReadAllResult_ARRAYSIZE =
    ReadAllEventsCompleted_ReadAllResult_ReadAllResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReadAllResult_descriptor() {
    return ReadAllEventsCompleted_ReadAllResult_descriptor();
  }
  template<typename T>
  static inline const std::string& ReadAllResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReadAllResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReadAllResult_Name.");
    return ReadAllEventsCompleted_ReadAllResult_Name(enum_t_value);
  }
  static inline bool ReadAllResult_Parse(const std::string& name,
      ReadAllResult* value) {
    return ReadAllEventsCompleted_ReadAllResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kErrorFieldNumber = 7,
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
    kNextCommitPositionFieldNumber = 4,
    kNextPreparePositionFieldNumber = 5,
    kResultFieldNumber = 6,
  };
  // repeated .es.message.ResolvedEvent events = 3;
  int events_size() const;
  void clear_events();
  ::es::message::ResolvedEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedEvent >*
      mutable_events();
  const ::es::message::ResolvedEvent& events(int index) const;
  ::es::message::ResolvedEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedEvent >&
      events() const;

  // optional string error = 7;
  bool has_error() const;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);

  // required int64 commit_position = 1;
  bool has_commit_position() const;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 prepare_position = 2;
  bool has_prepare_position() const;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 next_commit_position = 4;
  bool has_next_commit_position() const;
  void clear_next_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 next_commit_position() const;
  void set_next_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 next_prepare_position = 5;
  bool has_next_prepare_position() const;
  void clear_next_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::int64 next_prepare_position() const;
  void set_next_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .es.message.ReadAllEventsCompleted.ReadAllResult result = 6;
  bool has_result() const;
  void clear_result();
  ::es::message::ReadAllEventsCompleted_ReadAllResult result() const;
  void set_result(::es::message::ReadAllEventsCompleted_ReadAllResult value);

  // @@protoc_insertion_point(class_scope:es.message.ReadAllEventsCompleted)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 prepare_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_prepare_position_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CreatePersistentSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.CreatePersistentSubscription) */ {
 public:
  CreatePersistentSubscription();
  virtual ~CreatePersistentSubscription();

  CreatePersistentSubscription(const CreatePersistentSubscription& from);
  CreatePersistentSubscription(CreatePersistentSubscription&& from) noexcept
    : CreatePersistentSubscription() {
    *this = ::std::move(from);
  }

  inline CreatePersistentSubscription& operator=(const CreatePersistentSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePersistentSubscription& operator=(CreatePersistentSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePersistentSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePersistentSubscription* internal_default_instance() {
    return reinterpret_cast<const CreatePersistentSubscription*>(
               &_CreatePersistentSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CreatePersistentSubscription& a, CreatePersistentSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePersistentSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePersistentSubscription* New() const final {
    return CreateMaybeMessage<CreatePersistentSubscription>(nullptr);
  }

  CreatePersistentSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePersistentSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePersistentSubscription& from);
  void MergeFrom(const CreatePersistentSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePersistentSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.CreatePersistentSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionGroupNameFieldNumber = 1,
    kEventStreamIdFieldNumber = 2,
    kNamedConsumerStrategyFieldNumber = 16,
    kStartFromFieldNumber = 4,
    kMessageTimeoutMillisecondsFieldNumber = 5,
    kResolveLinkTosFieldNumber = 3,
    kRecordStatisticsFieldNumber = 6,
    kPreferRoundRobinFieldNumber = 11,
    kLiveBufferSizeFieldNumber = 7,
    kReadBatchSizeFieldNumber = 8,
    kBufferSizeFieldNumber = 9,
    kMaxRetryCountFieldNumber = 10,
    kCheckpointAfterTimeFieldNumber = 12,
    kCheckpointMaxCountFieldNumber = 13,
    kCheckpointMinCountFieldNumber = 14,
    kSubscriberMaxCountFieldNumber = 15,
  };
  // required string subscription_group_name = 1;
  bool has_subscription_group_name() const;
  void clear_subscription_group_name();
  const std::string& subscription_group_name() const;
  void set_subscription_group_name(const std::string& value);
  void set_subscription_group_name(std::string&& value);
  void set_subscription_group_name(const char* value);
  void set_subscription_group_name(const char* value, size_t size);
  std::string* mutable_subscription_group_name();
  std::string* release_subscription_group_name();
  void set_allocated_subscription_group_name(std::string* subscription_group_name);

  // required string event_stream_id = 2;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // optional string named_consumer_strategy = 16;
  bool has_named_consumer_strategy() const;
  void clear_named_consumer_strategy();
  const std::string& named_consumer_strategy() const;
  void set_named_consumer_strategy(const std::string& value);
  void set_named_consumer_strategy(std::string&& value);
  void set_named_consumer_strategy(const char* value);
  void set_named_consumer_strategy(const char* value, size_t size);
  std::string* mutable_named_consumer_strategy();
  std::string* release_named_consumer_strategy();
  void set_allocated_named_consumer_strategy(std::string* named_consumer_strategy);

  // required int64 start_from = 4;
  bool has_start_from() const;
  void clear_start_from();
  ::PROTOBUF_NAMESPACE_ID::int64 start_from() const;
  void set_start_from(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 message_timeout_milliseconds = 5;
  bool has_message_timeout_milliseconds() const;
  void clear_message_timeout_milliseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_milliseconds() const;
  void set_message_timeout_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required bool resolve_link_tos = 3;
  bool has_resolve_link_tos() const;
  void clear_resolve_link_tos();
  bool resolve_link_tos() const;
  void set_resolve_link_tos(bool value);

  // required bool record_statistics = 6;
  bool has_record_statistics() const;
  void clear_record_statistics();
  bool record_statistics() const;
  void set_record_statistics(bool value);

  // required bool prefer_round_robin = 11;
  bool has_prefer_round_robin() const;
  void clear_prefer_round_robin();
  bool prefer_round_robin() const;
  void set_prefer_round_robin(bool value);

  // required int32 live_buffer_size = 7;
  bool has_live_buffer_size() const;
  void clear_live_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size() const;
  void set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 read_batch_size = 8;
  bool has_read_batch_size() const;
  void clear_read_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size() const;
  void set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 buffer_size = 9;
  bool has_buffer_size() const;
  void clear_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size() const;
  void set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 max_retry_count = 10;
  bool has_max_retry_count() const;
  void clear_max_retry_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count() const;
  void set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 checkpoint_after_time = 12;
  bool has_checkpoint_after_time() const;
  void clear_checkpoint_after_time();
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_time() const;
  void set_checkpoint_after_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 checkpoint_max_count = 13;
  bool has_checkpoint_max_count() const;
  void clear_checkpoint_max_count();
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_max_count() const;
  void set_checkpoint_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 checkpoint_min_count = 14;
  bool has_checkpoint_min_count() const;
  void clear_checkpoint_min_count();
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_min_count() const;
  void set_checkpoint_min_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 subscriber_max_count = 15;
  bool has_subscriber_max_count() const;
  void clear_subscriber_max_count();
  ::PROTOBUF_NAMESPACE_ID::int32 subscriber_max_count() const;
  void set_subscriber_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:es.message.CreatePersistentSubscription)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr named_consumer_strategy_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_from_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_milliseconds_;
  bool resolve_link_tos_;
  bool record_statistics_;
  bool prefer_round_robin_;
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_max_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_min_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 subscriber_max_count_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DeletePersistentSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.DeletePersistentSubscription) */ {
 public:
  DeletePersistentSubscription();
  virtual ~DeletePersistentSubscription();

  DeletePersistentSubscription(const DeletePersistentSubscription& from);
  DeletePersistentSubscription(DeletePersistentSubscription&& from) noexcept
    : DeletePersistentSubscription() {
    *this = ::std::move(from);
  }

  inline DeletePersistentSubscription& operator=(const DeletePersistentSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePersistentSubscription& operator=(DeletePersistentSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePersistentSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePersistentSubscription* internal_default_instance() {
    return reinterpret_cast<const DeletePersistentSubscription*>(
               &_DeletePersistentSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeletePersistentSubscription& a, DeletePersistentSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePersistentSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePersistentSubscription* New() const final {
    return CreateMaybeMessage<DeletePersistentSubscription>(nullptr);
  }

  DeletePersistentSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePersistentSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePersistentSubscription& from);
  void MergeFrom(const DeletePersistentSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePersistentSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.DeletePersistentSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionGroupNameFieldNumber = 1,
    kEventStreamIdFieldNumber = 2,
  };
  // required string subscription_group_name = 1;
  bool has_subscription_group_name() const;
  void clear_subscription_group_name();
  const std::string& subscription_group_name() const;
  void set_subscription_group_name(const std::string& value);
  void set_subscription_group_name(std::string&& value);
  void set_subscription_group_name(const char* value);
  void set_subscription_group_name(const char* value, size_t size);
  std::string* mutable_subscription_group_name();
  std::string* release_subscription_group_name();
  void set_allocated_subscription_group_name(std::string* subscription_group_name);

  // required string event_stream_id = 2;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // @@protoc_insertion_point(class_scope:es.message.DeletePersistentSubscription)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UpdatePersistentSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.UpdatePersistentSubscription) */ {
 public:
  UpdatePersistentSubscription();
  virtual ~UpdatePersistentSubscription();

  UpdatePersistentSubscription(const UpdatePersistentSubscription& from);
  UpdatePersistentSubscription(UpdatePersistentSubscription&& from) noexcept
    : UpdatePersistentSubscription() {
    *this = ::std::move(from);
  }

  inline UpdatePersistentSubscription& operator=(const UpdatePersistentSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePersistentSubscription& operator=(UpdatePersistentSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePersistentSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePersistentSubscription* internal_default_instance() {
    return reinterpret_cast<const UpdatePersistentSubscription*>(
               &_UpdatePersistentSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdatePersistentSubscription& a, UpdatePersistentSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePersistentSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePersistentSubscription* New() const final {
    return CreateMaybeMessage<UpdatePersistentSubscription>(nullptr);
  }

  UpdatePersistentSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePersistentSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePersistentSubscription& from);
  void MergeFrom(const UpdatePersistentSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePersistentSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.UpdatePersistentSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionGroupNameFieldNumber = 1,
    kEventStreamIdFieldNumber = 2,
    kNamedConsumerStrategyFieldNumber = 16,
    kStartFromFieldNumber = 4,
    kMessageTimeoutMillisecondsFieldNumber = 5,
    kResolveLinkTosFieldNumber = 3,
    kRecordStatisticsFieldNumber = 6,
    kPreferRoundRobinFieldNumber = 11,
    kLiveBufferSizeFieldNumber = 7,
    kReadBatchSizeFieldNumber = 8,
    kBufferSizeFieldNumber = 9,
    kMaxRetryCountFieldNumber = 10,
    kCheckpointAfterTimeFieldNumber = 12,
    kCheckpointMaxCountFieldNumber = 13,
    kCheckpointMinCountFieldNumber = 14,
    kSubscriberMaxCountFieldNumber = 15,
  };
  // required string subscription_group_name = 1;
  bool has_subscription_group_name() const;
  void clear_subscription_group_name();
  const std::string& subscription_group_name() const;
  void set_subscription_group_name(const std::string& value);
  void set_subscription_group_name(std::string&& value);
  void set_subscription_group_name(const char* value);
  void set_subscription_group_name(const char* value, size_t size);
  std::string* mutable_subscription_group_name();
  std::string* release_subscription_group_name();
  void set_allocated_subscription_group_name(std::string* subscription_group_name);

  // required string event_stream_id = 2;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // optional string named_consumer_strategy = 16;
  bool has_named_consumer_strategy() const;
  void clear_named_consumer_strategy();
  const std::string& named_consumer_strategy() const;
  void set_named_consumer_strategy(const std::string& value);
  void set_named_consumer_strategy(std::string&& value);
  void set_named_consumer_strategy(const char* value);
  void set_named_consumer_strategy(const char* value, size_t size);
  std::string* mutable_named_consumer_strategy();
  std::string* release_named_consumer_strategy();
  void set_allocated_named_consumer_strategy(std::string* named_consumer_strategy);

  // required int64 start_from = 4;
  bool has_start_from() const;
  void clear_start_from();
  ::PROTOBUF_NAMESPACE_ID::int64 start_from() const;
  void set_start_from(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 message_timeout_milliseconds = 5;
  bool has_message_timeout_milliseconds() const;
  void clear_message_timeout_milliseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_milliseconds() const;
  void set_message_timeout_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required bool resolve_link_tos = 3;
  bool has_resolve_link_tos() const;
  void clear_resolve_link_tos();
  bool resolve_link_tos() const;
  void set_resolve_link_tos(bool value);

  // required bool record_statistics = 6;
  bool has_record_statistics() const;
  void clear_record_statistics();
  bool record_statistics() const;
  void set_record_statistics(bool value);

  // required bool prefer_round_robin = 11;
  bool has_prefer_round_robin() const;
  void clear_prefer_round_robin();
  bool prefer_round_robin() const;
  void set_prefer_round_robin(bool value);

  // required int32 live_buffer_size = 7;
  bool has_live_buffer_size() const;
  void clear_live_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size() const;
  void set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 read_batch_size = 8;
  bool has_read_batch_size() const;
  void clear_read_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size() const;
  void set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 buffer_size = 9;
  bool has_buffer_size() const;
  void clear_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size() const;
  void set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 max_retry_count = 10;
  bool has_max_retry_count() const;
  void clear_max_retry_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count() const;
  void set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 checkpoint_after_time = 12;
  bool has_checkpoint_after_time() const;
  void clear_checkpoint_after_time();
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_time() const;
  void set_checkpoint_after_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 checkpoint_max_count = 13;
  bool has_checkpoint_max_count() const;
  void clear_checkpoint_max_count();
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_max_count() const;
  void set_checkpoint_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 checkpoint_min_count = 14;
  bool has_checkpoint_min_count() const;
  void clear_checkpoint_min_count();
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_min_count() const;
  void set_checkpoint_min_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 subscriber_max_count = 15;
  bool has_subscriber_max_count() const;
  void clear_subscriber_max_count();
  ::PROTOBUF_NAMESPACE_ID::int32 subscriber_max_count() const;
  void set_subscriber_max_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:es.message.UpdatePersistentSubscription)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr named_consumer_strategy_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_from_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_milliseconds_;
  bool resolve_link_tos_;
  bool record_statistics_;
  bool prefer_round_robin_;
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_max_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_min_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 subscriber_max_count_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UpdatePersistentSubscriptionCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.UpdatePersistentSubscriptionCompleted) */ {
 public:
  UpdatePersistentSubscriptionCompleted();
  virtual ~UpdatePersistentSubscriptionCompleted();

  UpdatePersistentSubscriptionCompleted(const UpdatePersistentSubscriptionCompleted& from);
  UpdatePersistentSubscriptionCompleted(UpdatePersistentSubscriptionCompleted&& from) noexcept
    : UpdatePersistentSubscriptionCompleted() {
    *this = ::std::move(from);
  }

  inline UpdatePersistentSubscriptionCompleted& operator=(const UpdatePersistentSubscriptionCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePersistentSubscriptionCompleted& operator=(UpdatePersistentSubscriptionCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePersistentSubscriptionCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePersistentSubscriptionCompleted* internal_default_instance() {
    return reinterpret_cast<const UpdatePersistentSubscriptionCompleted*>(
               &_UpdatePersistentSubscriptionCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdatePersistentSubscriptionCompleted& a, UpdatePersistentSubscriptionCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePersistentSubscriptionCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePersistentSubscriptionCompleted* New() const final {
    return CreateMaybeMessage<UpdatePersistentSubscriptionCompleted>(nullptr);
  }

  UpdatePersistentSubscriptionCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePersistentSubscriptionCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePersistentSubscriptionCompleted& from);
  void MergeFrom(const UpdatePersistentSubscriptionCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePersistentSubscriptionCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.UpdatePersistentSubscriptionCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionResult;
  static constexpr UpdatePersistentSubscriptionResult Success =
    UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Success;
  static constexpr UpdatePersistentSubscriptionResult DoesNotExist =
    UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_DoesNotExist;
  static constexpr UpdatePersistentSubscriptionResult Fail =
    UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Fail;
  static constexpr UpdatePersistentSubscriptionResult AccessDenied =
    UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_AccessDenied;
  static inline bool UpdatePersistentSubscriptionResult_IsValid(int value) {
    return UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_IsValid(value);
  }
  static constexpr UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionResult_MIN =
    UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_UpdatePersistentSubscriptionResult_MIN;
  static constexpr UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionResult_MAX =
    UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_UpdatePersistentSubscriptionResult_MAX;
  static constexpr int UpdatePersistentSubscriptionResult_ARRAYSIZE =
    UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_UpdatePersistentSubscriptionResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UpdatePersistentSubscriptionResult_descriptor() {
    return UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_descriptor();
  }
  template<typename T>
  static inline const std::string& UpdatePersistentSubscriptionResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UpdatePersistentSubscriptionResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UpdatePersistentSubscriptionResult_Name.");
    return UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Name(enum_t_value);
  }
  static inline bool UpdatePersistentSubscriptionResult_Parse(const std::string& name,
      UpdatePersistentSubscriptionResult* value) {
    return UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // required .es.message.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult result = 1;
  bool has_result() const;
  void clear_result();
  ::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult result() const;
  void set_result(::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult value);

  // @@protoc_insertion_point(class_scope:es.message.UpdatePersistentSubscriptionCompleted)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CreatePersistentSubscriptionCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.CreatePersistentSubscriptionCompleted) */ {
 public:
  CreatePersistentSubscriptionCompleted();
  virtual ~CreatePersistentSubscriptionCompleted();

  CreatePersistentSubscriptionCompleted(const CreatePersistentSubscriptionCompleted& from);
  CreatePersistentSubscriptionCompleted(CreatePersistentSubscriptionCompleted&& from) noexcept
    : CreatePersistentSubscriptionCompleted() {
    *this = ::std::move(from);
  }

  inline CreatePersistentSubscriptionCompleted& operator=(const CreatePersistentSubscriptionCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePersistentSubscriptionCompleted& operator=(CreatePersistentSubscriptionCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePersistentSubscriptionCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePersistentSubscriptionCompleted* internal_default_instance() {
    return reinterpret_cast<const CreatePersistentSubscriptionCompleted*>(
               &_CreatePersistentSubscriptionCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CreatePersistentSubscriptionCompleted& a, CreatePersistentSubscriptionCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePersistentSubscriptionCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePersistentSubscriptionCompleted* New() const final {
    return CreateMaybeMessage<CreatePersistentSubscriptionCompleted>(nullptr);
  }

  CreatePersistentSubscriptionCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePersistentSubscriptionCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePersistentSubscriptionCompleted& from);
  void MergeFrom(const CreatePersistentSubscriptionCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePersistentSubscriptionCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.CreatePersistentSubscriptionCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionResult;
  static constexpr CreatePersistentSubscriptionResult Success =
    CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Success;
  static constexpr CreatePersistentSubscriptionResult AlreadyExists =
    CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_AlreadyExists;
  static constexpr CreatePersistentSubscriptionResult Fail =
    CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Fail;
  static constexpr CreatePersistentSubscriptionResult AccessDenied =
    CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_AccessDenied;
  static inline bool CreatePersistentSubscriptionResult_IsValid(int value) {
    return CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_IsValid(value);
  }
  static constexpr CreatePersistentSubscriptionResult CreatePersistentSubscriptionResult_MIN =
    CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_CreatePersistentSubscriptionResult_MIN;
  static constexpr CreatePersistentSubscriptionResult CreatePersistentSubscriptionResult_MAX =
    CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_CreatePersistentSubscriptionResult_MAX;
  static constexpr int CreatePersistentSubscriptionResult_ARRAYSIZE =
    CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_CreatePersistentSubscriptionResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CreatePersistentSubscriptionResult_descriptor() {
    return CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_descriptor();
  }
  template<typename T>
  static inline const std::string& CreatePersistentSubscriptionResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CreatePersistentSubscriptionResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CreatePersistentSubscriptionResult_Name.");
    return CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Name(enum_t_value);
  }
  static inline bool CreatePersistentSubscriptionResult_Parse(const std::string& name,
      CreatePersistentSubscriptionResult* value) {
    return CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // required .es.message.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult result = 1;
  bool has_result() const;
  void clear_result();
  ::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult result() const;
  void set_result(::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult value);

  // @@protoc_insertion_point(class_scope:es.message.CreatePersistentSubscriptionCompleted)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DeletePersistentSubscriptionCompleted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.DeletePersistentSubscriptionCompleted) */ {
 public:
  DeletePersistentSubscriptionCompleted();
  virtual ~DeletePersistentSubscriptionCompleted();

  DeletePersistentSubscriptionCompleted(const DeletePersistentSubscriptionCompleted& from);
  DeletePersistentSubscriptionCompleted(DeletePersistentSubscriptionCompleted&& from) noexcept
    : DeletePersistentSubscriptionCompleted() {
    *this = ::std::move(from);
  }

  inline DeletePersistentSubscriptionCompleted& operator=(const DeletePersistentSubscriptionCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePersistentSubscriptionCompleted& operator=(DeletePersistentSubscriptionCompleted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePersistentSubscriptionCompleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePersistentSubscriptionCompleted* internal_default_instance() {
    return reinterpret_cast<const DeletePersistentSubscriptionCompleted*>(
               &_DeletePersistentSubscriptionCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeletePersistentSubscriptionCompleted& a, DeletePersistentSubscriptionCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePersistentSubscriptionCompleted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePersistentSubscriptionCompleted* New() const final {
    return CreateMaybeMessage<DeletePersistentSubscriptionCompleted>(nullptr);
  }

  DeletePersistentSubscriptionCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePersistentSubscriptionCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePersistentSubscriptionCompleted& from);
  void MergeFrom(const DeletePersistentSubscriptionCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePersistentSubscriptionCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.DeletePersistentSubscriptionCompleted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionResult;
  static constexpr DeletePersistentSubscriptionResult Success =
    DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Success;
  static constexpr DeletePersistentSubscriptionResult DoesNotExist =
    DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_DoesNotExist;
  static constexpr DeletePersistentSubscriptionResult Fail =
    DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Fail;
  static constexpr DeletePersistentSubscriptionResult AccessDenied =
    DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_AccessDenied;
  static inline bool DeletePersistentSubscriptionResult_IsValid(int value) {
    return DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_IsValid(value);
  }
  static constexpr DeletePersistentSubscriptionResult DeletePersistentSubscriptionResult_MIN =
    DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_DeletePersistentSubscriptionResult_MIN;
  static constexpr DeletePersistentSubscriptionResult DeletePersistentSubscriptionResult_MAX =
    DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_DeletePersistentSubscriptionResult_MAX;
  static constexpr int DeletePersistentSubscriptionResult_ARRAYSIZE =
    DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_DeletePersistentSubscriptionResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeletePersistentSubscriptionResult_descriptor() {
    return DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_descriptor();
  }
  template<typename T>
  static inline const std::string& DeletePersistentSubscriptionResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeletePersistentSubscriptionResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeletePersistentSubscriptionResult_Name.");
    return DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Name(enum_t_value);
  }
  static inline bool DeletePersistentSubscriptionResult_Parse(const std::string& name,
      DeletePersistentSubscriptionResult* value) {
    return DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // required .es.message.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult result = 1;
  bool has_result() const;
  void clear_result();
  ::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult result() const;
  void set_result(::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult value);

  // @@protoc_insertion_point(class_scope:es.message.DeletePersistentSubscriptionCompleted)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ConnectToPersistentSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ConnectToPersistentSubscription) */ {
 public:
  ConnectToPersistentSubscription();
  virtual ~ConnectToPersistentSubscription();

  ConnectToPersistentSubscription(const ConnectToPersistentSubscription& from);
  ConnectToPersistentSubscription(ConnectToPersistentSubscription&& from) noexcept
    : ConnectToPersistentSubscription() {
    *this = ::std::move(from);
  }

  inline ConnectToPersistentSubscription& operator=(const ConnectToPersistentSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectToPersistentSubscription& operator=(ConnectToPersistentSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectToPersistentSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectToPersistentSubscription* internal_default_instance() {
    return reinterpret_cast<const ConnectToPersistentSubscription*>(
               &_ConnectToPersistentSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ConnectToPersistentSubscription& a, ConnectToPersistentSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectToPersistentSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectToPersistentSubscription* New() const final {
    return CreateMaybeMessage<ConnectToPersistentSubscription>(nullptr);
  }

  ConnectToPersistentSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectToPersistentSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectToPersistentSubscription& from);
  void MergeFrom(const ConnectToPersistentSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectToPersistentSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ConnectToPersistentSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionIdFieldNumber = 1,
    kEventStreamIdFieldNumber = 2,
    kAllowedInFlightMessagesFieldNumber = 3,
  };
  // required string subscription_id = 1;
  bool has_subscription_id() const;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);

  // required string event_stream_id = 2;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // required int32 allowed_in_flight_messages = 3;
  bool has_allowed_in_flight_messages() const;
  void clear_allowed_in_flight_messages();
  ::PROTOBUF_NAMESPACE_ID::int32 allowed_in_flight_messages() const;
  void set_allowed_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:es.message.ConnectToPersistentSubscription)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 allowed_in_flight_messages_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PersistentSubscriptionAckEvents :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.PersistentSubscriptionAckEvents) */ {
 public:
  PersistentSubscriptionAckEvents();
  virtual ~PersistentSubscriptionAckEvents();

  PersistentSubscriptionAckEvents(const PersistentSubscriptionAckEvents& from);
  PersistentSubscriptionAckEvents(PersistentSubscriptionAckEvents&& from) noexcept
    : PersistentSubscriptionAckEvents() {
    *this = ::std::move(from);
  }

  inline PersistentSubscriptionAckEvents& operator=(const PersistentSubscriptionAckEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentSubscriptionAckEvents& operator=(PersistentSubscriptionAckEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistentSubscriptionAckEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistentSubscriptionAckEvents* internal_default_instance() {
    return reinterpret_cast<const PersistentSubscriptionAckEvents*>(
               &_PersistentSubscriptionAckEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PersistentSubscriptionAckEvents& a, PersistentSubscriptionAckEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentSubscriptionAckEvents* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistentSubscriptionAckEvents* New() const final {
    return CreateMaybeMessage<PersistentSubscriptionAckEvents>(nullptr);
  }

  PersistentSubscriptionAckEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistentSubscriptionAckEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistentSubscriptionAckEvents& from);
  void MergeFrom(const PersistentSubscriptionAckEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistentSubscriptionAckEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.PersistentSubscriptionAckEvents";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessedEventIdsFieldNumber = 2,
    kSubscriptionIdFieldNumber = 1,
  };
  // repeated bytes processed_event_ids = 2;
  int processed_event_ids_size() const;
  void clear_processed_event_ids();
  const std::string& processed_event_ids(int index) const;
  std::string* mutable_processed_event_ids(int index);
  void set_processed_event_ids(int index, const std::string& value);
  void set_processed_event_ids(int index, std::string&& value);
  void set_processed_event_ids(int index, const char* value);
  void set_processed_event_ids(int index, const void* value, size_t size);
  std::string* add_processed_event_ids();
  void add_processed_event_ids(const std::string& value);
  void add_processed_event_ids(std::string&& value);
  void add_processed_event_ids(const char* value);
  void add_processed_event_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processed_event_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processed_event_ids();

  // required string subscription_id = 1;
  bool has_subscription_id() const;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);

  // @@protoc_insertion_point(class_scope:es.message.PersistentSubscriptionAckEvents)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processed_event_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PersistentSubscriptionNakEvents :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.PersistentSubscriptionNakEvents) */ {
 public:
  PersistentSubscriptionNakEvents();
  virtual ~PersistentSubscriptionNakEvents();

  PersistentSubscriptionNakEvents(const PersistentSubscriptionNakEvents& from);
  PersistentSubscriptionNakEvents(PersistentSubscriptionNakEvents&& from) noexcept
    : PersistentSubscriptionNakEvents() {
    *this = ::std::move(from);
  }

  inline PersistentSubscriptionNakEvents& operator=(const PersistentSubscriptionNakEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentSubscriptionNakEvents& operator=(PersistentSubscriptionNakEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistentSubscriptionNakEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistentSubscriptionNakEvents* internal_default_instance() {
    return reinterpret_cast<const PersistentSubscriptionNakEvents*>(
               &_PersistentSubscriptionNakEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PersistentSubscriptionNakEvents& a, PersistentSubscriptionNakEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentSubscriptionNakEvents* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistentSubscriptionNakEvents* New() const final {
    return CreateMaybeMessage<PersistentSubscriptionNakEvents>(nullptr);
  }

  PersistentSubscriptionNakEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistentSubscriptionNakEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistentSubscriptionNakEvents& from);
  void MergeFrom(const PersistentSubscriptionNakEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistentSubscriptionNakEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.PersistentSubscriptionNakEvents";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PersistentSubscriptionNakEvents_NakAction NakAction;
  static constexpr NakAction Unknown =
    PersistentSubscriptionNakEvents_NakAction_Unknown;
  static constexpr NakAction Park =
    PersistentSubscriptionNakEvents_NakAction_Park;
  static constexpr NakAction Retry =
    PersistentSubscriptionNakEvents_NakAction_Retry;
  static constexpr NakAction Skip =
    PersistentSubscriptionNakEvents_NakAction_Skip;
  static constexpr NakAction Stop =
    PersistentSubscriptionNakEvents_NakAction_Stop;
  static inline bool NakAction_IsValid(int value) {
    return PersistentSubscriptionNakEvents_NakAction_IsValid(value);
  }
  static constexpr NakAction NakAction_MIN =
    PersistentSubscriptionNakEvents_NakAction_NakAction_MIN;
  static constexpr NakAction NakAction_MAX =
    PersistentSubscriptionNakEvents_NakAction_NakAction_MAX;
  static constexpr int NakAction_ARRAYSIZE =
    PersistentSubscriptionNakEvents_NakAction_NakAction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NakAction_descriptor() {
    return PersistentSubscriptionNakEvents_NakAction_descriptor();
  }
  template<typename T>
  static inline const std::string& NakAction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NakAction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NakAction_Name.");
    return PersistentSubscriptionNakEvents_NakAction_Name(enum_t_value);
  }
  static inline bool NakAction_Parse(const std::string& name,
      NakAction* value) {
    return PersistentSubscriptionNakEvents_NakAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProcessedEventIdsFieldNumber = 2,
    kSubscriptionIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // repeated bytes processed_event_ids = 2;
  int processed_event_ids_size() const;
  void clear_processed_event_ids();
  const std::string& processed_event_ids(int index) const;
  std::string* mutable_processed_event_ids(int index);
  void set_processed_event_ids(int index, const std::string& value);
  void set_processed_event_ids(int index, std::string&& value);
  void set_processed_event_ids(int index, const char* value);
  void set_processed_event_ids(int index, const void* value, size_t size);
  std::string* add_processed_event_ids();
  void add_processed_event_ids(const std::string& value);
  void add_processed_event_ids(std::string&& value);
  void add_processed_event_ids(const char* value);
  void add_processed_event_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processed_event_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processed_event_ids();

  // required string subscription_id = 1;
  bool has_subscription_id() const;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);

  // optional string message = 3;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // required .es.message.PersistentSubscriptionNakEvents.NakAction action = 4;
  bool has_action() const;
  void clear_action();
  ::es::message::PersistentSubscriptionNakEvents_NakAction action() const;
  void set_action(::es::message::PersistentSubscriptionNakEvents_NakAction value);

  // @@protoc_insertion_point(class_scope:es.message.PersistentSubscriptionNakEvents)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processed_event_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int action_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PersistentSubscriptionConfirmation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.PersistentSubscriptionConfirmation) */ {
 public:
  PersistentSubscriptionConfirmation();
  virtual ~PersistentSubscriptionConfirmation();

  PersistentSubscriptionConfirmation(const PersistentSubscriptionConfirmation& from);
  PersistentSubscriptionConfirmation(PersistentSubscriptionConfirmation&& from) noexcept
    : PersistentSubscriptionConfirmation() {
    *this = ::std::move(from);
  }

  inline PersistentSubscriptionConfirmation& operator=(const PersistentSubscriptionConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentSubscriptionConfirmation& operator=(PersistentSubscriptionConfirmation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistentSubscriptionConfirmation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistentSubscriptionConfirmation* internal_default_instance() {
    return reinterpret_cast<const PersistentSubscriptionConfirmation*>(
               &_PersistentSubscriptionConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PersistentSubscriptionConfirmation& a, PersistentSubscriptionConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentSubscriptionConfirmation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistentSubscriptionConfirmation* New() const final {
    return CreateMaybeMessage<PersistentSubscriptionConfirmation>(nullptr);
  }

  PersistentSubscriptionConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistentSubscriptionConfirmation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistentSubscriptionConfirmation& from);
  void MergeFrom(const PersistentSubscriptionConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistentSubscriptionConfirmation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.PersistentSubscriptionConfirmation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionIdFieldNumber = 2,
    kLastCommitPositionFieldNumber = 1,
    kLastEventNumberFieldNumber = 3,
  };
  // required string subscription_id = 2;
  bool has_subscription_id() const;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);

  // required int64 last_commit_position = 1;
  bool has_last_commit_position() const;
  void clear_last_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position() const;
  void set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_event_number = 3;
  bool has_last_event_number() const;
  void clear_last_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number() const;
  void set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:es.message.PersistentSubscriptionConfirmation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PersistentSubscriptionStreamEventAppeared :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.PersistentSubscriptionStreamEventAppeared) */ {
 public:
  PersistentSubscriptionStreamEventAppeared();
  virtual ~PersistentSubscriptionStreamEventAppeared();

  PersistentSubscriptionStreamEventAppeared(const PersistentSubscriptionStreamEventAppeared& from);
  PersistentSubscriptionStreamEventAppeared(PersistentSubscriptionStreamEventAppeared&& from) noexcept
    : PersistentSubscriptionStreamEventAppeared() {
    *this = ::std::move(from);
  }

  inline PersistentSubscriptionStreamEventAppeared& operator=(const PersistentSubscriptionStreamEventAppeared& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentSubscriptionStreamEventAppeared& operator=(PersistentSubscriptionStreamEventAppeared&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistentSubscriptionStreamEventAppeared& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistentSubscriptionStreamEventAppeared* internal_default_instance() {
    return reinterpret_cast<const PersistentSubscriptionStreamEventAppeared*>(
               &_PersistentSubscriptionStreamEventAppeared_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PersistentSubscriptionStreamEventAppeared& a, PersistentSubscriptionStreamEventAppeared& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentSubscriptionStreamEventAppeared* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistentSubscriptionStreamEventAppeared* New() const final {
    return CreateMaybeMessage<PersistentSubscriptionStreamEventAppeared>(nullptr);
  }

  PersistentSubscriptionStreamEventAppeared* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistentSubscriptionStreamEventAppeared>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistentSubscriptionStreamEventAppeared& from);
  void MergeFrom(const PersistentSubscriptionStreamEventAppeared& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistentSubscriptionStreamEventAppeared* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.PersistentSubscriptionStreamEventAppeared";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kRetryCountFieldNumber = 2,
  };
  // required .es.message.ResolvedIndexedEvent event = 1;
  bool has_event() const;
  void clear_event();
  const ::es::message::ResolvedIndexedEvent& event() const;
  ::es::message::ResolvedIndexedEvent* release_event();
  ::es::message::ResolvedIndexedEvent* mutable_event();
  void set_allocated_event(::es::message::ResolvedIndexedEvent* event);

  // optional int32 retryCount = 2;
  bool has_retrycount() const;
  void clear_retrycount();
  ::PROTOBUF_NAMESPACE_ID::int32 retrycount() const;
  void set_retrycount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:es.message.PersistentSubscriptionStreamEventAppeared)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::es::message::ResolvedIndexedEvent* event_;
  ::PROTOBUF_NAMESPACE_ID::int32 retrycount_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SubscribeToStream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.SubscribeToStream) */ {
 public:
  SubscribeToStream();
  virtual ~SubscribeToStream();

  SubscribeToStream(const SubscribeToStream& from);
  SubscribeToStream(SubscribeToStream&& from) noexcept
    : SubscribeToStream() {
    *this = ::std::move(from);
  }

  inline SubscribeToStream& operator=(const SubscribeToStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeToStream& operator=(SubscribeToStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeToStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeToStream* internal_default_instance() {
    return reinterpret_cast<const SubscribeToStream*>(
               &_SubscribeToStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SubscribeToStream& a, SubscribeToStream& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeToStream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeToStream* New() const final {
    return CreateMaybeMessage<SubscribeToStream>(nullptr);
  }

  SubscribeToStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeToStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeToStream& from);
  void MergeFrom(const SubscribeToStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeToStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.SubscribeToStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventStreamIdFieldNumber = 1,
    kResolveLinkTosFieldNumber = 2,
  };
  // required string event_stream_id = 1;
  bool has_event_stream_id() const;
  void clear_event_stream_id();
  const std::string& event_stream_id() const;
  void set_event_stream_id(const std::string& value);
  void set_event_stream_id(std::string&& value);
  void set_event_stream_id(const char* value);
  void set_event_stream_id(const char* value, size_t size);
  std::string* mutable_event_stream_id();
  std::string* release_event_stream_id();
  void set_allocated_event_stream_id(std::string* event_stream_id);

  // required bool resolve_link_tos = 2;
  bool has_resolve_link_tos() const;
  void clear_resolve_link_tos();
  bool resolve_link_tos() const;
  void set_resolve_link_tos(bool value);

  // @@protoc_insertion_point(class_scope:es.message.SubscribeToStream)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stream_id_;
  bool resolve_link_tos_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionConfirmation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.SubscriptionConfirmation) */ {
 public:
  SubscriptionConfirmation();
  virtual ~SubscriptionConfirmation();

  SubscriptionConfirmation(const SubscriptionConfirmation& from);
  SubscriptionConfirmation(SubscriptionConfirmation&& from) noexcept
    : SubscriptionConfirmation() {
    *this = ::std::move(from);
  }

  inline SubscriptionConfirmation& operator=(const SubscriptionConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionConfirmation& operator=(SubscriptionConfirmation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionConfirmation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionConfirmation* internal_default_instance() {
    return reinterpret_cast<const SubscriptionConfirmation*>(
               &_SubscriptionConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SubscriptionConfirmation& a, SubscriptionConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionConfirmation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionConfirmation* New() const final {
    return CreateMaybeMessage<SubscriptionConfirmation>(nullptr);
  }

  SubscriptionConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionConfirmation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionConfirmation& from);
  void MergeFrom(const SubscriptionConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionConfirmation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.SubscriptionConfirmation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastCommitPositionFieldNumber = 1,
    kLastEventNumberFieldNumber = 2,
  };
  // required int64 last_commit_position = 1;
  bool has_last_commit_position() const;
  void clear_last_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position() const;
  void set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_event_number = 2;
  bool has_last_event_number() const;
  void clear_last_event_number();
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number() const;
  void set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:es.message.SubscriptionConfirmation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_number_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class StreamEventAppeared :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.StreamEventAppeared) */ {
 public:
  StreamEventAppeared();
  virtual ~StreamEventAppeared();

  StreamEventAppeared(const StreamEventAppeared& from);
  StreamEventAppeared(StreamEventAppeared&& from) noexcept
    : StreamEventAppeared() {
    *this = ::std::move(from);
  }

  inline StreamEventAppeared& operator=(const StreamEventAppeared& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventAppeared& operator=(StreamEventAppeared&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamEventAppeared& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamEventAppeared* internal_default_instance() {
    return reinterpret_cast<const StreamEventAppeared*>(
               &_StreamEventAppeared_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(StreamEventAppeared& a, StreamEventAppeared& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamEventAppeared* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamEventAppeared* New() const final {
    return CreateMaybeMessage<StreamEventAppeared>(nullptr);
  }

  StreamEventAppeared* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamEventAppeared>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamEventAppeared& from);
  void MergeFrom(const StreamEventAppeared& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamEventAppeared* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.StreamEventAppeared";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // required .es.message.ResolvedEvent event = 1;
  bool has_event() const;
  void clear_event();
  const ::es::message::ResolvedEvent& event() const;
  ::es::message::ResolvedEvent* release_event();
  ::es::message::ResolvedEvent* mutable_event();
  void set_allocated_event(::es::message::ResolvedEvent* event);

  // @@protoc_insertion_point(class_scope:es.message.StreamEventAppeared)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::es::message::ResolvedEvent* event_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeFromStream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.UnsubscribeFromStream) */ {
 public:
  UnsubscribeFromStream();
  virtual ~UnsubscribeFromStream();

  UnsubscribeFromStream(const UnsubscribeFromStream& from);
  UnsubscribeFromStream(UnsubscribeFromStream&& from) noexcept
    : UnsubscribeFromStream() {
    *this = ::std::move(from);
  }

  inline UnsubscribeFromStream& operator=(const UnsubscribeFromStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeFromStream& operator=(UnsubscribeFromStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeFromStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeFromStream* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeFromStream*>(
               &_UnsubscribeFromStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UnsubscribeFromStream& a, UnsubscribeFromStream& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeFromStream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeFromStream* New() const final {
    return CreateMaybeMessage<UnsubscribeFromStream>(nullptr);
  }

  UnsubscribeFromStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeFromStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeFromStream& from);
  void MergeFrom(const UnsubscribeFromStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeFromStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.UnsubscribeFromStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:es.message.UnsubscribeFromStream)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionDropped :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.SubscriptionDropped) */ {
 public:
  SubscriptionDropped();
  virtual ~SubscriptionDropped();

  SubscriptionDropped(const SubscriptionDropped& from);
  SubscriptionDropped(SubscriptionDropped&& from) noexcept
    : SubscriptionDropped() {
    *this = ::std::move(from);
  }

  inline SubscriptionDropped& operator=(const SubscriptionDropped& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionDropped& operator=(SubscriptionDropped&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionDropped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionDropped* internal_default_instance() {
    return reinterpret_cast<const SubscriptionDropped*>(
               &_SubscriptionDropped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SubscriptionDropped& a, SubscriptionDropped& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionDropped* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionDropped* New() const final {
    return CreateMaybeMessage<SubscriptionDropped>(nullptr);
  }

  SubscriptionDropped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionDropped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionDropped& from);
  void MergeFrom(const SubscriptionDropped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionDropped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.SubscriptionDropped";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubscriptionDropped_SubscriptionDropReason SubscriptionDropReason;
  static constexpr SubscriptionDropReason Unsubscribed =
    SubscriptionDropped_SubscriptionDropReason_Unsubscribed;
  static constexpr SubscriptionDropReason AccessDenied =
    SubscriptionDropped_SubscriptionDropReason_AccessDenied;
  static constexpr SubscriptionDropReason NotFound =
    SubscriptionDropped_SubscriptionDropReason_NotFound;
  static constexpr SubscriptionDropReason PersistentSubscriptionDeleted =
    SubscriptionDropped_SubscriptionDropReason_PersistentSubscriptionDeleted;
  static constexpr SubscriptionDropReason SubscriberMaxCountReached =
    SubscriptionDropped_SubscriptionDropReason_SubscriberMaxCountReached;
  static inline bool SubscriptionDropReason_IsValid(int value) {
    return SubscriptionDropped_SubscriptionDropReason_IsValid(value);
  }
  static constexpr SubscriptionDropReason SubscriptionDropReason_MIN =
    SubscriptionDropped_SubscriptionDropReason_SubscriptionDropReason_MIN;
  static constexpr SubscriptionDropReason SubscriptionDropReason_MAX =
    SubscriptionDropped_SubscriptionDropReason_SubscriptionDropReason_MAX;
  static constexpr int SubscriptionDropReason_ARRAYSIZE =
    SubscriptionDropped_SubscriptionDropReason_SubscriptionDropReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubscriptionDropReason_descriptor() {
    return SubscriptionDropped_SubscriptionDropReason_descriptor();
  }
  template<typename T>
  static inline const std::string& SubscriptionDropReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubscriptionDropReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubscriptionDropReason_Name.");
    return SubscriptionDropped_SubscriptionDropReason_Name(enum_t_value);
  }
  static inline bool SubscriptionDropReason_Parse(const std::string& name,
      SubscriptionDropReason* value) {
    return SubscriptionDropped_SubscriptionDropReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // optional .es.message.SubscriptionDropped.SubscriptionDropReason reason = 1;
  bool has_reason() const;
  void clear_reason();
  ::es::message::SubscriptionDropped_SubscriptionDropReason reason() const;
  void set_reason(::es::message::SubscriptionDropped_SubscriptionDropReason value);

  // @@protoc_insertion_point(class_scope:es.message.SubscriptionDropped)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int reason_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class NotHandled_MasterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.NotHandled.MasterInfo) */ {
 public:
  NotHandled_MasterInfo();
  virtual ~NotHandled_MasterInfo();

  NotHandled_MasterInfo(const NotHandled_MasterInfo& from);
  NotHandled_MasterInfo(NotHandled_MasterInfo&& from) noexcept
    : NotHandled_MasterInfo() {
    *this = ::std::move(from);
  }

  inline NotHandled_MasterInfo& operator=(const NotHandled_MasterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotHandled_MasterInfo& operator=(NotHandled_MasterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotHandled_MasterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotHandled_MasterInfo* internal_default_instance() {
    return reinterpret_cast<const NotHandled_MasterInfo*>(
               &_NotHandled_MasterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(NotHandled_MasterInfo& a, NotHandled_MasterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NotHandled_MasterInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotHandled_MasterInfo* New() const final {
    return CreateMaybeMessage<NotHandled_MasterInfo>(nullptr);
  }

  NotHandled_MasterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotHandled_MasterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotHandled_MasterInfo& from);
  void MergeFrom(const NotHandled_MasterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotHandled_MasterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.NotHandled.MasterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalTcpAddressFieldNumber = 1,
    kExternalHttpAddressFieldNumber = 3,
    kExternalSecureTcpAddressFieldNumber = 5,
    kExternalTcpPortFieldNumber = 2,
    kExternalHttpPortFieldNumber = 4,
    kExternalSecureTcpPortFieldNumber = 6,
  };
  // required string external_tcp_address = 1;
  bool has_external_tcp_address() const;
  void clear_external_tcp_address();
  const std::string& external_tcp_address() const;
  void set_external_tcp_address(const std::string& value);
  void set_external_tcp_address(std::string&& value);
  void set_external_tcp_address(const char* value);
  void set_external_tcp_address(const char* value, size_t size);
  std::string* mutable_external_tcp_address();
  std::string* release_external_tcp_address();
  void set_allocated_external_tcp_address(std::string* external_tcp_address);

  // required string external_http_address = 3;
  bool has_external_http_address() const;
  void clear_external_http_address();
  const std::string& external_http_address() const;
  void set_external_http_address(const std::string& value);
  void set_external_http_address(std::string&& value);
  void set_external_http_address(const char* value);
  void set_external_http_address(const char* value, size_t size);
  std::string* mutable_external_http_address();
  std::string* release_external_http_address();
  void set_allocated_external_http_address(std::string* external_http_address);

  // optional string external_secure_tcp_address = 5;
  bool has_external_secure_tcp_address() const;
  void clear_external_secure_tcp_address();
  const std::string& external_secure_tcp_address() const;
  void set_external_secure_tcp_address(const std::string& value);
  void set_external_secure_tcp_address(std::string&& value);
  void set_external_secure_tcp_address(const char* value);
  void set_external_secure_tcp_address(const char* value, size_t size);
  std::string* mutable_external_secure_tcp_address();
  std::string* release_external_secure_tcp_address();
  void set_allocated_external_secure_tcp_address(std::string* external_secure_tcp_address);

  // required int32 external_tcp_port = 2;
  bool has_external_tcp_port() const;
  void clear_external_tcp_port();
  ::PROTOBUF_NAMESPACE_ID::int32 external_tcp_port() const;
  void set_external_tcp_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 external_http_port = 4;
  bool has_external_http_port() const;
  void clear_external_http_port();
  ::PROTOBUF_NAMESPACE_ID::int32 external_http_port() const;
  void set_external_http_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 external_secure_tcp_port = 6;
  bool has_external_secure_tcp_port() const;
  void clear_external_secure_tcp_port();
  ::PROTOBUF_NAMESPACE_ID::int32 external_secure_tcp_port() const;
  void set_external_secure_tcp_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:es.message.NotHandled.MasterInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_tcp_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_http_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_secure_tcp_address_;
  ::PROTOBUF_NAMESPACE_ID::int32 external_tcp_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 external_http_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 external_secure_tcp_port_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class NotHandled :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.NotHandled) */ {
 public:
  NotHandled();
  virtual ~NotHandled();

  NotHandled(const NotHandled& from);
  NotHandled(NotHandled&& from) noexcept
    : NotHandled() {
    *this = ::std::move(from);
  }

  inline NotHandled& operator=(const NotHandled& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotHandled& operator=(NotHandled&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotHandled& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotHandled* internal_default_instance() {
    return reinterpret_cast<const NotHandled*>(
               &_NotHandled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(NotHandled& a, NotHandled& b) {
    a.Swap(&b);
  }
  inline void Swap(NotHandled* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotHandled* New() const final {
    return CreateMaybeMessage<NotHandled>(nullptr);
  }

  NotHandled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotHandled>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotHandled& from);
  void MergeFrom(const NotHandled& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotHandled* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.NotHandled";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NotHandled_MasterInfo MasterInfo;

  typedef NotHandled_NotHandledReason NotHandledReason;
  static constexpr NotHandledReason NotReady =
    NotHandled_NotHandledReason_NotReady;
  static constexpr NotHandledReason TooBusy =
    NotHandled_NotHandledReason_TooBusy;
  static constexpr NotHandledReason NotMaster =
    NotHandled_NotHandledReason_NotMaster;
  static inline bool NotHandledReason_IsValid(int value) {
    return NotHandled_NotHandledReason_IsValid(value);
  }
  static constexpr NotHandledReason NotHandledReason_MIN =
    NotHandled_NotHandledReason_NotHandledReason_MIN;
  static constexpr NotHandledReason NotHandledReason_MAX =
    NotHandled_NotHandledReason_NotHandledReason_MAX;
  static constexpr int NotHandledReason_ARRAYSIZE =
    NotHandled_NotHandledReason_NotHandledReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NotHandledReason_descriptor() {
    return NotHandled_NotHandledReason_descriptor();
  }
  template<typename T>
  static inline const std::string& NotHandledReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NotHandledReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NotHandledReason_Name.");
    return NotHandled_NotHandledReason_Name(enum_t_value);
  }
  static inline bool NotHandledReason_Parse(const std::string& name,
      NotHandledReason* value) {
    return NotHandled_NotHandledReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalInfoFieldNumber = 2,
    kReasonFieldNumber = 1,
  };
  // optional bytes additional_info = 2;
  bool has_additional_info() const;
  void clear_additional_info();
  const std::string& additional_info() const;
  void set_additional_info(const std::string& value);
  void set_additional_info(std::string&& value);
  void set_additional_info(const char* value);
  void set_additional_info(const void* value, size_t size);
  std::string* mutable_additional_info();
  std::string* release_additional_info();
  void set_allocated_additional_info(std::string* additional_info);

  // required .es.message.NotHandled.NotHandledReason reason = 1;
  bool has_reason() const;
  void clear_reason();
  ::es::message::NotHandled_NotHandledReason reason() const;
  void set_reason(::es::message::NotHandled_NotHandledReason value);

  // @@protoc_insertion_point(class_scope:es.message.NotHandled)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr additional_info_;
  int reason_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ScavengeDatabase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ScavengeDatabase) */ {
 public:
  ScavengeDatabase();
  virtual ~ScavengeDatabase();

  ScavengeDatabase(const ScavengeDatabase& from);
  ScavengeDatabase(ScavengeDatabase&& from) noexcept
    : ScavengeDatabase() {
    *this = ::std::move(from);
  }

  inline ScavengeDatabase& operator=(const ScavengeDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScavengeDatabase& operator=(ScavengeDatabase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScavengeDatabase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScavengeDatabase* internal_default_instance() {
    return reinterpret_cast<const ScavengeDatabase*>(
               &_ScavengeDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ScavengeDatabase& a, ScavengeDatabase& b) {
    a.Swap(&b);
  }
  inline void Swap(ScavengeDatabase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScavengeDatabase* New() const final {
    return CreateMaybeMessage<ScavengeDatabase>(nullptr);
  }

  ScavengeDatabase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScavengeDatabase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScavengeDatabase& from);
  void MergeFrom(const ScavengeDatabase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScavengeDatabase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ScavengeDatabase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:es.message.ScavengeDatabase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ScavengeDatabaseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ScavengeDatabaseResponse) */ {
 public:
  ScavengeDatabaseResponse();
  virtual ~ScavengeDatabaseResponse();

  ScavengeDatabaseResponse(const ScavengeDatabaseResponse& from);
  ScavengeDatabaseResponse(ScavengeDatabaseResponse&& from) noexcept
    : ScavengeDatabaseResponse() {
    *this = ::std::move(from);
  }

  inline ScavengeDatabaseResponse& operator=(const ScavengeDatabaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScavengeDatabaseResponse& operator=(ScavengeDatabaseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScavengeDatabaseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScavengeDatabaseResponse* internal_default_instance() {
    return reinterpret_cast<const ScavengeDatabaseResponse*>(
               &_ScavengeDatabaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ScavengeDatabaseResponse& a, ScavengeDatabaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScavengeDatabaseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScavengeDatabaseResponse* New() const final {
    return CreateMaybeMessage<ScavengeDatabaseResponse>(nullptr);
  }

  ScavengeDatabaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScavengeDatabaseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScavengeDatabaseResponse& from);
  void MergeFrom(const ScavengeDatabaseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScavengeDatabaseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ScavengeDatabaseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ScavengeDatabaseResponse_ScavengeResult ScavengeResult;
  static constexpr ScavengeResult Started =
    ScavengeDatabaseResponse_ScavengeResult_Started;
  static constexpr ScavengeResult InProgress =
    ScavengeDatabaseResponse_ScavengeResult_InProgress;
  static constexpr ScavengeResult Unauthorized =
    ScavengeDatabaseResponse_ScavengeResult_Unauthorized;
  static inline bool ScavengeResult_IsValid(int value) {
    return ScavengeDatabaseResponse_ScavengeResult_IsValid(value);
  }
  static constexpr ScavengeResult ScavengeResult_MIN =
    ScavengeDatabaseResponse_ScavengeResult_ScavengeResult_MIN;
  static constexpr ScavengeResult ScavengeResult_MAX =
    ScavengeDatabaseResponse_ScavengeResult_ScavengeResult_MAX;
  static constexpr int ScavengeResult_ARRAYSIZE =
    ScavengeDatabaseResponse_ScavengeResult_ScavengeResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScavengeResult_descriptor() {
    return ScavengeDatabaseResponse_ScavengeResult_descriptor();
  }
  template<typename T>
  static inline const std::string& ScavengeResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScavengeResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScavengeResult_Name.");
    return ScavengeDatabaseResponse_ScavengeResult_Name(enum_t_value);
  }
  static inline bool ScavengeResult_Parse(const std::string& name,
      ScavengeResult* value) {
    return ScavengeDatabaseResponse_ScavengeResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScavengeIdFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional string scavengeId = 2;
  bool has_scavengeid() const;
  void clear_scavengeid();
  const std::string& scavengeid() const;
  void set_scavengeid(const std::string& value);
  void set_scavengeid(std::string&& value);
  void set_scavengeid(const char* value);
  void set_scavengeid(const char* value, size_t size);
  std::string* mutable_scavengeid();
  std::string* release_scavengeid();
  void set_allocated_scavengeid(std::string* scavengeid);

  // required .es.message.ScavengeDatabaseResponse.ScavengeResult result = 1;
  bool has_result() const;
  void clear_result();
  ::es::message::ScavengeDatabaseResponse_ScavengeResult result() const;
  void set_result(::es::message::ScavengeDatabaseResponse_ScavengeResult value);

  // @@protoc_insertion_point(class_scope:es.message.ScavengeDatabaseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scavengeid_;
  int result_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class IdentifyClient :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.IdentifyClient) */ {
 public:
  IdentifyClient();
  virtual ~IdentifyClient();

  IdentifyClient(const IdentifyClient& from);
  IdentifyClient(IdentifyClient&& from) noexcept
    : IdentifyClient() {
    *this = ::std::move(from);
  }

  inline IdentifyClient& operator=(const IdentifyClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifyClient& operator=(IdentifyClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IdentifyClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentifyClient* internal_default_instance() {
    return reinterpret_cast<const IdentifyClient*>(
               &_IdentifyClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(IdentifyClient& a, IdentifyClient& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentifyClient* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentifyClient* New() const final {
    return CreateMaybeMessage<IdentifyClient>(nullptr);
  }

  IdentifyClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentifyClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdentifyClient& from);
  void MergeFrom(const IdentifyClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifyClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.IdentifyClient";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionNameFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // optional string connection_name = 2;
  bool has_connection_name() const;
  void clear_connection_name();
  const std::string& connection_name() const;
  void set_connection_name(const std::string& value);
  void set_connection_name(std::string&& value);
  void set_connection_name(const char* value);
  void set_connection_name(const char* value, size_t size);
  std::string* mutable_connection_name();
  std::string* release_connection_name();
  void set_allocated_connection_name(std::string* connection_name);

  // required int32 version = 1;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:es.message.IdentifyClient)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ClientIdentified :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:es.message.ClientIdentified) */ {
 public:
  ClientIdentified();
  virtual ~ClientIdentified();

  ClientIdentified(const ClientIdentified& from);
  ClientIdentified(ClientIdentified&& from) noexcept
    : ClientIdentified() {
    *this = ::std::move(from);
  }

  inline ClientIdentified& operator=(const ClientIdentified& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientIdentified& operator=(ClientIdentified&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientIdentified& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientIdentified* internal_default_instance() {
    return reinterpret_cast<const ClientIdentified*>(
               &_ClientIdentified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ClientIdentified& a, ClientIdentified& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientIdentified* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientIdentified* New() const final {
    return CreateMaybeMessage<ClientIdentified>(nullptr);
  }

  ClientIdentified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientIdentified>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientIdentified& from);
  void MergeFrom(const ClientIdentified& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientIdentified* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "es.message.ClientIdentified";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:es.message.ClientIdentified)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewEvent

// required bytes event_id = 1;
inline bool NewEvent::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewEvent::clear_event_id() {
  event_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NewEvent::event_id() const {
  // @@protoc_insertion_point(field_get:es.message.NewEvent.event_id)
  return event_id_.GetNoArena();
}
inline void NewEvent::set_event_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.NewEvent.event_id)
}
inline void NewEvent::set_event_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.NewEvent.event_id)
}
inline void NewEvent::set_event_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.NewEvent.event_id)
}
inline void NewEvent::set_event_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.NewEvent.event_id)
}
inline std::string* NewEvent::mutable_event_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.NewEvent.event_id)
  return event_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewEvent::release_event_id() {
  // @@protoc_insertion_point(field_release:es.message.NewEvent.event_id)
  if (!has_event_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewEvent::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.NewEvent.event_id)
}

// required string event_type = 2;
inline bool NewEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewEvent::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NewEvent::event_type() const {
  // @@protoc_insertion_point(field_get:es.message.NewEvent.event_type)
  return event_type_.GetNoArena();
}
inline void NewEvent::set_event_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.NewEvent.event_type)
}
inline void NewEvent::set_event_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  event_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.NewEvent.event_type)
}
inline void NewEvent::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.NewEvent.event_type)
}
inline void NewEvent::set_event_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.NewEvent.event_type)
}
inline std::string* NewEvent::mutable_event_type() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:es.message.NewEvent.event_type)
  return event_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewEvent::release_event_type() {
  // @@protoc_insertion_point(field_release:es.message.NewEvent.event_type)
  if (!has_event_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return event_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewEvent::set_allocated_event_type(std::string* event_type) {
  if (event_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:es.message.NewEvent.event_type)
}

// required int32 data_content_type = 3;
inline bool NewEvent::has_data_content_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewEvent::clear_data_content_type() {
  data_content_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewEvent::data_content_type() const {
  // @@protoc_insertion_point(field_get:es.message.NewEvent.data_content_type)
  return data_content_type_;
}
inline void NewEvent::set_data_content_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  data_content_type_ = value;
  // @@protoc_insertion_point(field_set:es.message.NewEvent.data_content_type)
}

// required int32 metadata_content_type = 4;
inline bool NewEvent::has_metadata_content_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewEvent::clear_metadata_content_type() {
  metadata_content_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewEvent::metadata_content_type() const {
  // @@protoc_insertion_point(field_get:es.message.NewEvent.metadata_content_type)
  return metadata_content_type_;
}
inline void NewEvent::set_metadata_content_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  metadata_content_type_ = value;
  // @@protoc_insertion_point(field_set:es.message.NewEvent.metadata_content_type)
}

// required bytes data = 5;
inline bool NewEvent::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NewEvent::data() const {
  // @@protoc_insertion_point(field_get:es.message.NewEvent.data)
  return data_.GetNoArena();
}
inline void NewEvent::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.NewEvent.data)
}
inline void NewEvent::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.NewEvent.data)
}
inline void NewEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.NewEvent.data)
}
inline void NewEvent::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.NewEvent.data)
}
inline std::string* NewEvent::mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:es.message.NewEvent.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewEvent::release_data() {
  // @@protoc_insertion_point(field_release:es.message.NewEvent.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewEvent::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:es.message.NewEvent.data)
}

// optional bytes metadata = 6;
inline bool NewEvent::has_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewEvent::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NewEvent::metadata() const {
  // @@protoc_insertion_point(field_get:es.message.NewEvent.metadata)
  return metadata_.GetNoArena();
}
inline void NewEvent::set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.NewEvent.metadata)
}
inline void NewEvent::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.NewEvent.metadata)
}
inline void NewEvent::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.NewEvent.metadata)
}
inline void NewEvent::set_metadata(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.NewEvent.metadata)
}
inline std::string* NewEvent::mutable_metadata() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:es.message.NewEvent.metadata)
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewEvent::release_metadata() {
  // @@protoc_insertion_point(field_release:es.message.NewEvent.metadata)
  if (!has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return metadata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewEvent::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:es.message.NewEvent.metadata)
}

// -------------------------------------------------------------------

// EventRecord

// required string event_stream_id = 1;
inline bool EventRecord::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventRecord::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventRecord::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void EventRecord::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.EventRecord.event_stream_id)
}
inline void EventRecord::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.EventRecord.event_stream_id)
}
inline void EventRecord::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.EventRecord.event_stream_id)
}
inline void EventRecord::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.EventRecord.event_stream_id)
}
inline std::string* EventRecord::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.EventRecord.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventRecord::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.EventRecord.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventRecord::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.EventRecord.event_stream_id)
}

// required int64 event_number = 2;
inline bool EventRecord::has_event_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EventRecord::clear_event_number() {
  event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventRecord::event_number() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.event_number)
  return event_number_;
}
inline void EventRecord::set_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.EventRecord.event_number)
}

// required bytes event_id = 3;
inline bool EventRecord::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventRecord::clear_event_id() {
  event_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EventRecord::event_id() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.event_id)
  return event_id_.GetNoArena();
}
inline void EventRecord::set_event_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  event_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.EventRecord.event_id)
}
inline void EventRecord::set_event_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  event_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.EventRecord.event_id)
}
inline void EventRecord::set_event_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  event_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.EventRecord.event_id)
}
inline void EventRecord::set_event_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  event_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.EventRecord.event_id)
}
inline std::string* EventRecord::mutable_event_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:es.message.EventRecord.event_id)
  return event_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventRecord::release_event_id() {
  // @@protoc_insertion_point(field_release:es.message.EventRecord.event_id)
  if (!has_event_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return event_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventRecord::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.EventRecord.event_id)
}

// required string event_type = 4;
inline bool EventRecord::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventRecord::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EventRecord::event_type() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.event_type)
  return event_type_.GetNoArena();
}
inline void EventRecord::set_event_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.EventRecord.event_type)
}
inline void EventRecord::set_event_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  event_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.EventRecord.event_type)
}
inline void EventRecord::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.EventRecord.event_type)
}
inline void EventRecord::set_event_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  event_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.EventRecord.event_type)
}
inline std::string* EventRecord::mutable_event_type() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:es.message.EventRecord.event_type)
  return event_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventRecord::release_event_type() {
  // @@protoc_insertion_point(field_release:es.message.EventRecord.event_type)
  if (!has_event_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return event_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventRecord::set_allocated_event_type(std::string* event_type) {
  if (event_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  event_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:es.message.EventRecord.event_type)
}

// required int32 data_content_type = 5;
inline bool EventRecord::has_data_content_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EventRecord::clear_data_content_type() {
  data_content_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventRecord::data_content_type() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.data_content_type)
  return data_content_type_;
}
inline void EventRecord::set_data_content_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  data_content_type_ = value;
  // @@protoc_insertion_point(field_set:es.message.EventRecord.data_content_type)
}

// required int32 metadata_content_type = 6;
inline bool EventRecord::has_metadata_content_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EventRecord::clear_metadata_content_type() {
  metadata_content_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventRecord::metadata_content_type() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.metadata_content_type)
  return metadata_content_type_;
}
inline void EventRecord::set_metadata_content_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  metadata_content_type_ = value;
  // @@protoc_insertion_point(field_set:es.message.EventRecord.metadata_content_type)
}

// required bytes data = 7;
inline bool EventRecord::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventRecord::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& EventRecord::data() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.data)
  return data_.GetNoArena();
}
inline void EventRecord::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.EventRecord.data)
}
inline void EventRecord::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.EventRecord.data)
}
inline void EventRecord::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.EventRecord.data)
}
inline void EventRecord::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.EventRecord.data)
}
inline std::string* EventRecord::mutable_data() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:es.message.EventRecord.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventRecord::release_data() {
  // @@protoc_insertion_point(field_release:es.message.EventRecord.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventRecord::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:es.message.EventRecord.data)
}

// optional bytes metadata = 8;
inline bool EventRecord::has_metadata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EventRecord::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& EventRecord::metadata() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.metadata)
  return metadata_.GetNoArena();
}
inline void EventRecord::set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.EventRecord.metadata)
}
inline void EventRecord::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.EventRecord.metadata)
}
inline void EventRecord::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.EventRecord.metadata)
}
inline void EventRecord::set_metadata(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.EventRecord.metadata)
}
inline std::string* EventRecord::mutable_metadata() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:es.message.EventRecord.metadata)
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventRecord::release_metadata() {
  // @@protoc_insertion_point(field_release:es.message.EventRecord.metadata)
  if (!has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return metadata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventRecord::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:es.message.EventRecord.metadata)
}

// optional int64 created = 9;
inline bool EventRecord::has_created() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EventRecord::clear_created() {
  created_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventRecord::created() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.created)
  return created_;
}
inline void EventRecord::set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  created_ = value;
  // @@protoc_insertion_point(field_set:es.message.EventRecord.created)
}

// optional int64 created_epoch = 10;
inline bool EventRecord::has_created_epoch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EventRecord::clear_created_epoch() {
  created_epoch_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventRecord::created_epoch() const {
  // @@protoc_insertion_point(field_get:es.message.EventRecord.created_epoch)
  return created_epoch_;
}
inline void EventRecord::set_created_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  created_epoch_ = value;
  // @@protoc_insertion_point(field_set:es.message.EventRecord.created_epoch)
}

// -------------------------------------------------------------------

// ResolvedIndexedEvent

// required .es.message.EventRecord event = 1;
inline bool ResolvedIndexedEvent::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedIndexedEvent::clear_event() {
  if (event_ != nullptr) event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::es::message::EventRecord& ResolvedIndexedEvent::event() const {
  const ::es::message::EventRecord* p = event_;
  // @@protoc_insertion_point(field_get:es.message.ResolvedIndexedEvent.event)
  return p != nullptr ? *p : *reinterpret_cast<const ::es::message::EventRecord*>(
      &::es::message::_EventRecord_default_instance_);
}
inline ::es::message::EventRecord* ResolvedIndexedEvent::release_event() {
  // @@protoc_insertion_point(field_release:es.message.ResolvedIndexedEvent.event)
  _has_bits_[0] &= ~0x00000001u;
  ::es::message::EventRecord* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::es::message::EventRecord* ResolvedIndexedEvent::mutable_event() {
  _has_bits_[0] |= 0x00000001u;
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::es::message::EventRecord>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:es.message.ResolvedIndexedEvent.event)
  return event_;
}
inline void ResolvedIndexedEvent::set_allocated_event(::es::message::EventRecord* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:es.message.ResolvedIndexedEvent.event)
}

// optional .es.message.EventRecord link = 2;
inline bool ResolvedIndexedEvent::has_link() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedIndexedEvent::clear_link() {
  if (link_ != nullptr) link_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::es::message::EventRecord& ResolvedIndexedEvent::link() const {
  const ::es::message::EventRecord* p = link_;
  // @@protoc_insertion_point(field_get:es.message.ResolvedIndexedEvent.link)
  return p != nullptr ? *p : *reinterpret_cast<const ::es::message::EventRecord*>(
      &::es::message::_EventRecord_default_instance_);
}
inline ::es::message::EventRecord* ResolvedIndexedEvent::release_link() {
  // @@protoc_insertion_point(field_release:es.message.ResolvedIndexedEvent.link)
  _has_bits_[0] &= ~0x00000002u;
  ::es::message::EventRecord* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::es::message::EventRecord* ResolvedIndexedEvent::mutable_link() {
  _has_bits_[0] |= 0x00000002u;
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::es::message::EventRecord>(GetArenaNoVirtual());
    link_ = p;
  }
  // @@protoc_insertion_point(field_mutable:es.message.ResolvedIndexedEvent.link)
  return link_;
}
inline void ResolvedIndexedEvent::set_allocated_link(::es::message::EventRecord* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:es.message.ResolvedIndexedEvent.link)
}

// -------------------------------------------------------------------

// ResolvedEvent

// required .es.message.EventRecord event = 1;
inline bool ResolvedEvent::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolvedEvent::clear_event() {
  if (event_ != nullptr) event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::es::message::EventRecord& ResolvedEvent::event() const {
  const ::es::message::EventRecord* p = event_;
  // @@protoc_insertion_point(field_get:es.message.ResolvedEvent.event)
  return p != nullptr ? *p : *reinterpret_cast<const ::es::message::EventRecord*>(
      &::es::message::_EventRecord_default_instance_);
}
inline ::es::message::EventRecord* ResolvedEvent::release_event() {
  // @@protoc_insertion_point(field_release:es.message.ResolvedEvent.event)
  _has_bits_[0] &= ~0x00000001u;
  ::es::message::EventRecord* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::es::message::EventRecord* ResolvedEvent::mutable_event() {
  _has_bits_[0] |= 0x00000001u;
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::es::message::EventRecord>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:es.message.ResolvedEvent.event)
  return event_;
}
inline void ResolvedEvent::set_allocated_event(::es::message::EventRecord* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:es.message.ResolvedEvent.event)
}

// optional .es.message.EventRecord link = 2;
inline bool ResolvedEvent::has_link() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolvedEvent::clear_link() {
  if (link_ != nullptr) link_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::es::message::EventRecord& ResolvedEvent::link() const {
  const ::es::message::EventRecord* p = link_;
  // @@protoc_insertion_point(field_get:es.message.ResolvedEvent.link)
  return p != nullptr ? *p : *reinterpret_cast<const ::es::message::EventRecord*>(
      &::es::message::_EventRecord_default_instance_);
}
inline ::es::message::EventRecord* ResolvedEvent::release_link() {
  // @@protoc_insertion_point(field_release:es.message.ResolvedEvent.link)
  _has_bits_[0] &= ~0x00000002u;
  ::es::message::EventRecord* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::es::message::EventRecord* ResolvedEvent::mutable_link() {
  _has_bits_[0] |= 0x00000002u;
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::es::message::EventRecord>(GetArenaNoVirtual());
    link_ = p;
  }
  // @@protoc_insertion_point(field_mutable:es.message.ResolvedEvent.link)
  return link_;
}
inline void ResolvedEvent::set_allocated_link(::es::message::EventRecord* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:es.message.ResolvedEvent.link)
}

// required int64 commit_position = 3;
inline bool ResolvedEvent::has_commit_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolvedEvent::clear_commit_position() {
  commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResolvedEvent::commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.ResolvedEvent.commit_position)
  return commit_position_;
}
inline void ResolvedEvent::set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.ResolvedEvent.commit_position)
}

// required int64 prepare_position = 4;
inline bool ResolvedEvent::has_prepare_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolvedEvent::clear_prepare_position() {
  prepare_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResolvedEvent::prepare_position() const {
  // @@protoc_insertion_point(field_get:es.message.ResolvedEvent.prepare_position)
  return prepare_position_;
}
inline void ResolvedEvent::set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  prepare_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.ResolvedEvent.prepare_position)
}

// -------------------------------------------------------------------

// WriteEvents

// required string event_stream_id = 1;
inline bool WriteEvents::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteEvents::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WriteEvents::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEvents.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void WriteEvents::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.WriteEvents.event_stream_id)
}
inline void WriteEvents::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.WriteEvents.event_stream_id)
}
inline void WriteEvents::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.WriteEvents.event_stream_id)
}
inline void WriteEvents::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.WriteEvents.event_stream_id)
}
inline std::string* WriteEvents::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.WriteEvents.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteEvents::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.WriteEvents.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteEvents::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.WriteEvents.event_stream_id)
}

// required int64 expected_version = 2;
inline bool WriteEvents::has_expected_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteEvents::clear_expected_version() {
  expected_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteEvents::expected_version() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEvents.expected_version)
  return expected_version_;
}
inline void WriteEvents::set_expected_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  expected_version_ = value;
  // @@protoc_insertion_point(field_set:es.message.WriteEvents.expected_version)
}

// repeated .es.message.NewEvent events = 3;
inline int WriteEvents::events_size() const {
  return events_.size();
}
inline void WriteEvents::clear_events() {
  events_.Clear();
}
inline ::es::message::NewEvent* WriteEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:es.message.WriteEvents.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent >*
WriteEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:es.message.WriteEvents.events)
  return &events_;
}
inline const ::es::message::NewEvent& WriteEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:es.message.WriteEvents.events)
  return events_.Get(index);
}
inline ::es::message::NewEvent* WriteEvents::add_events() {
  // @@protoc_insertion_point(field_add:es.message.WriteEvents.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent >&
WriteEvents::events() const {
  // @@protoc_insertion_point(field_list:es.message.WriteEvents.events)
  return events_;
}

// required bool require_master = 4;
inline bool WriteEvents::has_require_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteEvents::clear_require_master() {
  require_master_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool WriteEvents::require_master() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEvents.require_master)
  return require_master_;
}
inline void WriteEvents::set_require_master(bool value) {
  _has_bits_[0] |= 0x00000004u;
  require_master_ = value;
  // @@protoc_insertion_point(field_set:es.message.WriteEvents.require_master)
}

// -------------------------------------------------------------------

// WriteEventsCompleted

// required .es.message.OperationResult result = 1;
inline bool WriteEventsCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WriteEventsCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::es::message::OperationResult WriteEventsCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEventsCompleted.result)
  return static_cast< ::es::message::OperationResult >(result_);
}
inline void WriteEventsCompleted::set_result(::es::message::OperationResult value) {
  assert(::es::message::OperationResult_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.WriteEventsCompleted.result)
}

// optional string message = 2;
inline bool WriteEventsCompleted::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteEventsCompleted::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WriteEventsCompleted::message() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEventsCompleted.message)
  return message_.GetNoArena();
}
inline void WriteEventsCompleted::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.WriteEventsCompleted.message)
}
inline void WriteEventsCompleted::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.WriteEventsCompleted.message)
}
inline void WriteEventsCompleted::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.WriteEventsCompleted.message)
}
inline void WriteEventsCompleted::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.WriteEventsCompleted.message)
}
inline std::string* WriteEventsCompleted::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.WriteEventsCompleted.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteEventsCompleted::release_message() {
  // @@protoc_insertion_point(field_release:es.message.WriteEventsCompleted.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteEventsCompleted::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:es.message.WriteEventsCompleted.message)
}

// required int64 first_event_number = 3;
inline bool WriteEventsCompleted::has_first_event_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteEventsCompleted::clear_first_event_number() {
  first_event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteEventsCompleted::first_event_number() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEventsCompleted.first_event_number)
  return first_event_number_;
}
inline void WriteEventsCompleted::set_first_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  first_event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.WriteEventsCompleted.first_event_number)
}

// required int64 last_event_number = 4;
inline bool WriteEventsCompleted::has_last_event_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteEventsCompleted::clear_last_event_number() {
  last_event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteEventsCompleted::last_event_number() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEventsCompleted.last_event_number)
  return last_event_number_;
}
inline void WriteEventsCompleted::set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.WriteEventsCompleted.last_event_number)
}

// optional int64 prepare_position = 5;
inline bool WriteEventsCompleted::has_prepare_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WriteEventsCompleted::clear_prepare_position() {
  prepare_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteEventsCompleted::prepare_position() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEventsCompleted.prepare_position)
  return prepare_position_;
}
inline void WriteEventsCompleted::set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  prepare_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.WriteEventsCompleted.prepare_position)
}

// optional int64 commit_position = 6;
inline bool WriteEventsCompleted::has_commit_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WriteEventsCompleted::clear_commit_position() {
  commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteEventsCompleted::commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEventsCompleted.commit_position)
  return commit_position_;
}
inline void WriteEventsCompleted::set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.WriteEventsCompleted.commit_position)
}

// optional int64 current_version = 7;
inline bool WriteEventsCompleted::has_current_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WriteEventsCompleted::clear_current_version() {
  current_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteEventsCompleted::current_version() const {
  // @@protoc_insertion_point(field_get:es.message.WriteEventsCompleted.current_version)
  return current_version_;
}
inline void WriteEventsCompleted::set_current_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  current_version_ = value;
  // @@protoc_insertion_point(field_set:es.message.WriteEventsCompleted.current_version)
}

// -------------------------------------------------------------------

// DeleteStream

// required string event_stream_id = 1;
inline bool DeleteStream::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteStream::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeleteStream::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.DeleteStream.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void DeleteStream::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.DeleteStream.event_stream_id)
}
inline void DeleteStream::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.DeleteStream.event_stream_id)
}
inline void DeleteStream::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.DeleteStream.event_stream_id)
}
inline void DeleteStream::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.DeleteStream.event_stream_id)
}
inline std::string* DeleteStream::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.DeleteStream.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteStream::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.DeleteStream.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteStream::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.DeleteStream.event_stream_id)
}

// required int64 expected_version = 2;
inline bool DeleteStream::has_expected_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteStream::clear_expected_version() {
  expected_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteStream::expected_version() const {
  // @@protoc_insertion_point(field_get:es.message.DeleteStream.expected_version)
  return expected_version_;
}
inline void DeleteStream::set_expected_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  expected_version_ = value;
  // @@protoc_insertion_point(field_set:es.message.DeleteStream.expected_version)
}

// required bool require_master = 3;
inline bool DeleteStream::has_require_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteStream::clear_require_master() {
  require_master_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DeleteStream::require_master() const {
  // @@protoc_insertion_point(field_get:es.message.DeleteStream.require_master)
  return require_master_;
}
inline void DeleteStream::set_require_master(bool value) {
  _has_bits_[0] |= 0x00000004u;
  require_master_ = value;
  // @@protoc_insertion_point(field_set:es.message.DeleteStream.require_master)
}

// optional bool hard_delete = 4;
inline bool DeleteStream::has_hard_delete() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeleteStream::clear_hard_delete() {
  hard_delete_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DeleteStream::hard_delete() const {
  // @@protoc_insertion_point(field_get:es.message.DeleteStream.hard_delete)
  return hard_delete_;
}
inline void DeleteStream::set_hard_delete(bool value) {
  _has_bits_[0] |= 0x00000008u;
  hard_delete_ = value;
  // @@protoc_insertion_point(field_set:es.message.DeleteStream.hard_delete)
}

// -------------------------------------------------------------------

// DeleteStreamCompleted

// required .es.message.OperationResult result = 1;
inline bool DeleteStreamCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeleteStreamCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::es::message::OperationResult DeleteStreamCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.DeleteStreamCompleted.result)
  return static_cast< ::es::message::OperationResult >(result_);
}
inline void DeleteStreamCompleted::set_result(::es::message::OperationResult value) {
  assert(::es::message::OperationResult_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.DeleteStreamCompleted.result)
}

// optional string message = 2;
inline bool DeleteStreamCompleted::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteStreamCompleted::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeleteStreamCompleted::message() const {
  // @@protoc_insertion_point(field_get:es.message.DeleteStreamCompleted.message)
  return message_.GetNoArena();
}
inline void DeleteStreamCompleted::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.DeleteStreamCompleted.message)
}
inline void DeleteStreamCompleted::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.DeleteStreamCompleted.message)
}
inline void DeleteStreamCompleted::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.DeleteStreamCompleted.message)
}
inline void DeleteStreamCompleted::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.DeleteStreamCompleted.message)
}
inline std::string* DeleteStreamCompleted::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.DeleteStreamCompleted.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteStreamCompleted::release_message() {
  // @@protoc_insertion_point(field_release:es.message.DeleteStreamCompleted.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteStreamCompleted::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:es.message.DeleteStreamCompleted.message)
}

// optional int64 prepare_position = 3;
inline bool DeleteStreamCompleted::has_prepare_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteStreamCompleted::clear_prepare_position() {
  prepare_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteStreamCompleted::prepare_position() const {
  // @@protoc_insertion_point(field_get:es.message.DeleteStreamCompleted.prepare_position)
  return prepare_position_;
}
inline void DeleteStreamCompleted::set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  prepare_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.DeleteStreamCompleted.prepare_position)
}

// optional int64 commit_position = 4;
inline bool DeleteStreamCompleted::has_commit_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteStreamCompleted::clear_commit_position() {
  commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteStreamCompleted::commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.DeleteStreamCompleted.commit_position)
  return commit_position_;
}
inline void DeleteStreamCompleted::set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.DeleteStreamCompleted.commit_position)
}

// -------------------------------------------------------------------

// TransactionStart

// required string event_stream_id = 1;
inline bool TransactionStart::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionStart::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransactionStart::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionStart.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void TransactionStart::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.TransactionStart.event_stream_id)
}
inline void TransactionStart::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.TransactionStart.event_stream_id)
}
inline void TransactionStart::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.TransactionStart.event_stream_id)
}
inline void TransactionStart::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.TransactionStart.event_stream_id)
}
inline std::string* TransactionStart::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.TransactionStart.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionStart::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.TransactionStart.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionStart::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.TransactionStart.event_stream_id)
}

// required int64 expected_version = 2;
inline bool TransactionStart::has_expected_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionStart::clear_expected_version() {
  expected_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionStart::expected_version() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionStart.expected_version)
  return expected_version_;
}
inline void TransactionStart::set_expected_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  expected_version_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionStart.expected_version)
}

// required bool require_master = 3;
inline bool TransactionStart::has_require_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionStart::clear_require_master() {
  require_master_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TransactionStart::require_master() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionStart.require_master)
  return require_master_;
}
inline void TransactionStart::set_require_master(bool value) {
  _has_bits_[0] |= 0x00000004u;
  require_master_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionStart.require_master)
}

// -------------------------------------------------------------------

// TransactionStartCompleted

// required int64 transaction_id = 1;
inline bool TransactionStartCompleted::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionStartCompleted::clear_transaction_id() {
  transaction_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionStartCompleted::transaction_id() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionStartCompleted.transaction_id)
  return transaction_id_;
}
inline void TransactionStartCompleted::set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionStartCompleted.transaction_id)
}

// required .es.message.OperationResult result = 2;
inline bool TransactionStartCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionStartCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::es::message::OperationResult TransactionStartCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionStartCompleted.result)
  return static_cast< ::es::message::OperationResult >(result_);
}
inline void TransactionStartCompleted::set_result(::es::message::OperationResult value) {
  assert(::es::message::OperationResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionStartCompleted.result)
}

// optional string message = 3;
inline bool TransactionStartCompleted::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionStartCompleted::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransactionStartCompleted::message() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionStartCompleted.message)
  return message_.GetNoArena();
}
inline void TransactionStartCompleted::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.TransactionStartCompleted.message)
}
inline void TransactionStartCompleted::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.TransactionStartCompleted.message)
}
inline void TransactionStartCompleted::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.TransactionStartCompleted.message)
}
inline void TransactionStartCompleted::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.TransactionStartCompleted.message)
}
inline std::string* TransactionStartCompleted::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.TransactionStartCompleted.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionStartCompleted::release_message() {
  // @@protoc_insertion_point(field_release:es.message.TransactionStartCompleted.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionStartCompleted::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:es.message.TransactionStartCompleted.message)
}

// -------------------------------------------------------------------

// TransactionWrite

// required int64 transaction_id = 1;
inline bool TransactionWrite::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionWrite::clear_transaction_id() {
  transaction_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionWrite::transaction_id() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionWrite.transaction_id)
  return transaction_id_;
}
inline void TransactionWrite::set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionWrite.transaction_id)
}

// repeated .es.message.NewEvent events = 2;
inline int TransactionWrite::events_size() const {
  return events_.size();
}
inline void TransactionWrite::clear_events() {
  events_.Clear();
}
inline ::es::message::NewEvent* TransactionWrite::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:es.message.TransactionWrite.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent >*
TransactionWrite::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:es.message.TransactionWrite.events)
  return &events_;
}
inline const ::es::message::NewEvent& TransactionWrite::events(int index) const {
  // @@protoc_insertion_point(field_get:es.message.TransactionWrite.events)
  return events_.Get(index);
}
inline ::es::message::NewEvent* TransactionWrite::add_events() {
  // @@protoc_insertion_point(field_add:es.message.TransactionWrite.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::NewEvent >&
TransactionWrite::events() const {
  // @@protoc_insertion_point(field_list:es.message.TransactionWrite.events)
  return events_;
}

// required bool require_master = 3;
inline bool TransactionWrite::has_require_master() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionWrite::clear_require_master() {
  require_master_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TransactionWrite::require_master() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionWrite.require_master)
  return require_master_;
}
inline void TransactionWrite::set_require_master(bool value) {
  _has_bits_[0] |= 0x00000002u;
  require_master_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionWrite.require_master)
}

// -------------------------------------------------------------------

// TransactionWriteCompleted

// required int64 transaction_id = 1;
inline bool TransactionWriteCompleted::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionWriteCompleted::clear_transaction_id() {
  transaction_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionWriteCompleted::transaction_id() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionWriteCompleted.transaction_id)
  return transaction_id_;
}
inline void TransactionWriteCompleted::set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionWriteCompleted.transaction_id)
}

// required .es.message.OperationResult result = 2;
inline bool TransactionWriteCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionWriteCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::es::message::OperationResult TransactionWriteCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionWriteCompleted.result)
  return static_cast< ::es::message::OperationResult >(result_);
}
inline void TransactionWriteCompleted::set_result(::es::message::OperationResult value) {
  assert(::es::message::OperationResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionWriteCompleted.result)
}

// optional string message = 3;
inline bool TransactionWriteCompleted::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionWriteCompleted::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransactionWriteCompleted::message() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionWriteCompleted.message)
  return message_.GetNoArena();
}
inline void TransactionWriteCompleted::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.TransactionWriteCompleted.message)
}
inline void TransactionWriteCompleted::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.TransactionWriteCompleted.message)
}
inline void TransactionWriteCompleted::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.TransactionWriteCompleted.message)
}
inline void TransactionWriteCompleted::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.TransactionWriteCompleted.message)
}
inline std::string* TransactionWriteCompleted::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.TransactionWriteCompleted.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionWriteCompleted::release_message() {
  // @@protoc_insertion_point(field_release:es.message.TransactionWriteCompleted.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionWriteCompleted::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:es.message.TransactionWriteCompleted.message)
}

// -------------------------------------------------------------------

// TransactionCommit

// required int64 transaction_id = 1;
inline bool TransactionCommit::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionCommit::clear_transaction_id() {
  transaction_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionCommit::transaction_id() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionCommit.transaction_id)
  return transaction_id_;
}
inline void TransactionCommit::set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionCommit.transaction_id)
}

// required bool require_master = 2;
inline bool TransactionCommit::has_require_master() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionCommit::clear_require_master() {
  require_master_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TransactionCommit::require_master() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionCommit.require_master)
  return require_master_;
}
inline void TransactionCommit::set_require_master(bool value) {
  _has_bits_[0] |= 0x00000002u;
  require_master_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionCommit.require_master)
}

// -------------------------------------------------------------------

// TransactionCommitCompleted

// required int64 transaction_id = 1;
inline bool TransactionCommitCompleted::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionCommitCompleted::clear_transaction_id() {
  transaction_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionCommitCompleted::transaction_id() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionCommitCompleted.transaction_id)
  return transaction_id_;
}
inline void TransactionCommitCompleted::set_transaction_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionCommitCompleted.transaction_id)
}

// required .es.message.OperationResult result = 2;
inline bool TransactionCommitCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TransactionCommitCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::es::message::OperationResult TransactionCommitCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionCommitCompleted.result)
  return static_cast< ::es::message::OperationResult >(result_);
}
inline void TransactionCommitCompleted::set_result(::es::message::OperationResult value) {
  assert(::es::message::OperationResult_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionCommitCompleted.result)
}

// optional string message = 3;
inline bool TransactionCommitCompleted::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionCommitCompleted::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransactionCommitCompleted::message() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionCommitCompleted.message)
  return message_.GetNoArena();
}
inline void TransactionCommitCompleted::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.TransactionCommitCompleted.message)
}
inline void TransactionCommitCompleted::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.TransactionCommitCompleted.message)
}
inline void TransactionCommitCompleted::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.TransactionCommitCompleted.message)
}
inline void TransactionCommitCompleted::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.TransactionCommitCompleted.message)
}
inline std::string* TransactionCommitCompleted::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.TransactionCommitCompleted.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionCommitCompleted::release_message() {
  // @@protoc_insertion_point(field_release:es.message.TransactionCommitCompleted.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionCommitCompleted::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:es.message.TransactionCommitCompleted.message)
}

// required int64 first_event_number = 4;
inline bool TransactionCommitCompleted::has_first_event_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionCommitCompleted::clear_first_event_number() {
  first_event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionCommitCompleted::first_event_number() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionCommitCompleted.first_event_number)
  return first_event_number_;
}
inline void TransactionCommitCompleted::set_first_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  first_event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionCommitCompleted.first_event_number)
}

// required int64 last_event_number = 5;
inline bool TransactionCommitCompleted::has_last_event_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransactionCommitCompleted::clear_last_event_number() {
  last_event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionCommitCompleted::last_event_number() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionCommitCompleted.last_event_number)
  return last_event_number_;
}
inline void TransactionCommitCompleted::set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionCommitCompleted.last_event_number)
}

// optional int64 prepare_position = 6;
inline bool TransactionCommitCompleted::has_prepare_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransactionCommitCompleted::clear_prepare_position() {
  prepare_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionCommitCompleted::prepare_position() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionCommitCompleted.prepare_position)
  return prepare_position_;
}
inline void TransactionCommitCompleted::set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  prepare_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionCommitCompleted.prepare_position)
}

// optional int64 commit_position = 7;
inline bool TransactionCommitCompleted::has_commit_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransactionCommitCompleted::clear_commit_position() {
  commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionCommitCompleted::commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.TransactionCommitCompleted.commit_position)
  return commit_position_;
}
inline void TransactionCommitCompleted::set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.TransactionCommitCompleted.commit_position)
}

// -------------------------------------------------------------------

// ReadEvent

// required string event_stream_id = 1;
inline bool ReadEvent::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadEvent::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadEvent::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.ReadEvent.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void ReadEvent::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.ReadEvent.event_stream_id)
}
inline void ReadEvent::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.ReadEvent.event_stream_id)
}
inline void ReadEvent::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.ReadEvent.event_stream_id)
}
inline void ReadEvent::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.ReadEvent.event_stream_id)
}
inline std::string* ReadEvent::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.ReadEvent.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadEvent::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.ReadEvent.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadEvent::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.ReadEvent.event_stream_id)
}

// required int64 event_number = 2;
inline bool ReadEvent::has_event_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadEvent::clear_event_number() {
  event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadEvent::event_number() const {
  // @@protoc_insertion_point(field_get:es.message.ReadEvent.event_number)
  return event_number_;
}
inline void ReadEvent::set_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadEvent.event_number)
}

// required bool resolve_link_tos = 3;
inline bool ReadEvent::has_resolve_link_tos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadEvent::clear_resolve_link_tos() {
  resolve_link_tos_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ReadEvent::resolve_link_tos() const {
  // @@protoc_insertion_point(field_get:es.message.ReadEvent.resolve_link_tos)
  return resolve_link_tos_;
}
inline void ReadEvent::set_resolve_link_tos(bool value) {
  _has_bits_[0] |= 0x00000004u;
  resolve_link_tos_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadEvent.resolve_link_tos)
}

// required bool require_master = 4;
inline bool ReadEvent::has_require_master() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadEvent::clear_require_master() {
  require_master_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReadEvent::require_master() const {
  // @@protoc_insertion_point(field_get:es.message.ReadEvent.require_master)
  return require_master_;
}
inline void ReadEvent::set_require_master(bool value) {
  _has_bits_[0] |= 0x00000008u;
  require_master_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadEvent.require_master)
}

// -------------------------------------------------------------------

// ReadEventCompleted

// required .es.message.ReadEventCompleted.ReadEventResult result = 1;
inline bool ReadEventCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadEventCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::es::message::ReadEventCompleted_ReadEventResult ReadEventCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.ReadEventCompleted.result)
  return static_cast< ::es::message::ReadEventCompleted_ReadEventResult >(result_);
}
inline void ReadEventCompleted::set_result(::es::message::ReadEventCompleted_ReadEventResult value) {
  assert(::es::message::ReadEventCompleted_ReadEventResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadEventCompleted.result)
}

// required .es.message.ResolvedIndexedEvent event = 2;
inline bool ReadEventCompleted::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadEventCompleted::clear_event() {
  if (event_ != nullptr) event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::es::message::ResolvedIndexedEvent& ReadEventCompleted::event() const {
  const ::es::message::ResolvedIndexedEvent* p = event_;
  // @@protoc_insertion_point(field_get:es.message.ReadEventCompleted.event)
  return p != nullptr ? *p : *reinterpret_cast<const ::es::message::ResolvedIndexedEvent*>(
      &::es::message::_ResolvedIndexedEvent_default_instance_);
}
inline ::es::message::ResolvedIndexedEvent* ReadEventCompleted::release_event() {
  // @@protoc_insertion_point(field_release:es.message.ReadEventCompleted.event)
  _has_bits_[0] &= ~0x00000002u;
  ::es::message::ResolvedIndexedEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::es::message::ResolvedIndexedEvent* ReadEventCompleted::mutable_event() {
  _has_bits_[0] |= 0x00000002u;
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::es::message::ResolvedIndexedEvent>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:es.message.ReadEventCompleted.event)
  return event_;
}
inline void ReadEventCompleted::set_allocated_event(::es::message::ResolvedIndexedEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:es.message.ReadEventCompleted.event)
}

// optional string error = 3;
inline bool ReadEventCompleted::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadEventCompleted::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadEventCompleted::error() const {
  // @@protoc_insertion_point(field_get:es.message.ReadEventCompleted.error)
  return error_.GetNoArena();
}
inline void ReadEventCompleted::set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.ReadEventCompleted.error)
}
inline void ReadEventCompleted::set_error(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.ReadEventCompleted.error)
}
inline void ReadEventCompleted::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.ReadEventCompleted.error)
}
inline void ReadEventCompleted::set_error(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.ReadEventCompleted.error)
}
inline std::string* ReadEventCompleted::mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.ReadEventCompleted.error)
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadEventCompleted::release_error() {
  // @@protoc_insertion_point(field_release:es.message.ReadEventCompleted.error)
  if (!has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadEventCompleted::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:es.message.ReadEventCompleted.error)
}

// -------------------------------------------------------------------

// ReadStreamEvents

// required string event_stream_id = 1;
inline bool ReadStreamEvents::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadStreamEvents::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadStreamEvents::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEvents.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void ReadStreamEvents::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEvents.event_stream_id)
}
inline void ReadStreamEvents::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.ReadStreamEvents.event_stream_id)
}
inline void ReadStreamEvents::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.ReadStreamEvents.event_stream_id)
}
inline void ReadStreamEvents::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.ReadStreamEvents.event_stream_id)
}
inline std::string* ReadStreamEvents::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.ReadStreamEvents.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadStreamEvents::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.ReadStreamEvents.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadStreamEvents::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.ReadStreamEvents.event_stream_id)
}

// required int64 from_event_number = 2;
inline bool ReadStreamEvents::has_from_event_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadStreamEvents::clear_from_event_number() {
  from_event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadStreamEvents::from_event_number() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEvents.from_event_number)
  return from_event_number_;
}
inline void ReadStreamEvents::set_from_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  from_event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEvents.from_event_number)
}

// required int32 max_count = 3;
inline bool ReadStreamEvents::has_max_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadStreamEvents::clear_max_count() {
  max_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadStreamEvents::max_count() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEvents.max_count)
  return max_count_;
}
inline void ReadStreamEvents::set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEvents.max_count)
}

// required bool resolve_link_tos = 4;
inline bool ReadStreamEvents::has_resolve_link_tos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadStreamEvents::clear_resolve_link_tos() {
  resolve_link_tos_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReadStreamEvents::resolve_link_tos() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEvents.resolve_link_tos)
  return resolve_link_tos_;
}
inline void ReadStreamEvents::set_resolve_link_tos(bool value) {
  _has_bits_[0] |= 0x00000008u;
  resolve_link_tos_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEvents.resolve_link_tos)
}

// required bool require_master = 5;
inline bool ReadStreamEvents::has_require_master() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReadStreamEvents::clear_require_master() {
  require_master_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ReadStreamEvents::require_master() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEvents.require_master)
  return require_master_;
}
inline void ReadStreamEvents::set_require_master(bool value) {
  _has_bits_[0] |= 0x00000010u;
  require_master_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEvents.require_master)
}

// -------------------------------------------------------------------

// ReadStreamEventsCompleted

// repeated .es.message.ResolvedIndexedEvent events = 1;
inline int ReadStreamEventsCompleted::events_size() const {
  return events_.size();
}
inline void ReadStreamEventsCompleted::clear_events() {
  events_.Clear();
}
inline ::es::message::ResolvedIndexedEvent* ReadStreamEventsCompleted::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:es.message.ReadStreamEventsCompleted.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedIndexedEvent >*
ReadStreamEventsCompleted::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:es.message.ReadStreamEventsCompleted.events)
  return &events_;
}
inline const ::es::message::ResolvedIndexedEvent& ReadStreamEventsCompleted::events(int index) const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEventsCompleted.events)
  return events_.Get(index);
}
inline ::es::message::ResolvedIndexedEvent* ReadStreamEventsCompleted::add_events() {
  // @@protoc_insertion_point(field_add:es.message.ReadStreamEventsCompleted.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedIndexedEvent >&
ReadStreamEventsCompleted::events() const {
  // @@protoc_insertion_point(field_list:es.message.ReadStreamEventsCompleted.events)
  return events_;
}

// required .es.message.ReadStreamEventsCompleted.ReadStreamResult result = 2;
inline bool ReadStreamEventsCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadStreamEventsCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::es::message::ReadStreamEventsCompleted_ReadStreamResult ReadStreamEventsCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEventsCompleted.result)
  return static_cast< ::es::message::ReadStreamEventsCompleted_ReadStreamResult >(result_);
}
inline void ReadStreamEventsCompleted::set_result(::es::message::ReadStreamEventsCompleted_ReadStreamResult value) {
  assert(::es::message::ReadStreamEventsCompleted_ReadStreamResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEventsCompleted.result)
}

// required int64 next_event_number = 3;
inline bool ReadStreamEventsCompleted::has_next_event_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadStreamEventsCompleted::clear_next_event_number() {
  next_event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadStreamEventsCompleted::next_event_number() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEventsCompleted.next_event_number)
  return next_event_number_;
}
inline void ReadStreamEventsCompleted::set_next_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  next_event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEventsCompleted.next_event_number)
}

// required int64 last_event_number = 4;
inline bool ReadStreamEventsCompleted::has_last_event_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReadStreamEventsCompleted::clear_last_event_number() {
  last_event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadStreamEventsCompleted::last_event_number() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEventsCompleted.last_event_number)
  return last_event_number_;
}
inline void ReadStreamEventsCompleted::set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEventsCompleted.last_event_number)
}

// required bool is_end_of_stream = 5;
inline bool ReadStreamEventsCompleted::has_is_end_of_stream() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadStreamEventsCompleted::clear_is_end_of_stream() {
  is_end_of_stream_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReadStreamEventsCompleted::is_end_of_stream() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEventsCompleted.is_end_of_stream)
  return is_end_of_stream_;
}
inline void ReadStreamEventsCompleted::set_is_end_of_stream(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_end_of_stream_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEventsCompleted.is_end_of_stream)
}

// required int64 last_commit_position = 6;
inline bool ReadStreamEventsCompleted::has_last_commit_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReadStreamEventsCompleted::clear_last_commit_position() {
  last_commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadStreamEventsCompleted::last_commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEventsCompleted.last_commit_position)
  return last_commit_position_;
}
inline void ReadStreamEventsCompleted::set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  last_commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEventsCompleted.last_commit_position)
}

// optional string error = 7;
inline bool ReadStreamEventsCompleted::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadStreamEventsCompleted::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadStreamEventsCompleted::error() const {
  // @@protoc_insertion_point(field_get:es.message.ReadStreamEventsCompleted.error)
  return error_.GetNoArena();
}
inline void ReadStreamEventsCompleted::set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.ReadStreamEventsCompleted.error)
}
inline void ReadStreamEventsCompleted::set_error(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.ReadStreamEventsCompleted.error)
}
inline void ReadStreamEventsCompleted::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.ReadStreamEventsCompleted.error)
}
inline void ReadStreamEventsCompleted::set_error(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.ReadStreamEventsCompleted.error)
}
inline std::string* ReadStreamEventsCompleted::mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.ReadStreamEventsCompleted.error)
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadStreamEventsCompleted::release_error() {
  // @@protoc_insertion_point(field_release:es.message.ReadStreamEventsCompleted.error)
  if (!has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadStreamEventsCompleted::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:es.message.ReadStreamEventsCompleted.error)
}

// -------------------------------------------------------------------

// ReadAllEvents

// required int64 commit_position = 1;
inline bool ReadAllEvents::has_commit_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadAllEvents::clear_commit_position() {
  commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadAllEvents::commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEvents.commit_position)
  return commit_position_;
}
inline void ReadAllEvents::set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEvents.commit_position)
}

// required int64 prepare_position = 2;
inline bool ReadAllEvents::has_prepare_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadAllEvents::clear_prepare_position() {
  prepare_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadAllEvents::prepare_position() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEvents.prepare_position)
  return prepare_position_;
}
inline void ReadAllEvents::set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  prepare_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEvents.prepare_position)
}

// required int32 max_count = 3;
inline bool ReadAllEvents::has_max_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadAllEvents::clear_max_count() {
  max_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadAllEvents::max_count() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEvents.max_count)
  return max_count_;
}
inline void ReadAllEvents::set_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEvents.max_count)
}

// required bool resolve_link_tos = 4;
inline bool ReadAllEvents::has_resolve_link_tos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadAllEvents::clear_resolve_link_tos() {
  resolve_link_tos_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReadAllEvents::resolve_link_tos() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEvents.resolve_link_tos)
  return resolve_link_tos_;
}
inline void ReadAllEvents::set_resolve_link_tos(bool value) {
  _has_bits_[0] |= 0x00000008u;
  resolve_link_tos_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEvents.resolve_link_tos)
}

// required bool require_master = 5;
inline bool ReadAllEvents::has_require_master() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReadAllEvents::clear_require_master() {
  require_master_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ReadAllEvents::require_master() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEvents.require_master)
  return require_master_;
}
inline void ReadAllEvents::set_require_master(bool value) {
  _has_bits_[0] |= 0x00000010u;
  require_master_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEvents.require_master)
}

// -------------------------------------------------------------------

// ReadAllEventsCompleted

// required int64 commit_position = 1;
inline bool ReadAllEventsCompleted::has_commit_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadAllEventsCompleted::clear_commit_position() {
  commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadAllEventsCompleted::commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEventsCompleted.commit_position)
  return commit_position_;
}
inline void ReadAllEventsCompleted::set_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEventsCompleted.commit_position)
}

// required int64 prepare_position = 2;
inline bool ReadAllEventsCompleted::has_prepare_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadAllEventsCompleted::clear_prepare_position() {
  prepare_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadAllEventsCompleted::prepare_position() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEventsCompleted.prepare_position)
  return prepare_position_;
}
inline void ReadAllEventsCompleted::set_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  prepare_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEventsCompleted.prepare_position)
}

// repeated .es.message.ResolvedEvent events = 3;
inline int ReadAllEventsCompleted::events_size() const {
  return events_.size();
}
inline void ReadAllEventsCompleted::clear_events() {
  events_.Clear();
}
inline ::es::message::ResolvedEvent* ReadAllEventsCompleted::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:es.message.ReadAllEventsCompleted.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedEvent >*
ReadAllEventsCompleted::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:es.message.ReadAllEventsCompleted.events)
  return &events_;
}
inline const ::es::message::ResolvedEvent& ReadAllEventsCompleted::events(int index) const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEventsCompleted.events)
  return events_.Get(index);
}
inline ::es::message::ResolvedEvent* ReadAllEventsCompleted::add_events() {
  // @@protoc_insertion_point(field_add:es.message.ReadAllEventsCompleted.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::es::message::ResolvedEvent >&
ReadAllEventsCompleted::events() const {
  // @@protoc_insertion_point(field_list:es.message.ReadAllEventsCompleted.events)
  return events_;
}

// required int64 next_commit_position = 4;
inline bool ReadAllEventsCompleted::has_next_commit_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadAllEventsCompleted::clear_next_commit_position() {
  next_commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadAllEventsCompleted::next_commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEventsCompleted.next_commit_position)
  return next_commit_position_;
}
inline void ReadAllEventsCompleted::set_next_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  next_commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEventsCompleted.next_commit_position)
}

// required int64 next_prepare_position = 5;
inline bool ReadAllEventsCompleted::has_next_prepare_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReadAllEventsCompleted::clear_next_prepare_position() {
  next_prepare_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadAllEventsCompleted::next_prepare_position() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEventsCompleted.next_prepare_position)
  return next_prepare_position_;
}
inline void ReadAllEventsCompleted::set_next_prepare_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  next_prepare_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEventsCompleted.next_prepare_position)
}

// optional .es.message.ReadAllEventsCompleted.ReadAllResult result = 6;
inline bool ReadAllEventsCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReadAllEventsCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::es::message::ReadAllEventsCompleted_ReadAllResult ReadAllEventsCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEventsCompleted.result)
  return static_cast< ::es::message::ReadAllEventsCompleted_ReadAllResult >(result_);
}
inline void ReadAllEventsCompleted::set_result(::es::message::ReadAllEventsCompleted_ReadAllResult value) {
  assert(::es::message::ReadAllEventsCompleted_ReadAllResult_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.ReadAllEventsCompleted.result)
}

// optional string error = 7;
inline bool ReadAllEventsCompleted::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadAllEventsCompleted::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadAllEventsCompleted::error() const {
  // @@protoc_insertion_point(field_get:es.message.ReadAllEventsCompleted.error)
  return error_.GetNoArena();
}
inline void ReadAllEventsCompleted::set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.ReadAllEventsCompleted.error)
}
inline void ReadAllEventsCompleted::set_error(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.ReadAllEventsCompleted.error)
}
inline void ReadAllEventsCompleted::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.ReadAllEventsCompleted.error)
}
inline void ReadAllEventsCompleted::set_error(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.ReadAllEventsCompleted.error)
}
inline std::string* ReadAllEventsCompleted::mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.ReadAllEventsCompleted.error)
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadAllEventsCompleted::release_error() {
  // @@protoc_insertion_point(field_release:es.message.ReadAllEventsCompleted.error)
  if (!has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadAllEventsCompleted::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:es.message.ReadAllEventsCompleted.error)
}

// -------------------------------------------------------------------

// CreatePersistentSubscription

// required string subscription_group_name = 1;
inline bool CreatePersistentSubscription::has_subscription_group_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatePersistentSubscription::clear_subscription_group_name() {
  subscription_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreatePersistentSubscription::subscription_group_name() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.subscription_group_name)
  return subscription_group_name_.GetNoArena();
}
inline void CreatePersistentSubscription::set_subscription_group_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.subscription_group_name)
}
inline void CreatePersistentSubscription::set_subscription_group_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.CreatePersistentSubscription.subscription_group_name)
}
inline void CreatePersistentSubscription::set_subscription_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.CreatePersistentSubscription.subscription_group_name)
}
inline void CreatePersistentSubscription::set_subscription_group_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.CreatePersistentSubscription.subscription_group_name)
}
inline std::string* CreatePersistentSubscription::mutable_subscription_group_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.CreatePersistentSubscription.subscription_group_name)
  return subscription_group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePersistentSubscription::release_subscription_group_name() {
  // @@protoc_insertion_point(field_release:es.message.CreatePersistentSubscription.subscription_group_name)
  if (!has_subscription_group_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subscription_group_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePersistentSubscription::set_allocated_subscription_group_name(std::string* subscription_group_name) {
  if (subscription_group_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscription_group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_group_name);
  // @@protoc_insertion_point(field_set_allocated:es.message.CreatePersistentSubscription.subscription_group_name)
}

// required string event_stream_id = 2;
inline bool CreatePersistentSubscription::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatePersistentSubscription::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreatePersistentSubscription::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void CreatePersistentSubscription::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.event_stream_id)
}
inline void CreatePersistentSubscription::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.CreatePersistentSubscription.event_stream_id)
}
inline void CreatePersistentSubscription::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.CreatePersistentSubscription.event_stream_id)
}
inline void CreatePersistentSubscription::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.CreatePersistentSubscription.event_stream_id)
}
inline std::string* CreatePersistentSubscription::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:es.message.CreatePersistentSubscription.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePersistentSubscription::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.CreatePersistentSubscription.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePersistentSubscription::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.CreatePersistentSubscription.event_stream_id)
}

// required bool resolve_link_tos = 3;
inline bool CreatePersistentSubscription::has_resolve_link_tos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreatePersistentSubscription::clear_resolve_link_tos() {
  resolve_link_tos_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CreatePersistentSubscription::resolve_link_tos() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.resolve_link_tos)
  return resolve_link_tos_;
}
inline void CreatePersistentSubscription::set_resolve_link_tos(bool value) {
  _has_bits_[0] |= 0x00000020u;
  resolve_link_tos_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.resolve_link_tos)
}

// required int64 start_from = 4;
inline bool CreatePersistentSubscription::has_start_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreatePersistentSubscription::clear_start_from() {
  start_from_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreatePersistentSubscription::start_from() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.start_from)
  return start_from_;
}
inline void CreatePersistentSubscription::set_start_from(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  start_from_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.start_from)
}

// required int32 message_timeout_milliseconds = 5;
inline bool CreatePersistentSubscription::has_message_timeout_milliseconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreatePersistentSubscription::clear_message_timeout_milliseconds() {
  message_timeout_milliseconds_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePersistentSubscription::message_timeout_milliseconds() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.message_timeout_milliseconds)
  return message_timeout_milliseconds_;
}
inline void CreatePersistentSubscription::set_message_timeout_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  message_timeout_milliseconds_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.message_timeout_milliseconds)
}

// required bool record_statistics = 6;
inline bool CreatePersistentSubscription::has_record_statistics() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreatePersistentSubscription::clear_record_statistics() {
  record_statistics_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CreatePersistentSubscription::record_statistics() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.record_statistics)
  return record_statistics_;
}
inline void CreatePersistentSubscription::set_record_statistics(bool value) {
  _has_bits_[0] |= 0x00000040u;
  record_statistics_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.record_statistics)
}

// required int32 live_buffer_size = 7;
inline bool CreatePersistentSubscription::has_live_buffer_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreatePersistentSubscription::clear_live_buffer_size() {
  live_buffer_size_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePersistentSubscription::live_buffer_size() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.live_buffer_size)
  return live_buffer_size_;
}
inline void CreatePersistentSubscription::set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  live_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.live_buffer_size)
}

// required int32 read_batch_size = 8;
inline bool CreatePersistentSubscription::has_read_batch_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreatePersistentSubscription::clear_read_batch_size() {
  read_batch_size_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePersistentSubscription::read_batch_size() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.read_batch_size)
  return read_batch_size_;
}
inline void CreatePersistentSubscription::set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  read_batch_size_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.read_batch_size)
}

// required int32 buffer_size = 9;
inline bool CreatePersistentSubscription::has_buffer_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreatePersistentSubscription::clear_buffer_size() {
  buffer_size_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePersistentSubscription::buffer_size() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.buffer_size)
  return buffer_size_;
}
inline void CreatePersistentSubscription::set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  buffer_size_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.buffer_size)
}

// required int32 max_retry_count = 10;
inline bool CreatePersistentSubscription::has_max_retry_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CreatePersistentSubscription::clear_max_retry_count() {
  max_retry_count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePersistentSubscription::max_retry_count() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.max_retry_count)
  return max_retry_count_;
}
inline void CreatePersistentSubscription::set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  max_retry_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.max_retry_count)
}

// required bool prefer_round_robin = 11;
inline bool CreatePersistentSubscription::has_prefer_round_robin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreatePersistentSubscription::clear_prefer_round_robin() {
  prefer_round_robin_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CreatePersistentSubscription::prefer_round_robin() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.prefer_round_robin)
  return prefer_round_robin_;
}
inline void CreatePersistentSubscription::set_prefer_round_robin(bool value) {
  _has_bits_[0] |= 0x00000080u;
  prefer_round_robin_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.prefer_round_robin)
}

// required int32 checkpoint_after_time = 12;
inline bool CreatePersistentSubscription::has_checkpoint_after_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CreatePersistentSubscription::clear_checkpoint_after_time() {
  checkpoint_after_time_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePersistentSubscription::checkpoint_after_time() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.checkpoint_after_time)
  return checkpoint_after_time_;
}
inline void CreatePersistentSubscription::set_checkpoint_after_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  checkpoint_after_time_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.checkpoint_after_time)
}

// required int32 checkpoint_max_count = 13;
inline bool CreatePersistentSubscription::has_checkpoint_max_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CreatePersistentSubscription::clear_checkpoint_max_count() {
  checkpoint_max_count_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePersistentSubscription::checkpoint_max_count() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.checkpoint_max_count)
  return checkpoint_max_count_;
}
inline void CreatePersistentSubscription::set_checkpoint_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  checkpoint_max_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.checkpoint_max_count)
}

// required int32 checkpoint_min_count = 14;
inline bool CreatePersistentSubscription::has_checkpoint_min_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CreatePersistentSubscription::clear_checkpoint_min_count() {
  checkpoint_min_count_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePersistentSubscription::checkpoint_min_count() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.checkpoint_min_count)
  return checkpoint_min_count_;
}
inline void CreatePersistentSubscription::set_checkpoint_min_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  checkpoint_min_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.checkpoint_min_count)
}

// required int32 subscriber_max_count = 15;
inline bool CreatePersistentSubscription::has_subscriber_max_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CreatePersistentSubscription::clear_subscriber_max_count() {
  subscriber_max_count_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePersistentSubscription::subscriber_max_count() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.subscriber_max_count)
  return subscriber_max_count_;
}
inline void CreatePersistentSubscription::set_subscriber_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  subscriber_max_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.subscriber_max_count)
}

// optional string named_consumer_strategy = 16;
inline bool CreatePersistentSubscription::has_named_consumer_strategy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreatePersistentSubscription::clear_named_consumer_strategy() {
  named_consumer_strategy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CreatePersistentSubscription::named_consumer_strategy() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscription.named_consumer_strategy)
  return named_consumer_strategy_.GetNoArena();
}
inline void CreatePersistentSubscription::set_named_consumer_strategy(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  named_consumer_strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscription.named_consumer_strategy)
}
inline void CreatePersistentSubscription::set_named_consumer_strategy(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  named_consumer_strategy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.CreatePersistentSubscription.named_consumer_strategy)
}
inline void CreatePersistentSubscription::set_named_consumer_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  named_consumer_strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.CreatePersistentSubscription.named_consumer_strategy)
}
inline void CreatePersistentSubscription::set_named_consumer_strategy(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  named_consumer_strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.CreatePersistentSubscription.named_consumer_strategy)
}
inline std::string* CreatePersistentSubscription::mutable_named_consumer_strategy() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:es.message.CreatePersistentSubscription.named_consumer_strategy)
  return named_consumer_strategy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePersistentSubscription::release_named_consumer_strategy() {
  // @@protoc_insertion_point(field_release:es.message.CreatePersistentSubscription.named_consumer_strategy)
  if (!has_named_consumer_strategy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return named_consumer_strategy_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePersistentSubscription::set_allocated_named_consumer_strategy(std::string* named_consumer_strategy) {
  if (named_consumer_strategy != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  named_consumer_strategy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), named_consumer_strategy);
  // @@protoc_insertion_point(field_set_allocated:es.message.CreatePersistentSubscription.named_consumer_strategy)
}

// -------------------------------------------------------------------

// DeletePersistentSubscription

// required string subscription_group_name = 1;
inline bool DeletePersistentSubscription::has_subscription_group_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeletePersistentSubscription::clear_subscription_group_name() {
  subscription_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeletePersistentSubscription::subscription_group_name() const {
  // @@protoc_insertion_point(field_get:es.message.DeletePersistentSubscription.subscription_group_name)
  return subscription_group_name_.GetNoArena();
}
inline void DeletePersistentSubscription::set_subscription_group_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.DeletePersistentSubscription.subscription_group_name)
}
inline void DeletePersistentSubscription::set_subscription_group_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.DeletePersistentSubscription.subscription_group_name)
}
inline void DeletePersistentSubscription::set_subscription_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.DeletePersistentSubscription.subscription_group_name)
}
inline void DeletePersistentSubscription::set_subscription_group_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.DeletePersistentSubscription.subscription_group_name)
}
inline std::string* DeletePersistentSubscription::mutable_subscription_group_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.DeletePersistentSubscription.subscription_group_name)
  return subscription_group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeletePersistentSubscription::release_subscription_group_name() {
  // @@protoc_insertion_point(field_release:es.message.DeletePersistentSubscription.subscription_group_name)
  if (!has_subscription_group_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subscription_group_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePersistentSubscription::set_allocated_subscription_group_name(std::string* subscription_group_name) {
  if (subscription_group_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscription_group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_group_name);
  // @@protoc_insertion_point(field_set_allocated:es.message.DeletePersistentSubscription.subscription_group_name)
}

// required string event_stream_id = 2;
inline bool DeletePersistentSubscription::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeletePersistentSubscription::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeletePersistentSubscription::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.DeletePersistentSubscription.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void DeletePersistentSubscription::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.DeletePersistentSubscription.event_stream_id)
}
inline void DeletePersistentSubscription::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.DeletePersistentSubscription.event_stream_id)
}
inline void DeletePersistentSubscription::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.DeletePersistentSubscription.event_stream_id)
}
inline void DeletePersistentSubscription::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.DeletePersistentSubscription.event_stream_id)
}
inline std::string* DeletePersistentSubscription::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:es.message.DeletePersistentSubscription.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeletePersistentSubscription::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.DeletePersistentSubscription.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePersistentSubscription::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.DeletePersistentSubscription.event_stream_id)
}

// -------------------------------------------------------------------

// UpdatePersistentSubscription

// required string subscription_group_name = 1;
inline bool UpdatePersistentSubscription::has_subscription_group_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePersistentSubscription::clear_subscription_group_name() {
  subscription_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdatePersistentSubscription::subscription_group_name() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.subscription_group_name)
  return subscription_group_name_.GetNoArena();
}
inline void UpdatePersistentSubscription::set_subscription_group_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.subscription_group_name)
}
inline void UpdatePersistentSubscription::set_subscription_group_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.UpdatePersistentSubscription.subscription_group_name)
}
inline void UpdatePersistentSubscription::set_subscription_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.UpdatePersistentSubscription.subscription_group_name)
}
inline void UpdatePersistentSubscription::set_subscription_group_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subscription_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.UpdatePersistentSubscription.subscription_group_name)
}
inline std::string* UpdatePersistentSubscription::mutable_subscription_group_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.UpdatePersistentSubscription.subscription_group_name)
  return subscription_group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdatePersistentSubscription::release_subscription_group_name() {
  // @@protoc_insertion_point(field_release:es.message.UpdatePersistentSubscription.subscription_group_name)
  if (!has_subscription_group_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subscription_group_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePersistentSubscription::set_allocated_subscription_group_name(std::string* subscription_group_name) {
  if (subscription_group_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscription_group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_group_name);
  // @@protoc_insertion_point(field_set_allocated:es.message.UpdatePersistentSubscription.subscription_group_name)
}

// required string event_stream_id = 2;
inline bool UpdatePersistentSubscription::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdatePersistentSubscription::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UpdatePersistentSubscription::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void UpdatePersistentSubscription::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.event_stream_id)
}
inline void UpdatePersistentSubscription::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.UpdatePersistentSubscription.event_stream_id)
}
inline void UpdatePersistentSubscription::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.UpdatePersistentSubscription.event_stream_id)
}
inline void UpdatePersistentSubscription::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.UpdatePersistentSubscription.event_stream_id)
}
inline std::string* UpdatePersistentSubscription::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:es.message.UpdatePersistentSubscription.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdatePersistentSubscription::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.UpdatePersistentSubscription.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePersistentSubscription::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.UpdatePersistentSubscription.event_stream_id)
}

// required bool resolve_link_tos = 3;
inline bool UpdatePersistentSubscription::has_resolve_link_tos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdatePersistentSubscription::clear_resolve_link_tos() {
  resolve_link_tos_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool UpdatePersistentSubscription::resolve_link_tos() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.resolve_link_tos)
  return resolve_link_tos_;
}
inline void UpdatePersistentSubscription::set_resolve_link_tos(bool value) {
  _has_bits_[0] |= 0x00000020u;
  resolve_link_tos_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.resolve_link_tos)
}

// required int64 start_from = 4;
inline bool UpdatePersistentSubscription::has_start_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdatePersistentSubscription::clear_start_from() {
  start_from_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdatePersistentSubscription::start_from() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.start_from)
  return start_from_;
}
inline void UpdatePersistentSubscription::set_start_from(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  start_from_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.start_from)
}

// required int32 message_timeout_milliseconds = 5;
inline bool UpdatePersistentSubscription::has_message_timeout_milliseconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdatePersistentSubscription::clear_message_timeout_milliseconds() {
  message_timeout_milliseconds_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePersistentSubscription::message_timeout_milliseconds() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.message_timeout_milliseconds)
  return message_timeout_milliseconds_;
}
inline void UpdatePersistentSubscription::set_message_timeout_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  message_timeout_milliseconds_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.message_timeout_milliseconds)
}

// required bool record_statistics = 6;
inline bool UpdatePersistentSubscription::has_record_statistics() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdatePersistentSubscription::clear_record_statistics() {
  record_statistics_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool UpdatePersistentSubscription::record_statistics() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.record_statistics)
  return record_statistics_;
}
inline void UpdatePersistentSubscription::set_record_statistics(bool value) {
  _has_bits_[0] |= 0x00000040u;
  record_statistics_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.record_statistics)
}

// required int32 live_buffer_size = 7;
inline bool UpdatePersistentSubscription::has_live_buffer_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UpdatePersistentSubscription::clear_live_buffer_size() {
  live_buffer_size_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePersistentSubscription::live_buffer_size() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.live_buffer_size)
  return live_buffer_size_;
}
inline void UpdatePersistentSubscription::set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  live_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.live_buffer_size)
}

// required int32 read_batch_size = 8;
inline bool UpdatePersistentSubscription::has_read_batch_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UpdatePersistentSubscription::clear_read_batch_size() {
  read_batch_size_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePersistentSubscription::read_batch_size() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.read_batch_size)
  return read_batch_size_;
}
inline void UpdatePersistentSubscription::set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  read_batch_size_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.read_batch_size)
}

// required int32 buffer_size = 9;
inline bool UpdatePersistentSubscription::has_buffer_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UpdatePersistentSubscription::clear_buffer_size() {
  buffer_size_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePersistentSubscription::buffer_size() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.buffer_size)
  return buffer_size_;
}
inline void UpdatePersistentSubscription::set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  buffer_size_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.buffer_size)
}

// required int32 max_retry_count = 10;
inline bool UpdatePersistentSubscription::has_max_retry_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UpdatePersistentSubscription::clear_max_retry_count() {
  max_retry_count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePersistentSubscription::max_retry_count() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.max_retry_count)
  return max_retry_count_;
}
inline void UpdatePersistentSubscription::set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  max_retry_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.max_retry_count)
}

// required bool prefer_round_robin = 11;
inline bool UpdatePersistentSubscription::has_prefer_round_robin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpdatePersistentSubscription::clear_prefer_round_robin() {
  prefer_round_robin_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool UpdatePersistentSubscription::prefer_round_robin() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.prefer_round_robin)
  return prefer_round_robin_;
}
inline void UpdatePersistentSubscription::set_prefer_round_robin(bool value) {
  _has_bits_[0] |= 0x00000080u;
  prefer_round_robin_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.prefer_round_robin)
}

// required int32 checkpoint_after_time = 12;
inline bool UpdatePersistentSubscription::has_checkpoint_after_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UpdatePersistentSubscription::clear_checkpoint_after_time() {
  checkpoint_after_time_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePersistentSubscription::checkpoint_after_time() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.checkpoint_after_time)
  return checkpoint_after_time_;
}
inline void UpdatePersistentSubscription::set_checkpoint_after_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  checkpoint_after_time_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.checkpoint_after_time)
}

// required int32 checkpoint_max_count = 13;
inline bool UpdatePersistentSubscription::has_checkpoint_max_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UpdatePersistentSubscription::clear_checkpoint_max_count() {
  checkpoint_max_count_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePersistentSubscription::checkpoint_max_count() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.checkpoint_max_count)
  return checkpoint_max_count_;
}
inline void UpdatePersistentSubscription::set_checkpoint_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  checkpoint_max_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.checkpoint_max_count)
}

// required int32 checkpoint_min_count = 14;
inline bool UpdatePersistentSubscription::has_checkpoint_min_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UpdatePersistentSubscription::clear_checkpoint_min_count() {
  checkpoint_min_count_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePersistentSubscription::checkpoint_min_count() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.checkpoint_min_count)
  return checkpoint_min_count_;
}
inline void UpdatePersistentSubscription::set_checkpoint_min_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  checkpoint_min_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.checkpoint_min_count)
}

// required int32 subscriber_max_count = 15;
inline bool UpdatePersistentSubscription::has_subscriber_max_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UpdatePersistentSubscription::clear_subscriber_max_count() {
  subscriber_max_count_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePersistentSubscription::subscriber_max_count() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.subscriber_max_count)
  return subscriber_max_count_;
}
inline void UpdatePersistentSubscription::set_subscriber_max_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  subscriber_max_count_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.subscriber_max_count)
}

// optional string named_consumer_strategy = 16;
inline bool UpdatePersistentSubscription::has_named_consumer_strategy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdatePersistentSubscription::clear_named_consumer_strategy() {
  named_consumer_strategy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UpdatePersistentSubscription::named_consumer_strategy() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscription.named_consumer_strategy)
  return named_consumer_strategy_.GetNoArena();
}
inline void UpdatePersistentSubscription::set_named_consumer_strategy(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  named_consumer_strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscription.named_consumer_strategy)
}
inline void UpdatePersistentSubscription::set_named_consumer_strategy(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  named_consumer_strategy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.UpdatePersistentSubscription.named_consumer_strategy)
}
inline void UpdatePersistentSubscription::set_named_consumer_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  named_consumer_strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.UpdatePersistentSubscription.named_consumer_strategy)
}
inline void UpdatePersistentSubscription::set_named_consumer_strategy(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  named_consumer_strategy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.UpdatePersistentSubscription.named_consumer_strategy)
}
inline std::string* UpdatePersistentSubscription::mutable_named_consumer_strategy() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:es.message.UpdatePersistentSubscription.named_consumer_strategy)
  return named_consumer_strategy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdatePersistentSubscription::release_named_consumer_strategy() {
  // @@protoc_insertion_point(field_release:es.message.UpdatePersistentSubscription.named_consumer_strategy)
  if (!has_named_consumer_strategy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return named_consumer_strategy_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePersistentSubscription::set_allocated_named_consumer_strategy(std::string* named_consumer_strategy) {
  if (named_consumer_strategy != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  named_consumer_strategy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), named_consumer_strategy);
  // @@protoc_insertion_point(field_set_allocated:es.message.UpdatePersistentSubscription.named_consumer_strategy)
}

// -------------------------------------------------------------------

// UpdatePersistentSubscriptionCompleted

// required .es.message.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult result = 1;
inline bool UpdatePersistentSubscriptionCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdatePersistentSubscriptionCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult UpdatePersistentSubscriptionCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscriptionCompleted.result)
  return static_cast< ::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult >(result_);
}
inline void UpdatePersistentSubscriptionCompleted::set_result(::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult value) {
  assert(::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscriptionCompleted.result)
}

// optional string reason = 2;
inline bool UpdatePersistentSubscriptionCompleted::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePersistentSubscriptionCompleted::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdatePersistentSubscriptionCompleted::reason() const {
  // @@protoc_insertion_point(field_get:es.message.UpdatePersistentSubscriptionCompleted.reason)
  return reason_.GetNoArena();
}
inline void UpdatePersistentSubscriptionCompleted::set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.UpdatePersistentSubscriptionCompleted.reason)
}
inline void UpdatePersistentSubscriptionCompleted::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.UpdatePersistentSubscriptionCompleted.reason)
}
inline void UpdatePersistentSubscriptionCompleted::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.UpdatePersistentSubscriptionCompleted.reason)
}
inline void UpdatePersistentSubscriptionCompleted::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.UpdatePersistentSubscriptionCompleted.reason)
}
inline std::string* UpdatePersistentSubscriptionCompleted::mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.UpdatePersistentSubscriptionCompleted.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdatePersistentSubscriptionCompleted::release_reason() {
  // @@protoc_insertion_point(field_release:es.message.UpdatePersistentSubscriptionCompleted.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePersistentSubscriptionCompleted::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:es.message.UpdatePersistentSubscriptionCompleted.reason)
}

// -------------------------------------------------------------------

// CreatePersistentSubscriptionCompleted

// required .es.message.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult result = 1;
inline bool CreatePersistentSubscriptionCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatePersistentSubscriptionCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult CreatePersistentSubscriptionCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscriptionCompleted.result)
  return static_cast< ::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult >(result_);
}
inline void CreatePersistentSubscriptionCompleted::set_result(::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult value) {
  assert(::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscriptionCompleted.result)
}

// optional string reason = 2;
inline bool CreatePersistentSubscriptionCompleted::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatePersistentSubscriptionCompleted::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreatePersistentSubscriptionCompleted::reason() const {
  // @@protoc_insertion_point(field_get:es.message.CreatePersistentSubscriptionCompleted.reason)
  return reason_.GetNoArena();
}
inline void CreatePersistentSubscriptionCompleted::set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.CreatePersistentSubscriptionCompleted.reason)
}
inline void CreatePersistentSubscriptionCompleted::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.CreatePersistentSubscriptionCompleted.reason)
}
inline void CreatePersistentSubscriptionCompleted::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.CreatePersistentSubscriptionCompleted.reason)
}
inline void CreatePersistentSubscriptionCompleted::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.CreatePersistentSubscriptionCompleted.reason)
}
inline std::string* CreatePersistentSubscriptionCompleted::mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.CreatePersistentSubscriptionCompleted.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePersistentSubscriptionCompleted::release_reason() {
  // @@protoc_insertion_point(field_release:es.message.CreatePersistentSubscriptionCompleted.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePersistentSubscriptionCompleted::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:es.message.CreatePersistentSubscriptionCompleted.reason)
}

// -------------------------------------------------------------------

// DeletePersistentSubscriptionCompleted

// required .es.message.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult result = 1;
inline bool DeletePersistentSubscriptionCompleted::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeletePersistentSubscriptionCompleted::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult DeletePersistentSubscriptionCompleted::result() const {
  // @@protoc_insertion_point(field_get:es.message.DeletePersistentSubscriptionCompleted.result)
  return static_cast< ::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult >(result_);
}
inline void DeletePersistentSubscriptionCompleted::set_result(::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult value) {
  assert(::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.DeletePersistentSubscriptionCompleted.result)
}

// optional string reason = 2;
inline bool DeletePersistentSubscriptionCompleted::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeletePersistentSubscriptionCompleted::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeletePersistentSubscriptionCompleted::reason() const {
  // @@protoc_insertion_point(field_get:es.message.DeletePersistentSubscriptionCompleted.reason)
  return reason_.GetNoArena();
}
inline void DeletePersistentSubscriptionCompleted::set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.DeletePersistentSubscriptionCompleted.reason)
}
inline void DeletePersistentSubscriptionCompleted::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.DeletePersistentSubscriptionCompleted.reason)
}
inline void DeletePersistentSubscriptionCompleted::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.DeletePersistentSubscriptionCompleted.reason)
}
inline void DeletePersistentSubscriptionCompleted::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.DeletePersistentSubscriptionCompleted.reason)
}
inline std::string* DeletePersistentSubscriptionCompleted::mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.DeletePersistentSubscriptionCompleted.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeletePersistentSubscriptionCompleted::release_reason() {
  // @@protoc_insertion_point(field_release:es.message.DeletePersistentSubscriptionCompleted.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePersistentSubscriptionCompleted::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:es.message.DeletePersistentSubscriptionCompleted.reason)
}

// -------------------------------------------------------------------

// ConnectToPersistentSubscription

// required string subscription_id = 1;
inline bool ConnectToPersistentSubscription::has_subscription_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectToPersistentSubscription::clear_subscription_id() {
  subscription_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConnectToPersistentSubscription::subscription_id() const {
  // @@protoc_insertion_point(field_get:es.message.ConnectToPersistentSubscription.subscription_id)
  return subscription_id_.GetNoArena();
}
inline void ConnectToPersistentSubscription::set_subscription_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.ConnectToPersistentSubscription.subscription_id)
}
inline void ConnectToPersistentSubscription::set_subscription_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.ConnectToPersistentSubscription.subscription_id)
}
inline void ConnectToPersistentSubscription::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.ConnectToPersistentSubscription.subscription_id)
}
inline void ConnectToPersistentSubscription::set_subscription_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.ConnectToPersistentSubscription.subscription_id)
}
inline std::string* ConnectToPersistentSubscription::mutable_subscription_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.ConnectToPersistentSubscription.subscription_id)
  return subscription_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectToPersistentSubscription::release_subscription_id() {
  // @@protoc_insertion_point(field_release:es.message.ConnectToPersistentSubscription.subscription_id)
  if (!has_subscription_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subscription_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectToPersistentSubscription::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscription_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.ConnectToPersistentSubscription.subscription_id)
}

// required string event_stream_id = 2;
inline bool ConnectToPersistentSubscription::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectToPersistentSubscription::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConnectToPersistentSubscription::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.ConnectToPersistentSubscription.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void ConnectToPersistentSubscription::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.ConnectToPersistentSubscription.event_stream_id)
}
inline void ConnectToPersistentSubscription::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.ConnectToPersistentSubscription.event_stream_id)
}
inline void ConnectToPersistentSubscription::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.ConnectToPersistentSubscription.event_stream_id)
}
inline void ConnectToPersistentSubscription::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.ConnectToPersistentSubscription.event_stream_id)
}
inline std::string* ConnectToPersistentSubscription::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:es.message.ConnectToPersistentSubscription.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectToPersistentSubscription::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.ConnectToPersistentSubscription.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectToPersistentSubscription::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.ConnectToPersistentSubscription.event_stream_id)
}

// required int32 allowed_in_flight_messages = 3;
inline bool ConnectToPersistentSubscription::has_allowed_in_flight_messages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectToPersistentSubscription::clear_allowed_in_flight_messages() {
  allowed_in_flight_messages_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectToPersistentSubscription::allowed_in_flight_messages() const {
  // @@protoc_insertion_point(field_get:es.message.ConnectToPersistentSubscription.allowed_in_flight_messages)
  return allowed_in_flight_messages_;
}
inline void ConnectToPersistentSubscription::set_allowed_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  allowed_in_flight_messages_ = value;
  // @@protoc_insertion_point(field_set:es.message.ConnectToPersistentSubscription.allowed_in_flight_messages)
}

// -------------------------------------------------------------------

// PersistentSubscriptionAckEvents

// required string subscription_id = 1;
inline bool PersistentSubscriptionAckEvents::has_subscription_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistentSubscriptionAckEvents::clear_subscription_id() {
  subscription_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PersistentSubscriptionAckEvents::subscription_id() const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionAckEvents.subscription_id)
  return subscription_id_.GetNoArena();
}
inline void PersistentSubscriptionAckEvents::set_subscription_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionAckEvents.subscription_id)
}
inline void PersistentSubscriptionAckEvents::set_subscription_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.PersistentSubscriptionAckEvents.subscription_id)
}
inline void PersistentSubscriptionAckEvents::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.PersistentSubscriptionAckEvents.subscription_id)
}
inline void PersistentSubscriptionAckEvents::set_subscription_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.PersistentSubscriptionAckEvents.subscription_id)
}
inline std::string* PersistentSubscriptionAckEvents::mutable_subscription_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.PersistentSubscriptionAckEvents.subscription_id)
  return subscription_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistentSubscriptionAckEvents::release_subscription_id() {
  // @@protoc_insertion_point(field_release:es.message.PersistentSubscriptionAckEvents.subscription_id)
  if (!has_subscription_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subscription_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistentSubscriptionAckEvents::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscription_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.PersistentSubscriptionAckEvents.subscription_id)
}

// repeated bytes processed_event_ids = 2;
inline int PersistentSubscriptionAckEvents::processed_event_ids_size() const {
  return processed_event_ids_.size();
}
inline void PersistentSubscriptionAckEvents::clear_processed_event_ids() {
  processed_event_ids_.Clear();
}
inline const std::string& PersistentSubscriptionAckEvents::processed_event_ids(int index) const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
  return processed_event_ids_.Get(index);
}
inline std::string* PersistentSubscriptionAckEvents::mutable_processed_event_ids(int index) {
  // @@protoc_insertion_point(field_mutable:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
  return processed_event_ids_.Mutable(index);
}
inline void PersistentSubscriptionAckEvents::set_processed_event_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
  processed_event_ids_.Mutable(index)->assign(value);
}
inline void PersistentSubscriptionAckEvents::set_processed_event_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
  processed_event_ids_.Mutable(index)->assign(std::move(value));
}
inline void PersistentSubscriptionAckEvents::set_processed_event_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processed_event_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
}
inline void PersistentSubscriptionAckEvents::set_processed_event_ids(int index, const void* value, size_t size) {
  processed_event_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
}
inline std::string* PersistentSubscriptionAckEvents::add_processed_event_ids() {
  // @@protoc_insertion_point(field_add_mutable:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
  return processed_event_ids_.Add();
}
inline void PersistentSubscriptionAckEvents::add_processed_event_ids(const std::string& value) {
  processed_event_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
}
inline void PersistentSubscriptionAckEvents::add_processed_event_ids(std::string&& value) {
  processed_event_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
}
inline void PersistentSubscriptionAckEvents::add_processed_event_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processed_event_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
}
inline void PersistentSubscriptionAckEvents::add_processed_event_ids(const void* value, size_t size) {
  processed_event_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PersistentSubscriptionAckEvents::processed_event_ids() const {
  // @@protoc_insertion_point(field_list:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
  return processed_event_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PersistentSubscriptionAckEvents::mutable_processed_event_ids() {
  // @@protoc_insertion_point(field_mutable_list:es.message.PersistentSubscriptionAckEvents.processed_event_ids)
  return &processed_event_ids_;
}

// -------------------------------------------------------------------

// PersistentSubscriptionNakEvents

// required string subscription_id = 1;
inline bool PersistentSubscriptionNakEvents::has_subscription_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistentSubscriptionNakEvents::clear_subscription_id() {
  subscription_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PersistentSubscriptionNakEvents::subscription_id() const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionNakEvents.subscription_id)
  return subscription_id_.GetNoArena();
}
inline void PersistentSubscriptionNakEvents::set_subscription_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionNakEvents.subscription_id)
}
inline void PersistentSubscriptionNakEvents::set_subscription_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.PersistentSubscriptionNakEvents.subscription_id)
}
inline void PersistentSubscriptionNakEvents::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.PersistentSubscriptionNakEvents.subscription_id)
}
inline void PersistentSubscriptionNakEvents::set_subscription_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.PersistentSubscriptionNakEvents.subscription_id)
}
inline std::string* PersistentSubscriptionNakEvents::mutable_subscription_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.PersistentSubscriptionNakEvents.subscription_id)
  return subscription_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistentSubscriptionNakEvents::release_subscription_id() {
  // @@protoc_insertion_point(field_release:es.message.PersistentSubscriptionNakEvents.subscription_id)
  if (!has_subscription_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subscription_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistentSubscriptionNakEvents::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscription_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.PersistentSubscriptionNakEvents.subscription_id)
}

// repeated bytes processed_event_ids = 2;
inline int PersistentSubscriptionNakEvents::processed_event_ids_size() const {
  return processed_event_ids_.size();
}
inline void PersistentSubscriptionNakEvents::clear_processed_event_ids() {
  processed_event_ids_.Clear();
}
inline const std::string& PersistentSubscriptionNakEvents::processed_event_ids(int index) const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
  return processed_event_ids_.Get(index);
}
inline std::string* PersistentSubscriptionNakEvents::mutable_processed_event_ids(int index) {
  // @@protoc_insertion_point(field_mutable:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
  return processed_event_ids_.Mutable(index);
}
inline void PersistentSubscriptionNakEvents::set_processed_event_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
  processed_event_ids_.Mutable(index)->assign(value);
}
inline void PersistentSubscriptionNakEvents::set_processed_event_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
  processed_event_ids_.Mutable(index)->assign(std::move(value));
}
inline void PersistentSubscriptionNakEvents::set_processed_event_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processed_event_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
}
inline void PersistentSubscriptionNakEvents::set_processed_event_ids(int index, const void* value, size_t size) {
  processed_event_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
}
inline std::string* PersistentSubscriptionNakEvents::add_processed_event_ids() {
  // @@protoc_insertion_point(field_add_mutable:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
  return processed_event_ids_.Add();
}
inline void PersistentSubscriptionNakEvents::add_processed_event_ids(const std::string& value) {
  processed_event_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
}
inline void PersistentSubscriptionNakEvents::add_processed_event_ids(std::string&& value) {
  processed_event_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
}
inline void PersistentSubscriptionNakEvents::add_processed_event_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processed_event_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
}
inline void PersistentSubscriptionNakEvents::add_processed_event_ids(const void* value, size_t size) {
  processed_event_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PersistentSubscriptionNakEvents::processed_event_ids() const {
  // @@protoc_insertion_point(field_list:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
  return processed_event_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PersistentSubscriptionNakEvents::mutable_processed_event_ids() {
  // @@protoc_insertion_point(field_mutable_list:es.message.PersistentSubscriptionNakEvents.processed_event_ids)
  return &processed_event_ids_;
}

// optional string message = 3;
inline bool PersistentSubscriptionNakEvents::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistentSubscriptionNakEvents::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PersistentSubscriptionNakEvents::message() const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionNakEvents.message)
  return message_.GetNoArena();
}
inline void PersistentSubscriptionNakEvents::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionNakEvents.message)
}
inline void PersistentSubscriptionNakEvents::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.PersistentSubscriptionNakEvents.message)
}
inline void PersistentSubscriptionNakEvents::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.PersistentSubscriptionNakEvents.message)
}
inline void PersistentSubscriptionNakEvents::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.PersistentSubscriptionNakEvents.message)
}
inline std::string* PersistentSubscriptionNakEvents::mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:es.message.PersistentSubscriptionNakEvents.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistentSubscriptionNakEvents::release_message() {
  // @@protoc_insertion_point(field_release:es.message.PersistentSubscriptionNakEvents.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistentSubscriptionNakEvents::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:es.message.PersistentSubscriptionNakEvents.message)
}

// required .es.message.PersistentSubscriptionNakEvents.NakAction action = 4;
inline bool PersistentSubscriptionNakEvents::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersistentSubscriptionNakEvents::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::es::message::PersistentSubscriptionNakEvents_NakAction PersistentSubscriptionNakEvents::action() const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionNakEvents.action)
  return static_cast< ::es::message::PersistentSubscriptionNakEvents_NakAction >(action_);
}
inline void PersistentSubscriptionNakEvents::set_action(::es::message::PersistentSubscriptionNakEvents_NakAction value) {
  assert(::es::message::PersistentSubscriptionNakEvents_NakAction_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  action_ = value;
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionNakEvents.action)
}

// -------------------------------------------------------------------

// PersistentSubscriptionConfirmation

// required int64 last_commit_position = 1;
inline bool PersistentSubscriptionConfirmation::has_last_commit_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistentSubscriptionConfirmation::clear_last_commit_position() {
  last_commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistentSubscriptionConfirmation::last_commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionConfirmation.last_commit_position)
  return last_commit_position_;
}
inline void PersistentSubscriptionConfirmation::set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  last_commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionConfirmation.last_commit_position)
}

// required string subscription_id = 2;
inline bool PersistentSubscriptionConfirmation::has_subscription_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistentSubscriptionConfirmation::clear_subscription_id() {
  subscription_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PersistentSubscriptionConfirmation::subscription_id() const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionConfirmation.subscription_id)
  return subscription_id_.GetNoArena();
}
inline void PersistentSubscriptionConfirmation::set_subscription_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionConfirmation.subscription_id)
}
inline void PersistentSubscriptionConfirmation::set_subscription_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.PersistentSubscriptionConfirmation.subscription_id)
}
inline void PersistentSubscriptionConfirmation::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.PersistentSubscriptionConfirmation.subscription_id)
}
inline void PersistentSubscriptionConfirmation::set_subscription_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.PersistentSubscriptionConfirmation.subscription_id)
}
inline std::string* PersistentSubscriptionConfirmation::mutable_subscription_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.PersistentSubscriptionConfirmation.subscription_id)
  return subscription_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistentSubscriptionConfirmation::release_subscription_id() {
  // @@protoc_insertion_point(field_release:es.message.PersistentSubscriptionConfirmation.subscription_id)
  if (!has_subscription_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subscription_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistentSubscriptionConfirmation::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscription_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.PersistentSubscriptionConfirmation.subscription_id)
}

// optional int64 last_event_number = 3;
inline bool PersistentSubscriptionConfirmation::has_last_event_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersistentSubscriptionConfirmation::clear_last_event_number() {
  last_event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistentSubscriptionConfirmation::last_event_number() const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionConfirmation.last_event_number)
  return last_event_number_;
}
inline void PersistentSubscriptionConfirmation::set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionConfirmation.last_event_number)
}

// -------------------------------------------------------------------

// PersistentSubscriptionStreamEventAppeared

// required .es.message.ResolvedIndexedEvent event = 1;
inline bool PersistentSubscriptionStreamEventAppeared::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistentSubscriptionStreamEventAppeared::clear_event() {
  if (event_ != nullptr) event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::es::message::ResolvedIndexedEvent& PersistentSubscriptionStreamEventAppeared::event() const {
  const ::es::message::ResolvedIndexedEvent* p = event_;
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionStreamEventAppeared.event)
  return p != nullptr ? *p : *reinterpret_cast<const ::es::message::ResolvedIndexedEvent*>(
      &::es::message::_ResolvedIndexedEvent_default_instance_);
}
inline ::es::message::ResolvedIndexedEvent* PersistentSubscriptionStreamEventAppeared::release_event() {
  // @@protoc_insertion_point(field_release:es.message.PersistentSubscriptionStreamEventAppeared.event)
  _has_bits_[0] &= ~0x00000001u;
  ::es::message::ResolvedIndexedEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::es::message::ResolvedIndexedEvent* PersistentSubscriptionStreamEventAppeared::mutable_event() {
  _has_bits_[0] |= 0x00000001u;
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::es::message::ResolvedIndexedEvent>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:es.message.PersistentSubscriptionStreamEventAppeared.event)
  return event_;
}
inline void PersistentSubscriptionStreamEventAppeared::set_allocated_event(::es::message::ResolvedIndexedEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:es.message.PersistentSubscriptionStreamEventAppeared.event)
}

// optional int32 retryCount = 2;
inline bool PersistentSubscriptionStreamEventAppeared::has_retrycount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistentSubscriptionStreamEventAppeared::clear_retrycount() {
  retrycount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PersistentSubscriptionStreamEventAppeared::retrycount() const {
  // @@protoc_insertion_point(field_get:es.message.PersistentSubscriptionStreamEventAppeared.retryCount)
  return retrycount_;
}
inline void PersistentSubscriptionStreamEventAppeared::set_retrycount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  retrycount_ = value;
  // @@protoc_insertion_point(field_set:es.message.PersistentSubscriptionStreamEventAppeared.retryCount)
}

// -------------------------------------------------------------------

// SubscribeToStream

// required string event_stream_id = 1;
inline bool SubscribeToStream::has_event_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeToStream::clear_event_stream_id() {
  event_stream_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubscribeToStream::event_stream_id() const {
  // @@protoc_insertion_point(field_get:es.message.SubscribeToStream.event_stream_id)
  return event_stream_id_.GetNoArena();
}
inline void SubscribeToStream::set_event_stream_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.SubscribeToStream.event_stream_id)
}
inline void SubscribeToStream::set_event_stream_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.SubscribeToStream.event_stream_id)
}
inline void SubscribeToStream::set_event_stream_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.SubscribeToStream.event_stream_id)
}
inline void SubscribeToStream::set_event_stream_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_stream_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.SubscribeToStream.event_stream_id)
}
inline std::string* SubscribeToStream::mutable_event_stream_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.SubscribeToStream.event_stream_id)
  return event_stream_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubscribeToStream::release_event_stream_id() {
  // @@protoc_insertion_point(field_release:es.message.SubscribeToStream.event_stream_id)
  if (!has_event_stream_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_stream_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeToStream::set_allocated_event_stream_id(std::string* event_stream_id) {
  if (event_stream_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_stream_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stream_id);
  // @@protoc_insertion_point(field_set_allocated:es.message.SubscribeToStream.event_stream_id)
}

// required bool resolve_link_tos = 2;
inline bool SubscribeToStream::has_resolve_link_tos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeToStream::clear_resolve_link_tos() {
  resolve_link_tos_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SubscribeToStream::resolve_link_tos() const {
  // @@protoc_insertion_point(field_get:es.message.SubscribeToStream.resolve_link_tos)
  return resolve_link_tos_;
}
inline void SubscribeToStream::set_resolve_link_tos(bool value) {
  _has_bits_[0] |= 0x00000002u;
  resolve_link_tos_ = value;
  // @@protoc_insertion_point(field_set:es.message.SubscribeToStream.resolve_link_tos)
}

// -------------------------------------------------------------------

// SubscriptionConfirmation

// required int64 last_commit_position = 1;
inline bool SubscriptionConfirmation::has_last_commit_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionConfirmation::clear_last_commit_position() {
  last_commit_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionConfirmation::last_commit_position() const {
  // @@protoc_insertion_point(field_get:es.message.SubscriptionConfirmation.last_commit_position)
  return last_commit_position_;
}
inline void SubscriptionConfirmation::set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  last_commit_position_ = value;
  // @@protoc_insertion_point(field_set:es.message.SubscriptionConfirmation.last_commit_position)
}

// optional int64 last_event_number = 2;
inline bool SubscriptionConfirmation::has_last_event_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscriptionConfirmation::clear_last_event_number() {
  last_event_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionConfirmation::last_event_number() const {
  // @@protoc_insertion_point(field_get:es.message.SubscriptionConfirmation.last_event_number)
  return last_event_number_;
}
inline void SubscriptionConfirmation::set_last_event_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  last_event_number_ = value;
  // @@protoc_insertion_point(field_set:es.message.SubscriptionConfirmation.last_event_number)
}

// -------------------------------------------------------------------

// StreamEventAppeared

// required .es.message.ResolvedEvent event = 1;
inline bool StreamEventAppeared::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamEventAppeared::clear_event() {
  if (event_ != nullptr) event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::es::message::ResolvedEvent& StreamEventAppeared::event() const {
  const ::es::message::ResolvedEvent* p = event_;
  // @@protoc_insertion_point(field_get:es.message.StreamEventAppeared.event)
  return p != nullptr ? *p : *reinterpret_cast<const ::es::message::ResolvedEvent*>(
      &::es::message::_ResolvedEvent_default_instance_);
}
inline ::es::message::ResolvedEvent* StreamEventAppeared::release_event() {
  // @@protoc_insertion_point(field_release:es.message.StreamEventAppeared.event)
  _has_bits_[0] &= ~0x00000001u;
  ::es::message::ResolvedEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::es::message::ResolvedEvent* StreamEventAppeared::mutable_event() {
  _has_bits_[0] |= 0x00000001u;
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::es::message::ResolvedEvent>(GetArenaNoVirtual());
    event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:es.message.StreamEventAppeared.event)
  return event_;
}
inline void StreamEventAppeared::set_allocated_event(::es::message::ResolvedEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:es.message.StreamEventAppeared.event)
}

// -------------------------------------------------------------------

// UnsubscribeFromStream

// -------------------------------------------------------------------

// SubscriptionDropped

// optional .es.message.SubscriptionDropped.SubscriptionDropReason reason = 1;
inline bool SubscriptionDropped::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionDropped::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::es::message::SubscriptionDropped_SubscriptionDropReason SubscriptionDropped::reason() const {
  // @@protoc_insertion_point(field_get:es.message.SubscriptionDropped.reason)
  return static_cast< ::es::message::SubscriptionDropped_SubscriptionDropReason >(reason_);
}
inline void SubscriptionDropped::set_reason(::es::message::SubscriptionDropped_SubscriptionDropReason value) {
  assert(::es::message::SubscriptionDropped_SubscriptionDropReason_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  reason_ = value;
  // @@protoc_insertion_point(field_set:es.message.SubscriptionDropped.reason)
}

// -------------------------------------------------------------------

// NotHandled_MasterInfo

// required string external_tcp_address = 1;
inline bool NotHandled_MasterInfo::has_external_tcp_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotHandled_MasterInfo::clear_external_tcp_address() {
  external_tcp_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotHandled_MasterInfo::external_tcp_address() const {
  // @@protoc_insertion_point(field_get:es.message.NotHandled.MasterInfo.external_tcp_address)
  return external_tcp_address_.GetNoArena();
}
inline void NotHandled_MasterInfo::set_external_tcp_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  external_tcp_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.NotHandled.MasterInfo.external_tcp_address)
}
inline void NotHandled_MasterInfo::set_external_tcp_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  external_tcp_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.NotHandled.MasterInfo.external_tcp_address)
}
inline void NotHandled_MasterInfo::set_external_tcp_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  external_tcp_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.NotHandled.MasterInfo.external_tcp_address)
}
inline void NotHandled_MasterInfo::set_external_tcp_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  external_tcp_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.NotHandled.MasterInfo.external_tcp_address)
}
inline std::string* NotHandled_MasterInfo::mutable_external_tcp_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.NotHandled.MasterInfo.external_tcp_address)
  return external_tcp_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotHandled_MasterInfo::release_external_tcp_address() {
  // @@protoc_insertion_point(field_release:es.message.NotHandled.MasterInfo.external_tcp_address)
  if (!has_external_tcp_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return external_tcp_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotHandled_MasterInfo::set_allocated_external_tcp_address(std::string* external_tcp_address) {
  if (external_tcp_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  external_tcp_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_tcp_address);
  // @@protoc_insertion_point(field_set_allocated:es.message.NotHandled.MasterInfo.external_tcp_address)
}

// required int32 external_tcp_port = 2;
inline bool NotHandled_MasterInfo::has_external_tcp_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotHandled_MasterInfo::clear_external_tcp_port() {
  external_tcp_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotHandled_MasterInfo::external_tcp_port() const {
  // @@protoc_insertion_point(field_get:es.message.NotHandled.MasterInfo.external_tcp_port)
  return external_tcp_port_;
}
inline void NotHandled_MasterInfo::set_external_tcp_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  external_tcp_port_ = value;
  // @@protoc_insertion_point(field_set:es.message.NotHandled.MasterInfo.external_tcp_port)
}

// required string external_http_address = 3;
inline bool NotHandled_MasterInfo::has_external_http_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotHandled_MasterInfo::clear_external_http_address() {
  external_http_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotHandled_MasterInfo::external_http_address() const {
  // @@protoc_insertion_point(field_get:es.message.NotHandled.MasterInfo.external_http_address)
  return external_http_address_.GetNoArena();
}
inline void NotHandled_MasterInfo::set_external_http_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  external_http_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.NotHandled.MasterInfo.external_http_address)
}
inline void NotHandled_MasterInfo::set_external_http_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  external_http_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.NotHandled.MasterInfo.external_http_address)
}
inline void NotHandled_MasterInfo::set_external_http_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  external_http_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.NotHandled.MasterInfo.external_http_address)
}
inline void NotHandled_MasterInfo::set_external_http_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  external_http_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.NotHandled.MasterInfo.external_http_address)
}
inline std::string* NotHandled_MasterInfo::mutable_external_http_address() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:es.message.NotHandled.MasterInfo.external_http_address)
  return external_http_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotHandled_MasterInfo::release_external_http_address() {
  // @@protoc_insertion_point(field_release:es.message.NotHandled.MasterInfo.external_http_address)
  if (!has_external_http_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return external_http_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotHandled_MasterInfo::set_allocated_external_http_address(std::string* external_http_address) {
  if (external_http_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  external_http_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_http_address);
  // @@protoc_insertion_point(field_set_allocated:es.message.NotHandled.MasterInfo.external_http_address)
}

// required int32 external_http_port = 4;
inline bool NotHandled_MasterInfo::has_external_http_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotHandled_MasterInfo::clear_external_http_port() {
  external_http_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotHandled_MasterInfo::external_http_port() const {
  // @@protoc_insertion_point(field_get:es.message.NotHandled.MasterInfo.external_http_port)
  return external_http_port_;
}
inline void NotHandled_MasterInfo::set_external_http_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  external_http_port_ = value;
  // @@protoc_insertion_point(field_set:es.message.NotHandled.MasterInfo.external_http_port)
}

// optional string external_secure_tcp_address = 5;
inline bool NotHandled_MasterInfo::has_external_secure_tcp_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotHandled_MasterInfo::clear_external_secure_tcp_address() {
  external_secure_tcp_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NotHandled_MasterInfo::external_secure_tcp_address() const {
  // @@protoc_insertion_point(field_get:es.message.NotHandled.MasterInfo.external_secure_tcp_address)
  return external_secure_tcp_address_.GetNoArena();
}
inline void NotHandled_MasterInfo::set_external_secure_tcp_address(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  external_secure_tcp_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.NotHandled.MasterInfo.external_secure_tcp_address)
}
inline void NotHandled_MasterInfo::set_external_secure_tcp_address(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  external_secure_tcp_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.NotHandled.MasterInfo.external_secure_tcp_address)
}
inline void NotHandled_MasterInfo::set_external_secure_tcp_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  external_secure_tcp_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.NotHandled.MasterInfo.external_secure_tcp_address)
}
inline void NotHandled_MasterInfo::set_external_secure_tcp_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  external_secure_tcp_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.NotHandled.MasterInfo.external_secure_tcp_address)
}
inline std::string* NotHandled_MasterInfo::mutable_external_secure_tcp_address() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:es.message.NotHandled.MasterInfo.external_secure_tcp_address)
  return external_secure_tcp_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotHandled_MasterInfo::release_external_secure_tcp_address() {
  // @@protoc_insertion_point(field_release:es.message.NotHandled.MasterInfo.external_secure_tcp_address)
  if (!has_external_secure_tcp_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return external_secure_tcp_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotHandled_MasterInfo::set_allocated_external_secure_tcp_address(std::string* external_secure_tcp_address) {
  if (external_secure_tcp_address != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  external_secure_tcp_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_secure_tcp_address);
  // @@protoc_insertion_point(field_set_allocated:es.message.NotHandled.MasterInfo.external_secure_tcp_address)
}

// optional int32 external_secure_tcp_port = 6;
inline bool NotHandled_MasterInfo::has_external_secure_tcp_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotHandled_MasterInfo::clear_external_secure_tcp_port() {
  external_secure_tcp_port_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotHandled_MasterInfo::external_secure_tcp_port() const {
  // @@protoc_insertion_point(field_get:es.message.NotHandled.MasterInfo.external_secure_tcp_port)
  return external_secure_tcp_port_;
}
inline void NotHandled_MasterInfo::set_external_secure_tcp_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  external_secure_tcp_port_ = value;
  // @@protoc_insertion_point(field_set:es.message.NotHandled.MasterInfo.external_secure_tcp_port)
}

// -------------------------------------------------------------------

// NotHandled

// required .es.message.NotHandled.NotHandledReason reason = 1;
inline bool NotHandled::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotHandled::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::es::message::NotHandled_NotHandledReason NotHandled::reason() const {
  // @@protoc_insertion_point(field_get:es.message.NotHandled.reason)
  return static_cast< ::es::message::NotHandled_NotHandledReason >(reason_);
}
inline void NotHandled::set_reason(::es::message::NotHandled_NotHandledReason value) {
  assert(::es::message::NotHandled_NotHandledReason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
  // @@protoc_insertion_point(field_set:es.message.NotHandled.reason)
}

// optional bytes additional_info = 2;
inline bool NotHandled::has_additional_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotHandled::clear_additional_info() {
  additional_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotHandled::additional_info() const {
  // @@protoc_insertion_point(field_get:es.message.NotHandled.additional_info)
  return additional_info_.GetNoArena();
}
inline void NotHandled::set_additional_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  additional_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.NotHandled.additional_info)
}
inline void NotHandled::set_additional_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  additional_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.NotHandled.additional_info)
}
inline void NotHandled::set_additional_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  additional_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.NotHandled.additional_info)
}
inline void NotHandled::set_additional_info(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  additional_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.NotHandled.additional_info)
}
inline std::string* NotHandled::mutable_additional_info() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.NotHandled.additional_info)
  return additional_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotHandled::release_additional_info() {
  // @@protoc_insertion_point(field_release:es.message.NotHandled.additional_info)
  if (!has_additional_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return additional_info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotHandled::set_allocated_additional_info(std::string* additional_info) {
  if (additional_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  additional_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), additional_info);
  // @@protoc_insertion_point(field_set_allocated:es.message.NotHandled.additional_info)
}

// -------------------------------------------------------------------

// ScavengeDatabase

// -------------------------------------------------------------------

// ScavengeDatabaseResponse

// required .es.message.ScavengeDatabaseResponse.ScavengeResult result = 1;
inline bool ScavengeDatabaseResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScavengeDatabaseResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::es::message::ScavengeDatabaseResponse_ScavengeResult ScavengeDatabaseResponse::result() const {
  // @@protoc_insertion_point(field_get:es.message.ScavengeDatabaseResponse.result)
  return static_cast< ::es::message::ScavengeDatabaseResponse_ScavengeResult >(result_);
}
inline void ScavengeDatabaseResponse::set_result(::es::message::ScavengeDatabaseResponse_ScavengeResult value) {
  assert(::es::message::ScavengeDatabaseResponse_ScavengeResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
  // @@protoc_insertion_point(field_set:es.message.ScavengeDatabaseResponse.result)
}

// optional string scavengeId = 2;
inline bool ScavengeDatabaseResponse::has_scavengeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScavengeDatabaseResponse::clear_scavengeid() {
  scavengeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScavengeDatabaseResponse::scavengeid() const {
  // @@protoc_insertion_point(field_get:es.message.ScavengeDatabaseResponse.scavengeId)
  return scavengeid_.GetNoArena();
}
inline void ScavengeDatabaseResponse::set_scavengeid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scavengeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.ScavengeDatabaseResponse.scavengeId)
}
inline void ScavengeDatabaseResponse::set_scavengeid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scavengeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.ScavengeDatabaseResponse.scavengeId)
}
inline void ScavengeDatabaseResponse::set_scavengeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scavengeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.ScavengeDatabaseResponse.scavengeId)
}
inline void ScavengeDatabaseResponse::set_scavengeid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scavengeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.ScavengeDatabaseResponse.scavengeId)
}
inline std::string* ScavengeDatabaseResponse::mutable_scavengeid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.ScavengeDatabaseResponse.scavengeId)
  return scavengeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScavengeDatabaseResponse::release_scavengeid() {
  // @@protoc_insertion_point(field_release:es.message.ScavengeDatabaseResponse.scavengeId)
  if (!has_scavengeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scavengeid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScavengeDatabaseResponse::set_allocated_scavengeid(std::string* scavengeid) {
  if (scavengeid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scavengeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scavengeid);
  // @@protoc_insertion_point(field_set_allocated:es.message.ScavengeDatabaseResponse.scavengeId)
}

// -------------------------------------------------------------------

// IdentifyClient

// required int32 version = 1;
inline bool IdentifyClient::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IdentifyClient::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IdentifyClient::version() const {
  // @@protoc_insertion_point(field_get:es.message.IdentifyClient.version)
  return version_;
}
inline void IdentifyClient::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
  // @@protoc_insertion_point(field_set:es.message.IdentifyClient.version)
}

// optional string connection_name = 2;
inline bool IdentifyClient::has_connection_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IdentifyClient::clear_connection_name() {
  connection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IdentifyClient::connection_name() const {
  // @@protoc_insertion_point(field_get:es.message.IdentifyClient.connection_name)
  return connection_name_.GetNoArena();
}
inline void IdentifyClient::set_connection_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:es.message.IdentifyClient.connection_name)
}
inline void IdentifyClient::set_connection_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:es.message.IdentifyClient.connection_name)
}
inline void IdentifyClient::set_connection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  connection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:es.message.IdentifyClient.connection_name)
}
inline void IdentifyClient::set_connection_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  connection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:es.message.IdentifyClient.connection_name)
}
inline std::string* IdentifyClient::mutable_connection_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:es.message.IdentifyClient.connection_name)
  return connection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IdentifyClient::release_connection_name() {
  // @@protoc_insertion_point(field_release:es.message.IdentifyClient.connection_name)
  if (!has_connection_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return connection_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IdentifyClient::set_allocated_connection_name(std::string* connection_name) {
  if (connection_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_name);
  // @@protoc_insertion_point(field_set_allocated:es.message.IdentifyClient.connection_name)
}

// -------------------------------------------------------------------

// ClientIdentified

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace es

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::es::message::ReadEventCompleted_ReadEventResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::ReadEventCompleted_ReadEventResult>() {
  return ::es::message::ReadEventCompleted_ReadEventResult_descriptor();
}
template <> struct is_proto_enum< ::es::message::ReadStreamEventsCompleted_ReadStreamResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::ReadStreamEventsCompleted_ReadStreamResult>() {
  return ::es::message::ReadStreamEventsCompleted_ReadStreamResult_descriptor();
}
template <> struct is_proto_enum< ::es::message::ReadAllEventsCompleted_ReadAllResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::ReadAllEventsCompleted_ReadAllResult>() {
  return ::es::message::ReadAllEventsCompleted_ReadAllResult_descriptor();
}
template <> struct is_proto_enum< ::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult>() {
  return ::es::message::UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_descriptor();
}
template <> struct is_proto_enum< ::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult>() {
  return ::es::message::CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_descriptor();
}
template <> struct is_proto_enum< ::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult>() {
  return ::es::message::DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_descriptor();
}
template <> struct is_proto_enum< ::es::message::PersistentSubscriptionNakEvents_NakAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::PersistentSubscriptionNakEvents_NakAction>() {
  return ::es::message::PersistentSubscriptionNakEvents_NakAction_descriptor();
}
template <> struct is_proto_enum< ::es::message::SubscriptionDropped_SubscriptionDropReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::SubscriptionDropped_SubscriptionDropReason>() {
  return ::es::message::SubscriptionDropped_SubscriptionDropReason_descriptor();
}
template <> struct is_proto_enum< ::es::message::NotHandled_NotHandledReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::NotHandled_NotHandledReason>() {
  return ::es::message::NotHandled_NotHandledReason_descriptor();
}
template <> struct is_proto_enum< ::es::message::ScavengeDatabaseResponse_ScavengeResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::ScavengeDatabaseResponse_ScavengeResult>() {
  return ::es::message::ScavengeDatabaseResponse_ScavengeResult_descriptor();
}
template <> struct is_proto_enum< ::es::message::OperationResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::es::message::OperationResult>() {
  return ::es::message::OperationResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
